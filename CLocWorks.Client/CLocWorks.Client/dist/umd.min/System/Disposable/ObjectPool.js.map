{"version":3,"sources":["System/Disposable/ObjectPool.js","System/Disposable/ObjectPool.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","dispose_1","DisposableBase_1","TaskHandler_1","ArgumentOutOfRangeException_1","OBJECT_POOL","_MAX_SIZE","ABSOLUTE_MAX_SIZE","MUST_BE_GT1","MUST_BE_LTM","ObjectPool","_super","_maxSize","_generator","_recycler","call","autoClearTimeout","isNaN","ArgumentOutOfRangeException","_localAbsMaxSize","Math","min","_","_disposableObjectName","_pool","_trimmer","TaskHandler","_trim","clear","_clear","_flusher","_autoFlusher","defineProperty","get","enumerable","configurable","length","pool","dispose","withoutException","pop","trim","defer","throwIfDisposed","start","cancel","these","toArrayAndClear","dump","_onDispose","extendAutoClear","t","isFinite","isScheduled","add","o","push","m","take","e","len","DisposableBase","value"],"mappings":"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","file":"System/Disposable/ObjectPool.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based upon ObjectPool from Parallel Extension Extras and other ObjectPool implementations.\n * Uses .add(T) and .take():T\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./dispose\", \"./DisposableBase\", \"../Threading/Tasks/TaskHandler\", \"../Exceptions/ArgumentOutOfRangeException\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var dispose_1 = require(\"./dispose\");\n    var DisposableBase_1 = require(\"./DisposableBase\");\n    var TaskHandler_1 = require(\"../Threading/Tasks/TaskHandler\");\n    var ArgumentOutOfRangeException_1 = require(\"../Exceptions/ArgumentOutOfRangeException\");\n    var OBJECT_POOL = \"ObjectPool\", _MAX_SIZE = \"_maxSize\", ABSOLUTE_MAX_SIZE = 65536, MUST_BE_GT1 = \"Must be at valid number least 1.\", MUST_BE_LTM = \"Must be less than or equal to \" + ABSOLUTE_MAX_SIZE + \".\";\n    var ObjectPool = (function (_super) {\n        __extends(ObjectPool, _super);\n        function ObjectPool(_maxSize, _generator, _recycler) {\n            _super.call(this);\n            this._maxSize = _maxSize;\n            this._generator = _generator;\n            this._recycler = _recycler;\n            this.autoClearTimeout = 5000;\n            if (isNaN(_maxSize) || _maxSize < 1)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(_MAX_SIZE, _maxSize, MUST_BE_GT1);\n            if (_maxSize > ABSOLUTE_MAX_SIZE)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(_MAX_SIZE, _maxSize, MUST_BE_LTM);\n            this._localAbsMaxSize = Math.min(_maxSize * 2, ABSOLUTE_MAX_SIZE);\n            var _ = this;\n            _._disposableObjectName = OBJECT_POOL;\n            _._pool = [];\n            _._trimmer = new TaskHandler_1.TaskHandler(function () { return _._trim(); });\n            var clear = function () { return _._clear(); };\n            _._flusher = new TaskHandler_1.TaskHandler(clear);\n            _._autoFlusher = new TaskHandler_1.TaskHandler(clear);\n        }\n        Object.defineProperty(ObjectPool.prototype, \"maxSize\", {\n            get: function () {\n                return this._maxSize;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ObjectPool.prototype, \"count\", {\n            get: function () {\n                var p = this._pool;\n                return p ? p.length : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ObjectPool.prototype._trim = function () {\n            var pool = this._pool;\n            while (pool.length > this._maxSize) {\n                dispose_1.dispose.withoutException(pool.pop());\n            }\n        };\n        ObjectPool.prototype.trim = function (defer) {\n            this.throwIfDisposed();\n            this._trimmer.start(defer);\n        };\n        ObjectPool.prototype._clear = function () {\n            var _ = this, p = _._pool;\n            _._trimmer.cancel();\n            _._flusher.cancel();\n            _._autoFlusher.cancel();\n            dispose_1.dispose.these(p, true);\n            p.length = 0;\n        };\n        ObjectPool.prototype.clear = function (defer) {\n            this.throwIfDisposed();\n            this._flusher.start(defer);\n        };\n        ObjectPool.prototype.toArrayAndClear = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            _._trimmer.cancel();\n            _._flusher.cancel();\n            var p = _._pool;\n            _._pool = [];\n            return p;\n        };\n        ObjectPool.prototype.dump = function () {\n            return this.toArrayAndClear();\n        };\n        ObjectPool.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            var _ = this;\n            _._generator = null;\n            _._recycler = null;\n            dispose_1.dispose(_._trimmer, _._flusher, _._autoFlusher);\n            _._trimmer = null;\n            _._flusher = null;\n            _._autoFlusher = null;\n            _._pool.length = 0;\n            _._pool = null;\n        };\n        ObjectPool.prototype.extendAutoClear = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var t = _.autoClearTimeout;\n            if (isFinite(t) && !_._autoFlusher.isScheduled)\n                _._autoFlusher.start(t);\n        };\n        ObjectPool.prototype.add = function (o) {\n            var _ = this;\n            _.throwIfDisposed();\n            if (_._pool.length >= _._localAbsMaxSize) {\n                dispose_1.dispose(o);\n            }\n            else {\n                if (_._recycler)\n                    _._recycler(o);\n                _._pool.push(o);\n                var m = _._maxSize;\n                if (m < ABSOLUTE_MAX_SIZE && _._pool.length > m)\n                    _._trimmer.start(500);\n            }\n            _.extendAutoClear();\n        };\n        ObjectPool.prototype.take = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var e = _._pool.pop() || _._generator(), len = _._pool.length;\n            if (_._pool.length <= _._maxSize)\n                _._trimmer.cancel();\n            if (len)\n                _.extendAutoClear();\n            return e;\n        };\n        return ObjectPool;\n    }(DisposableBase_1.DisposableBase));\n    exports.ObjectPool = ObjectPool;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ObjectPool;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon ObjectPool from Parallel Extension Extras and other ObjectPool implementations.\r\n * Uses .add(T) and .take():T\r\n */\r\n\r\nimport {dispose} from \"./dispose\";\r\nimport {DisposableBase} from \"./DisposableBase\";\r\nimport {TaskHandler} from \"../Threading/Tasks/TaskHandler\";\r\nimport {ArgumentOutOfRangeException} from \"../Exceptions/ArgumentOutOfRangeException\";\r\n\r\nconst\r\n\tOBJECT_POOL       = \"ObjectPool\",\r\n\t_MAX_SIZE         = \"_maxSize\",\r\n\tABSOLUTE_MAX_SIZE = 65536,\r\n\tMUST_BE_GT1       = \"Must be at valid number least 1.\",\r\n\tMUST_BE_LTM       = `Must be less than or equal to ${ABSOLUTE_MAX_SIZE}.`;\r\n\r\nexport class ObjectPool<T> extends DisposableBase\r\n{\r\n\r\n\tprivate _pool:T[];\r\n\tprivate _trimmer:TaskHandler;\r\n\tprivate _flusher:TaskHandler;\r\n\tprivate _autoFlusher:TaskHandler;\r\n\r\n\t/**\r\n\t * A transient amount of object to exist over _maxSize until trim() is called.\r\n\t * But any added objects over _localAbsMaxSize will be disposed immediately.\r\n\t */\r\n\tprivate _localAbsMaxSize:number;\r\n\r\n\t/**\r\n\t * By default will clear after 5 seconds of non-use.\r\n\t */\r\n\tautoClearTimeout:number = 5000;\r\n\r\n\tconstructor(\r\n\t\tprivate _maxSize:number,\r\n\t\tprivate _generator:(...args:any[])=>T,\r\n\t\tprivate _recycler?:(o:T)=>void)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(isNaN(_maxSize) || _maxSize<1)\r\n\t\t\tthrow new ArgumentOutOfRangeException(_MAX_SIZE, _maxSize, MUST_BE_GT1);\r\n\t\tif(_maxSize>ABSOLUTE_MAX_SIZE)\r\n\t\t\tthrow new ArgumentOutOfRangeException(_MAX_SIZE, _maxSize, MUST_BE_LTM);\r\n\r\n\t\tthis._localAbsMaxSize = Math.min(_maxSize*2, ABSOLUTE_MAX_SIZE);\r\n\r\n\t\tvar _ = this;\r\n\t\t_._disposableObjectName = OBJECT_POOL;\r\n\t\t_._pool = [];\r\n\t\t_._trimmer = new TaskHandler(()=>_._trim());\r\n\t\tvar clear = ()=>_._clear();\r\n\t\t_._flusher = new TaskHandler(clear);\r\n\t\t_._autoFlusher = new TaskHandler(clear);\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the maximum at which trimming should allow.\r\n\t * @returns {number}\r\n\t */\r\n\tget maxSize():number\r\n\t{\r\n\t\treturn this._maxSize;\r\n\t}\r\n\r\n\t/**\r\n\t * Current number of objects in pool.\r\n\t * @returns {number}\r\n\t */\r\n\tget count():number\r\n\t{\r\n\t\tvar p = this._pool;\r\n\t\treturn p ? p.length : 0;\r\n\t}\r\n\r\n\tprotected _trim():void\r\n\t{\r\n\t\tvar pool = this._pool;\r\n\t\twhile(pool.length>this._maxSize)\r\n\t\t{\r\n\t\t\tdispose.withoutException(<any>pool.pop());\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Will trim ensure the pool is less than the maxSize.\r\n\t * @param defer A delay before trimming.  Will be overridden by later calls.\r\n\t */\r\n\ttrim(defer?:number):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis._trimmer.start(defer);\r\n\t}\r\n\r\n\tprotected _clear():void\r\n\t{\r\n\t\tvar _ = this, p = _._pool;\r\n\t\t_._trimmer.cancel();\r\n\t\t_._flusher.cancel();\r\n\t\t_._autoFlusher.cancel();\r\n\t\tdispose.these(<any>p, true);\r\n\t\tp.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Will clear out the pool.\r\n\t * Cancels any scheduled trims when executed.\r\n\t * @param defer A delay before clearing.  Will be overridden by later calls.\r\n\t */\r\n\tclear(defer?:number):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis._flusher.start(defer);\r\n\t}\r\n\r\n\ttoArrayAndClear():T[]\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\t_._trimmer.cancel();\r\n\t\t_._flusher.cancel();\r\n\t\tvar p = _._pool;\r\n\t\t_._pool = [];\r\n\t\treturn p;\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut for toArrayAndClear();\r\n\t */\r\n\tdump():T[]\r\n\t{\r\n\t\treturn this.toArrayAndClear();\r\n\t}\r\n\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tvar _ = this;\r\n\t\t_._generator = null;\r\n\t\t_._recycler = null;\r\n\t\tdispose(\r\n\t\t\t_._trimmer,\r\n\t\t\t_._flusher,\r\n\t\t\t_._autoFlusher\r\n\t\t);\r\n\t\t_._trimmer = null;\r\n\t\t_._flusher = null;\r\n\t\t_._autoFlusher = null;\r\n\r\n\t\t_._pool.length = 0;\r\n\t\t_._pool = null;\r\n\t}\r\n\r\n\textendAutoClear():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tvar t = _.autoClearTimeout;\r\n\t\tif(isFinite(t) && !_._autoFlusher.isScheduled)\r\n\t\t\t_._autoFlusher.start(t);\r\n\t}\r\n\r\n\tadd(o:T):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tif(_._pool.length>=_._localAbsMaxSize)\r\n\t\t{\r\n\t\t\t// Getting too big, dispose immediately...\r\n\t\t\tdispose(<any>o);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(_._recycler) _._recycler(o);\r\n\t\t\t_._pool.push(o);\r\n\t\t\tvar m = _._maxSize;\r\n\t\t\tif(m<ABSOLUTE_MAX_SIZE && _._pool.length>m)\r\n\t\t\t\t_._trimmer.start(500);\r\n\t\t}\r\n\t\t_.extendAutoClear();\r\n\r\n\t}\r\n\r\n\ttake():T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tvar e   = _._pool.pop() || _._generator(),\r\n\t\t    len = _._pool.length;\r\n\r\n\t\tif(_._pool.length<=_._maxSize)\r\n\t\t\t_._trimmer.cancel();\r\n\t\tif(len)\r\n\t\t\t_.extendAutoClear();\r\n\r\n\t\treturn e;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default ObjectPool;\r\n"]}