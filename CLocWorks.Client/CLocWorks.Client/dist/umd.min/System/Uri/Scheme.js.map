{"version":3,"sources":["System/Uri/Scheme.js","System/Uri/Scheme.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","isValid","scheme","All","indexOf","File","FTP","GOPHER","HTTP","HTTPS","LDAP","MAILTO","PIPE","TCP","NEWS","NNTP","TELNET","UUID","Object","freeze"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,WAAYN,IAEpC,SAAUI,EAASF,GAClB,YCiFJ,SAAAM,GAAwBC,GACvB,MAAiC,IAA1BP,EAAAQ,IAAIC,QAAaF,GAlFZP,EAAAU,KAAmB,OAMnBV,EAAAW,IAAiB,MAMjBX,EAAAY,OAAuB,SAMvBZ,EAAAa,KAAmB,OAMnBb,EAAAc,MAAqB,QAMrBd,EAAAe,KAAmB,OAMnBf,EAAAgB,OAAuB,SAMvBhB,EAAAiB,KAAmB,WAMnBjB,EAAAkB,IAAiB,UAMjBlB,EAAAmB,KAAmB,OAMnBnB,EAAAoB,KAAmB,OAMnBpB,EAAAqB,OAAuB,SAKvBrB,EAAAsB,KAAmB,OAMnBtB,EAAAQ,IAAoBe,OAAOC,QACvCxB,EAAAU,KAAMV,EAAAW,IAAKX,EAAAY,OAAQZ,EAAAa,KAAMb,EAAAc,MAAOd,EAAAe,KAAMf,EAAAgB,OAAQhB,EAAAiB,KAAMjB,EAAAkB,IAAKlB,EAAAmB,KAAMnB,EAAAoB,KAAMpB,EAAAqB,OAAQrB,EAAAsB,OAG9DtB,EAAAM,QAAOA","file":"System/Uri/Scheme.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based on: https://msdn.microsoft.com/en-us/library/system.uri.scheme%28v=vs.110%29.aspx\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    exports.File = \"file\";\n    exports.FTP = \"ftp\";\n    exports.GOPHER = \"gopher\";\n    exports.HTTP = \"http\";\n    exports.HTTPS = \"https\";\n    exports.LDAP = \"ldap\";\n    exports.MAILTO = \"mailto\";\n    exports.PIPE = \"net.pipe\";\n    exports.TCP = \"net.tcp\";\n    exports.NEWS = \"news\";\n    exports.NNTP = \"nntp\";\n    exports.TELNET = \"telnet\";\n    exports.UUID = \"uuid\";\n    exports.All = Object.freeze([\n        exports.File, exports.FTP, exports.GOPHER, exports.HTTP, exports.HTTPS, exports.LDAP, exports.MAILTO, exports.PIPE, exports.TCP, exports.NEWS, exports.NNTP, exports.TELNET, exports.UUID\n    ]);\n    function isValid(scheme) {\n        return exports.All.indexOf(scheme) != -1;\n    }\n    exports.isValid = isValid;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based on: https://msdn.microsoft.com/en-us/library/system.uri.scheme%28v=vs.110%29.aspx\r\n */\r\n\r\nimport * as Scheme from \"./SchemeValue\";\r\nimport {SchemeValue} from \"./SchemeValue\";\r\n\r\n\r\n/**\r\n * The resource is a file on the local computer.\r\n */\r\nexport const File:Scheme.File = \"file\";\r\n\r\n\r\n/**\r\n * The resource is accessed through FTP.\r\n */\r\nexport const FTP:Scheme.FTP = \"ftp\";\r\n\r\n\r\n/**\r\n * The resource is accessed through the Gopher protocol.\r\n */\r\nexport const GOPHER:Scheme.Gopher = \"gopher\";\r\n\r\n\r\n/**\r\n * The resource is accessed through HTTP.\r\n */\r\nexport const HTTP:Scheme.HTTP = \"http\";\r\n\r\n\r\n/**\r\n * The resource is accessed through SSL-encrypted HTTP.\r\n */\r\nexport const HTTPS:Scheme.HTTPS = \"https\";\r\n\r\n\r\n/**\r\n * The resource is accessed through the LDAP protocol.\r\n */\r\nexport const LDAP:Scheme.LDAP = \"ldap\";\r\n\r\n\r\n/**\r\n * The resource is an e-mail address and accessed through the SMTP protocol.\r\n */\r\nexport const MAILTO:Scheme.MailTo = \"mailto\";\r\n\r\n\r\n/**\r\n * The resource is accessed through a named pipe.\r\n */\r\nexport const PIPE:Scheme.Pipe = \"net.pipe\";\r\n\r\n\r\n/**\r\n * The resource is accessed from TCP endpoint.\r\n */\r\nexport const TCP:Scheme.TCP = \"net.tcp\";\r\n\r\n\r\n/**\r\n * The resource is accessed through the NNTP protocol.\r\n */\r\nexport const NEWS:Scheme.NNTP = \"news\";\r\n\r\n\r\n/**\r\n * The resource is accessed through the NNTP protocol.\r\n */\r\nexport const NNTP:Scheme.NNTP = \"nntp\";\r\n\r\n\r\n/**\r\n * The resource is accessed through the TELNET protocol.\r\n */\r\nexport const TELNET:Scheme.Telnet = \"telnet\";\r\n\r\n/**\r\n * The resource is accessed through a unique UUID endpoint name for communicating with a service.\r\n */\r\nexport const UUID:Scheme.UUID = \"uuid\";\r\n\r\n/**\r\n * An index of possible values to validate against.\r\n * @type {Array}\r\n */\r\nexport const All:SchemeValue[] = Object.freeze([\r\n\tFile, FTP, GOPHER, HTTP, HTTPS, LDAP, MAILTO, PIPE, TCP, NEWS, NNTP, TELNET, UUID\r\n]);\r\n\r\nexport function isValid(scheme:string):scheme is SchemeValue {\r\n\treturn All.indexOf(<any>scheme)!=-1;\r\n}\r\n"]}