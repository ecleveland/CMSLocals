{"version":3,"sources":["System/Uri/Uri.js","System/Uri/Uri.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","copyUri","from","to","field","i","Fields","value","getScheme","scheme","s","Types_1","Type","isString","Utility_1","trim","toLowerCase","replace","EMPTY","Scheme","isValid","ArgumentOutOfRangeException_1","ArgumentOutOfRangeException","getPort","port","p","isNumber","isFinite","parseInt","isNaN","ArgumentException_1","ArgumentException","getAuthority","uri","host","userInfo","result","AT","SLASH2","formatQuery","query","indexOf","QM","formatFragment","fragment","HASH","getPathAndQuery","path","uriToString","authority","pathAndQuery","part1","part2","SLASH","tryParse","url","out","substring","VOID0","c","test","ex","QueryParams","Uri","_","this","encode","Object","freeze","queryParams","parseToMap","absoluteUri","getAbsoluteUri","baseUri","prototype","equals","other","toString","defaults","u","parse","throwIfInvalid","copyOf","map","copyTo","updateQuery","toMap","defineProperty","get","match","enumerable","configurable","Separator","Query"],"mappings":"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","file":"System/Uri/Uri.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based on: https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../Types\", \"./QueryParams\", \"./Scheme\", \"../Text/Utility\", \"../Exceptions/ArgumentException\", \"../Exceptions/ArgumentOutOfRangeException\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Types_1 = require(\"../Types\");\n    var QueryParams = require(\"./QueryParams\");\n    var Scheme = require(\"./Scheme\");\n    var Utility_1 = require(\"../Text/Utility\");\n    var ArgumentException_1 = require(\"../Exceptions/ArgumentException\");\n    var ArgumentOutOfRangeException_1 = require(\"../Exceptions/ArgumentOutOfRangeException\");\n    var VOID0 = void (0);\n    var Uri = (function () {\n        function Uri(scheme, userInfo, host, port, path, query, fragment) {\n            var _ = this;\n            _.scheme = getScheme(scheme) || null;\n            _.userInfo = userInfo || null;\n            _.host = host || null;\n            _.port = getPort(port);\n            _.authority = _.getAuthority() || null;\n            _.path = path || null;\n            if (!Types_1.Type.isString(query))\n                query = QueryParams.encode(query);\n            _.query = formatQuery(query) || null;\n            Object.freeze(_.queryParams\n                = _.query\n                    ? QueryParams.parseToMap(_.query)\n                    : {});\n            _.pathAndQuery = _.getPathAndQuery() || null;\n            _.fragment = formatFragment(fragment) || null;\n            _.absoluteUri = _.getAbsoluteUri();\n            _.baseUri = _.absoluteUri.replace(/[?#].*/, '');\n            Object.freeze(_);\n        }\n        Uri.prototype.equals = function (other) {\n            return this === other || this.absoluteUri == Uri.toString(other);\n        };\n        Uri.from = function (uri, defaults) {\n            var u = (!uri || Types_1.Type.isString(uri))\n                ? Uri.parse(uri) : uri;\n            return new Uri(u.scheme || defaults && defaults.scheme, u.userInfo || defaults && defaults.userInfo, u.host || defaults && defaults.host, isNaN(u.port) ? defaults && defaults.port : u.port, u.path || defaults && defaults.path, u.query || defaults && defaults.query, u.fragment || defaults && defaults.fragment);\n        };\n        Uri.parse = function (url, throwIfInvalid) {\n            if (throwIfInvalid === void 0) { throwIfInvalid = true; }\n            var result = null;\n            var ex = tryParse(url, function (out) { result = out; });\n            if (throwIfInvalid && ex)\n                throw ex;\n            return result;\n        };\n        Uri.tryParse = function (url, out) {\n            return !tryParse(url, out);\n        };\n        Uri.copyOf = function (map) {\n            return copyUri(map);\n        };\n        Uri.prototype.copyTo = function (map) {\n            return copyUri(this, map);\n        };\n        Uri.prototype.updateQuery = function (query) {\n            var map = this.toMap();\n            map.query = query;\n            return Uri.from(map);\n        };\n        Uri.prototype.getAbsoluteUri = function () {\n            return uriToString(this);\n        };\n        Uri.prototype.getAuthority = function () {\n            return getAuthority(this);\n        };\n        Uri.prototype.getPathAndQuery = function () {\n            return getPathAndQuery(this);\n        };\n        Object.defineProperty(Uri.prototype, \"pathSegments\", {\n            get: function () {\n                return this.path.match(/^[/]|[^/]*[/]|[^/]+$/g);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Uri.prototype.toMap = function () {\n            return this.copyTo({});\n        };\n        Uri.prototype.toString = function () {\n            return this.absoluteUri;\n        };\n        Uri.toString = function (uri) {\n            return uri instanceof Uri\n                ? uri.absoluteUri\n                : uriToString(uri);\n        };\n        Uri.getAuthority = function (uri) {\n            return getAuthority(uri);\n        };\n        return Uri;\n    }());\n    exports.Uri = Uri;\n    (function (Fields) {\n        Fields[Fields[\"scheme\"] = 0] = \"scheme\";\n        Fields[Fields[\"userInfo\"] = 1] = \"userInfo\";\n        Fields[Fields[\"host\"] = 2] = \"host\";\n        Fields[Fields[\"port\"] = 3] = \"port\";\n        Fields[Fields[\"path\"] = 4] = \"path\";\n        Fields[Fields[\"query\"] = 5] = \"query\";\n        Fields[Fields[\"fragment\"] = 6] = \"fragment\";\n    })(exports.Fields || (exports.Fields = {}));\n    var Fields = exports.Fields;\n    Object.freeze(Fields);\n    function copyUri(from, to) {\n        var i = 0, field;\n        if (!to)\n            to = {};\n        while (field = Fields[i++]) {\n            var value = from[field];\n            if (value)\n                to[field] = value;\n        }\n        return to;\n    }\n    var SLASH = '/', SLASH2 = '//', QM = QueryParams.Separator.Query, HASH = '#', EMPTY = '', AT = '@';\n    function getScheme(scheme) {\n        var s = scheme;\n        if (Types_1.Type.isString(s)) {\n            if (!s)\n                return null;\n            s = Utility_1.trim(s).toLowerCase().replace(/[^a-z0-9+.-]+$/g, EMPTY);\n            if (!s)\n                return null;\n            if (Scheme.isValid(s))\n                return s;\n        }\n        else {\n            if (s === null || s === undefined)\n                return s;\n        }\n        throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('scheme', scheme, 'Invalid scheme.');\n    }\n    function getPort(port) {\n        if (port === 0)\n            return port;\n        if (!port)\n            return null;\n        var p;\n        if (Types_1.Type.isNumber(port, true)) {\n            p = port;\n            if (p >= 0 && isFinite(p))\n                return p;\n        }\n        else if (Types_1.Type.isString(port) && (p = parseInt(port)) && !isNaN(p)) {\n            return getPort(p);\n        }\n        throw new ArgumentException_1.ArgumentException(\"port\", \"invalid value\");\n    }\n    function getAuthority(uri) {\n        if (!uri.host) {\n            if (uri.userInfo)\n                throw new ArgumentException_1.ArgumentException('host', 'Cannot include user info when there is no host.');\n            if (Types_1.Type.isNumber(uri.port, false))\n                throw new ArgumentException_1.ArgumentException('host', 'Cannot include a port when there is no host.');\n        }\n        var result = uri.host || EMPTY;\n        if (result) {\n            if (uri.userInfo)\n                result = uri.userInfo + AT + result;\n            if (!isNaN(uri.port))\n                result += ':' + uri.port;\n            result = SLASH2 + result;\n        }\n        return result;\n    }\n    function formatQuery(query) {\n        return query && ((query.indexOf(QM) !== 0 ? QM : EMPTY) + query);\n    }\n    function formatFragment(fragment) {\n        return fragment && ((fragment.indexOf(HASH) !== 0 ? HASH : EMPTY) + fragment);\n    }\n    function getPathAndQuery(uri) {\n        var path = uri.path, query = uri.query;\n        return EMPTY\n            + (path || EMPTY)\n            + (formatQuery(query) || EMPTY);\n    }\n    function uriToString(uri) {\n        var scheme = getScheme(uri.scheme), authority = getAuthority(uri), pathAndQuery = getPathAndQuery(uri), fragment = formatFragment(uri.fragment);\n        var part1 = EMPTY\n            + ((scheme && (scheme + ':')) || EMPTY)\n            + (authority || EMPTY);\n        var part2 = EMPTY\n            + (pathAndQuery || EMPTY)\n            + (fragment || EMPTY);\n        if (part1 && part2 && scheme && !authority)\n            throw new ArgumentException_1.ArgumentException('authority', \"Cannot format schemed Uri with missing authority.\");\n        if (part1 && pathAndQuery && pathAndQuery.indexOf(SLASH) !== 0)\n            part2 = SLASH + part2;\n        return part1 + part2;\n    }\n    function tryParse(url, out) {\n        if (!url)\n            return new ArgumentException_1.ArgumentException('url', 'Nothing to parse.');\n        var i, result = {};\n        i = url.indexOf(HASH);\n        if (i != -1) {\n            result.fragment = url.substring(i + 1) || VOID0;\n            url = url.substring(0, i);\n        }\n        i = url.indexOf(QM);\n        if (i != -1) {\n            result.query = url.substring(i + 1) || VOID0;\n            url = url.substring(0, i);\n        }\n        i = url.indexOf(SLASH2);\n        if (i != -1) {\n            var scheme = Utility_1.trim(url.substring(0, i)), c = /:$/;\n            if (!c.test(scheme))\n                return new ArgumentException_1.ArgumentException('url', 'Scheme was improperly formatted');\n            scheme = Utility_1.trim(scheme.replace(c, EMPTY));\n            try {\n                result.scheme = getScheme(scheme) || VOID0;\n            }\n            catch (ex) {\n                return ex;\n            }\n            url = url.substring(i + 2);\n        }\n        i = url.indexOf(SLASH);\n        if (i != -1) {\n            result.path = url.substring(i);\n            url = url.substring(0, i);\n        }\n        i = url.indexOf(AT);\n        if (i != -1) {\n            result.userInfo = url.substring(0, i) || VOID0;\n            url = url.substring(i + 1);\n        }\n        i = url.indexOf(':');\n        if (i != -1) {\n            var port = parseInt(Utility_1.trim(url.substring(i + 1)));\n            if (isNaN(port))\n                return new ArgumentException_1.ArgumentException('url', 'Port was invalid.');\n            result.port = port;\n            url = url.substring(0, i);\n        }\n        url = Utility_1.trim(url);\n        if (url)\n            result.host = url;\n        out(copyUri(result));\n        return null;\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Uri;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based on: https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\r\n */\r\n\r\n\r\nimport {Type} from \"../Types\";\r\nimport * as QueryParams from \"./QueryParams\";\r\nimport * as QueryParam from \"./QueryParam\";\r\nimport * as UriComponent from \"./UriComponent\";\r\nimport * as Scheme from \"./Scheme\";\r\nimport {SchemeValue} from \"./SchemeValue\";\r\nimport {trim} from \"../Text/Utility\";\r\nimport {Exception} from \"../Exception\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {ArgumentOutOfRangeException} from \"../Exceptions/ArgumentOutOfRangeException\";\r\nimport {IUri} from \"./IUri\";\r\nimport {IMap} from \"../Collections/Dictionaries/IDictionary\";\r\nimport {Primitive} from \"../Primitive\";\r\nimport {StringKeyValuePair} from \"../KeyValuePair\";\r\nimport {IEquatable} from \"../IEquatable\";\r\n\r\nconst VOID0:any = void(0);\r\n\r\n/**\r\n * Provides an read-only model representation of a uniform resource identifier (URI) and easy access to the parts of the URI.\r\n *\r\n * The read-only model (frozen) is easier for debugging than exposing accessors for each property.\r\n * ICloneable&lt;Uri&gt; is not used to prevent unnecessary copying of values that won't change.\r\n */\r\nexport class Uri implements IUri, IEquatable<IUri>\r\n{\r\n\r\n\tscheme:SchemeValue;\r\n\tuserInfo:string;\r\n\thost:string;\r\n\tport:number;\r\n\tpath:string;\r\n\tquery:string;\r\n\tfragment:string;\r\n\r\n\tqueryParams:IMap<Primitive|Primitive[]>;\r\n\r\n\t/**\r\n\t * @param scheme The user name, password, or other user-specific information associated with the specified URI.\r\n\t * @param userInfo The host component of this instance.\r\n\t * @param host The port number of this URI.\r\n\t * @param port The absolute path of the URI.\r\n\t * @param path The absolute path of the URI.\r\n\t * @param query Any query information included in the specified URI.\r\n\t * @param fragment The escaped URI fragment.\r\n\t */\r\n\tconstructor(\r\n\t\tscheme:SchemeValue,\r\n\t\tuserInfo:string,\r\n\t\thost:string,\r\n\t\tport:number,\r\n\t\tpath:string,\r\n\t\tquery?:QueryParam.Convertible,\r\n\t\tfragment?:string)\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.scheme = getScheme(scheme) || null;\r\n\t\t_.userInfo = userInfo || null;\r\n\t\t_.host = host || null;\r\n\r\n\t\t_.port = getPort(port);\r\n\r\n\t\t_.authority = _.getAuthority() || null;\r\n\r\n\t\t_.path = path || null;\r\n\r\n\r\n\t\tif(!Type.isString(query))\r\n\t\t\tquery = QueryParams.encode(<UriComponent.Map|StringKeyValuePair<Primitive>[]>query);\r\n\r\n\t\t_.query = formatQuery(<string>query) || null;\r\n\t\tObject.freeze(_.queryParams\r\n\t\t\t= _.query\r\n\t\t\t? QueryParams.parseToMap(_.query)\r\n\t\t\t: {});\r\n\r\n\t\t_.pathAndQuery = _.getPathAndQuery() || null;\r\n\r\n\t\t_.fragment = formatFragment(fragment) || null;\r\n\r\n\t\t// This should validate the uri...\r\n\t\t_.absoluteUri = _.getAbsoluteUri();\r\n\r\n\t\t_.baseUri = _.absoluteUri.replace(/[?#].*/, '');\r\n\r\n\t\t// Intended to be read-only.  Call .toMap() to get a writable copy.\r\n\t\tObject.freeze(_);\r\n\t}\r\n\r\n\t/**\r\n\t *  Compares the values of another IUri via toString comparison.\r\n\t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:IUri):boolean\r\n\t{\r\n\t\treturn this===other || this.absoluteUri==Uri.toString(other);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Parses or clones values from existing Uri values.\r\n\t * @param uri\r\n\t * @param defaults\r\n\t * @returns {Uri}\r\n\t */\r\n\tstatic from(uri:string|IUri, defaults?:IUri):Uri\r\n\t{\r\n\t\tvar u = (!uri || Type.isString(uri))\r\n\t\t\t? Uri.parse(<string>uri) : <IUri>uri;\r\n\r\n\t\treturn new Uri(\r\n\t\t\tu.scheme || defaults && defaults.scheme,\r\n\t\t\tu.userInfo || defaults && defaults.userInfo,\r\n\t\t\tu.host || defaults && defaults.host,\r\n\t\t\tisNaN(u.port) ? defaults && defaults.port : u.port,\r\n\t\t\tu.path || defaults && defaults.path,\r\n\t\t\tu.query || defaults && defaults.query,\r\n\t\t\tu.fragment || defaults && defaults.fragment\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a URL into it's components.\r\n\t * @param url The url to parse.\r\n\t * @param throwIfInvalid Defaults to true.\r\n\t * @returns {IUri} Returns a map of the values or *null* if invalid and *throwIfInvalid* is <b>false</b>.\r\n\t */\r\n\tstatic parse(url:string, throwIfInvalid:boolean = true):IUri\r\n\t{\r\n\t\tvar result:IUri = null;\r\n\t\tvar ex = tryParse(url, (out)=> {result = out;});\r\n\t\tif(throwIfInvalid && ex) throw ex;\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a URL into it's components.\r\n\t * @param url The url to parse.\r\n\t * @param out A delegate to capture the value.\r\n\t * @returns {boolean} True if valid.  False if invalid.\r\n\t */\r\n\tstatic tryParse(url:string, out:(result:IUri)=>void):boolean\r\n\t{\r\n\t\treturn !tryParse(url, out); // return type is Exception.\r\n\t}\r\n\r\n\tstatic copyOf(map:IUri):IUri\r\n\t{\r\n\t\treturn copyUri(map);\r\n\t}\r\n\r\n\tcopyTo(map:IUri):IUri\r\n\t{\r\n\t\treturn copyUri(this, map);\r\n\t}\r\n\r\n\tupdateQuery(query:QueryParam.Convertible):Uri\r\n\t{\r\n\t\tvar map = this.toMap();\r\n\t\tmap.query = <any>query;\r\n\t\treturn Uri.from(map);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Is provided for sub classes to override this value.\r\n\t */\r\n\tprotected getAbsoluteUri():string\r\n\t{\r\n\t\treturn uriToString(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Is provided for sub classes to override this value.\r\n\t */\r\n\tprotected getAuthority():string\r\n\t{\r\n\t\treturn getAuthority(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Is provided for sub classes to override this value.\r\n\t */\r\n\tprotected getPathAndQuery():string\r\n\t{\r\n\t\treturn getPathAndQuery(this);\r\n\t}\r\n\r\n\t/**\r\n\t * The absolute URI.\r\n\t */\r\n\tabsoluteUri:string;\r\n\r\n\t/**\r\n\t * Gets the Domain Name System (DNS) host name or IP address and the port number for a server.\r\n\t */\r\n\tauthority:string;\r\n\r\n\t/**\r\n\t * Gets the path and Query properties separated by a question mark (?).\r\n\t */\r\n\tpathAndQuery:string;\r\n\r\n\t/**\r\n\t * Gets the full path without the query or fragment.\r\n\t */\r\n\tbaseUri:string;\r\n\r\n\t/**\r\n\t * The segments that represent a path.<br/>\r\n\t * https://msdn.microsoft.com/en-us/library/system.uri.segments%28v=vs.110%29.aspx\r\n\t *\r\n\t * <h5><b>Example:</b></h5>\r\n\t * If the path value equals: ```/tree/node/index.html```<br/>\r\n\t * The result will be: ```['/','tree/','node/','index.html']```\r\n\t * @returns {string[]}\r\n\t */\r\n\tget pathSegments():string[]\r\n\t{\r\n\t\treturn this.path.match(/^[/]|[^/]*[/]|[^/]+$/g);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a writable copy.\r\n\t * @returns {IUri}\r\n\t */\r\n\ttoMap():IUri\r\n\t{\r\n\t\treturn this.copyTo({});\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {string} The full absolute uri.\r\n\t */\r\n\ttoString():string\r\n\t{\r\n\t\treturn this.absoluteUri;\r\n\t}\r\n\r\n\t/**\r\n\t * Properly converts an existing URI to a string.\r\n\t * @param uri\r\n\t * @returns {string}\r\n\t */\r\n\tstatic toString(uri:IUri):string\r\n\t{\r\n\t\treturn uri instanceof Uri\r\n\t\t\t? (<Uri>uri).absoluteUri\r\n\t\t\t: uriToString(uri);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the authority segment of an URI.\r\n\t * @param uri\r\n\t * @returns {string}\r\n\t */\r\n\tstatic getAuthority(uri:IUri):string\r\n\t{\r\n\t\treturn getAuthority(uri);\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport enum Fields {\r\n\tscheme,\r\n\tuserInfo,\r\n\thost,\r\n\tport,\r\n\tpath,\r\n\tquery,\r\n\tfragment\r\n}\r\nObject.freeze(Fields);\r\n\r\nfunction copyUri(from:IUri, to?:IUri)\r\n{\r\n\tvar i = 0, field:string;\r\n\tif(!to) to = {};\r\n\twhile(field = Fields[i++])\r\n\t{\r\n\t\tvar value = (<any>from)[field];\r\n\t\tif(value) (<any>to)[field] = value;\r\n\t}\r\n\treturn to;\r\n}\r\n\r\nconst SLASH = '/', SLASH2 = '//', QM = QueryParams.Separator.Query, HASH = '#', EMPTY = '', AT = '@';\r\n\r\nfunction getScheme(scheme:string):SchemeValue\r\n{\r\n\tvar s:any = scheme;\r\n\tif(Type.isString(s))\r\n\t{\r\n\t\tif(!s) return null;\r\n\t\ts = trim(s).toLowerCase().replace(/[^a-z0-9+.-]+$/g, EMPTY);\r\n\t\tif(!s) return null;\r\n\t\tif(Scheme.isValid(s)) return s;\r\n\t} else {\r\n\t\tif(s===null || s===undefined) return s;\r\n\t}\r\n\tthrow new ArgumentOutOfRangeException('scheme', scheme, 'Invalid scheme.');\r\n}\r\n\r\nfunction getPort(port:number|string):number\r\n{\r\n\tif(port===0) return <number>port;\r\n\tif(!port) return null;\r\n\tvar p:number;\r\n\r\n\tif(Type.isNumber(port, true))\r\n\t{\r\n\t\tp = <number>port;\r\n\t\tif(p>=0 && isFinite(p))\r\n\t\t\treturn p;\r\n\t}\r\n\telse if(Type.isString(port) && (p = parseInt(<string>port)) && !isNaN(p))\r\n\t{\r\n\t\treturn getPort(p);\r\n\t}\r\n\r\n\tthrow new ArgumentException(\"port\", \"invalid value\");\r\n}\r\n\r\nfunction getAuthority(uri:IUri):string\r\n{\r\n\r\n\tif(!uri.host)\r\n\t{\r\n\t\tif(uri.userInfo)\r\n\t\t\tthrow new ArgumentException('host', 'Cannot include user info when there is no host.');\r\n\r\n\t\tif(Type.isNumber(uri.port, false))\r\n\t\t\tthrow new ArgumentException('host', 'Cannot include a port when there is no host.');\r\n\t}\r\n\r\n\t/*\r\n\t * [//[user:password@]host[:port]]\r\n\t */\r\n\r\n\tvar result = uri.host || EMPTY;\r\n\r\n\tif(result)\r\n\t{\r\n\t\tif(uri.userInfo) result = uri.userInfo + AT + result;\r\n\t\tif(!isNaN(uri.port)) result += ':' + uri.port;\r\n\t\tresult = SLASH2 + result;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nfunction formatQuery(query:string):string\r\n{\r\n\treturn query && ((query.indexOf(QM)!==0 ? QM : EMPTY) + query);\r\n}\r\n\r\nfunction formatFragment(fragment:string):string\r\n{\r\n\treturn fragment && ((fragment.indexOf(HASH)!==0 ? HASH : EMPTY) + fragment);\r\n}\r\n\r\nfunction getPathAndQuery(uri:IUri):string\r\n{\r\n\r\n\tvar path  = uri.path,\r\n\t    query = uri.query;\r\n\r\n\treturn EMPTY\r\n\t\t+ (path || EMPTY)\r\n\t\t+ (formatQuery(query) || EMPTY);\r\n\r\n}\r\n\r\nfunction uriToString(uri:IUri):string\r\n{\r\n\t// scheme:[//[user:password@]domain[:port]][/]path[?query][#fragment]\r\n\t// {scheme}{authority}{path}{query}{fragment}\r\n\r\n\tvar scheme       = getScheme(uri.scheme),\r\n\t    authority    = getAuthority(uri),\r\n\t    pathAndQuery = getPathAndQuery(uri),\r\n\t    fragment     = formatFragment(uri.fragment);\r\n\r\n\tvar part1 = EMPTY\r\n\t\t+ ((scheme && (scheme + ':')) || EMPTY)\r\n\t\t+ (authority || EMPTY);\r\n\r\n\tvar part2 = EMPTY\r\n\t\t+ (pathAndQuery || EMPTY)\r\n\t\t+ (fragment || EMPTY);\r\n\r\n\tif(part1 && part2 && scheme && !authority)\r\n\t\tthrow new ArgumentException('authority', \"Cannot format schemed Uri with missing authority.\");\r\n\r\n\tif(part1 && pathAndQuery && pathAndQuery.indexOf(SLASH)!==0)\r\n\t\tpart2 = SLASH + part2;\r\n\r\n\treturn part1 + part2;\r\n\r\n}\r\n\r\n\r\nfunction tryParse(url:string, out:(result:IUri)=>void):Exception\r\n{\r\n\tif(!url)\r\n\t\treturn new ArgumentException('url', 'Nothing to parse.');\r\n\r\n\r\n\t// Could use a regex here, but well follow some rules instead.\r\n\t// The intention is to 'gather' the pieces.  This isn't validation (yet).\r\n\r\n\t// scheme:[//[user:password@]domain[:port]][/]path[?query][#fragment]\r\n\tvar i:number, result:IUri = {};\r\n\r\n\t// Anything after the first # is the fragment.\r\n\ti = url.indexOf(HASH);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.fragment = url.substring(i + 1) || VOID0;\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\t// Anything after the first ? is the query.\r\n\ti = url.indexOf(QM);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.query = url.substring(i + 1) || VOID0;\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\t// Guarantees a separation.\r\n\ti = url.indexOf(SLASH2);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tvar scheme = trim(url.substring(0, i)), c = /:$/;\r\n\t\tif(!c.test(scheme))\r\n\t\t\treturn new ArgumentException('url', 'Scheme was improperly formatted');\r\n\r\n\t\tscheme = trim(scheme.replace(c, EMPTY));\r\n\t\ttry\r\n\t\t{\r\n\t\t\tresult.scheme = getScheme(scheme) || VOID0;\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn ex;\r\n\t\t}\r\n\r\n\t\turl = url.substring(i + 2);\r\n\t}\r\n\r\n\t// Find any path information.\r\n\ti = url.indexOf(SLASH);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.path = url.substring(i);\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\t// Separate user info.\r\n\ti = url.indexOf(AT);\r\n\tif(i!= -1)\r\n\t{\r\n\t\tresult.userInfo = url.substring(0, i) || VOID0;\r\n\t\turl = url.substring(i + 1);\r\n\t}\r\n\r\n\t// Remaining is host and port.\r\n\ti = url.indexOf(':');\r\n\tif(i!= -1)\r\n\t{\r\n\t\tvar port = parseInt(trim(url.substring(i + 1)));\r\n\t\tif(isNaN(port))\r\n\t\t\treturn new ArgumentException('url', 'Port was invalid.');\r\n\r\n\t\tresult.port = port;\r\n\t\turl = url.substring(0, i);\r\n\t}\r\n\r\n\turl = trim(url);\r\n\tif(url)\r\n\t\tresult.host = url;\r\n\r\n\tout(copyUri(result));\r\n\r\n\t// null is good! (here)\r\n\treturn null;\r\n\r\n}\r\n\r\nexport default Uri;"]}