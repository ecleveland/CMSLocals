{"version":3,"sources":["System/Collections/LinkedList.js","System/Collections/LinkedList.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","ensureExternal","node","list","ArgumentNullException_1","ArgumentNullException","external","LinkedListNode","getInternal","InvalidOperationException_1","InvalidOperationException","n","_nodeInternal","Compare_1","LinkedNodeList_1","CollectionBase_1","InternalNode","value","previous","next","assertDetached","LinkedList","_super","source","equalityComparer","areEqual","call","_","_listInternal","LinkedNodeList","_importEntries","getCount","unsafeCount","_addInternal","entry","addNode","_removeInternal","max","Infinity","equals","_equalityComparer","removedCount","forEach","removeNode","_clearInternal","clear","action","useCopy","i","getEnumerator","valueEnumeratorFrom","_findFirst","first","_findLast","prev","last","removeOnce","remove","defineProperty","get","enumerable","configurable","getValueAt","index","getNodeAt","find","findLast","addFirst","addNodeBefore","_signalModification","addLast","add","removeFirst","removeLast","addBefore","before","addAfter","after","addNodeAfter","CollectionBase","_list","set"],"mappings":"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","file":"System/Collections/LinkedList.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based Upon: http://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../Compare\", \"./LinkedNodeList\", \"../Exceptions/InvalidOperationException\", \"../Exceptions/ArgumentNullException\", \"./CollectionBase\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Compare_1 = require(\"../Compare\");\n    var LinkedNodeList_1 = require(\"./LinkedNodeList\");\n    var InvalidOperationException_1 = require(\"../Exceptions/InvalidOperationException\");\n    var ArgumentNullException_1 = require(\"../Exceptions/ArgumentNullException\");\n    var CollectionBase_1 = require(\"./CollectionBase\");\n    var InternalNode = (function () {\n        function InternalNode(value, previous, next) {\n            this.value = value;\n            this.previous = previous;\n            this.next = next;\n        }\n        InternalNode.prototype.assertDetached = function () {\n            if (this.next || this.previous)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Adding a node that is already placed.\");\n        };\n        return InternalNode;\n    }());\n    function ensureExternal(node, list) {\n        if (!node)\n            return null;\n        if (!list)\n            throw new ArgumentNullException_1.ArgumentNullException(\"list\");\n        var external = node.external;\n        if (!external)\n            node.external = external = new LinkedListNode(list, node);\n        return external;\n    }\n    function getInternal(node, list) {\n        if (!node)\n            throw new ArgumentNullException_1.ArgumentNullException(\"node\");\n        if (!list)\n            throw new ArgumentNullException_1.ArgumentNullException(\"list\");\n        if (node.list != list)\n            throw new InvalidOperationException_1.InvalidOperationException(\"Provided node does not belong to this list.\");\n        var n = node._nodeInternal;\n        if (!n)\n            throw new InvalidOperationException_1.InvalidOperationException(\"Provided node is not valid.\");\n        return n;\n    }\n    var LinkedList = (function (_super) {\n        __extends(LinkedList, _super);\n        function LinkedList(source, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n            _super.call(this, null, equalityComparer);\n            var _ = this;\n            _._listInternal = new LinkedNodeList_1.LinkedNodeList();\n            _._importEntries(source);\n        }\n        LinkedList.prototype.getCount = function () {\n            return this._listInternal.unsafeCount;\n        };\n        LinkedList.prototype._addInternal = function (entry) {\n            this._listInternal.addNode(new InternalNode(entry));\n            return true;\n        };\n        LinkedList.prototype._removeInternal = function (entry, max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this, equals = _._equalityComparer, list = _._listInternal, removedCount = 0;\n            list.forEach(function (node) {\n                if (equals(entry, node.value) && list.removeNode(node))\n                    removedCount++;\n                return removedCount < max;\n            });\n            return removedCount;\n        };\n        LinkedList.prototype._clearInternal = function () {\n            return this._listInternal.clear();\n        };\n        LinkedList.prototype.forEach = function (action, useCopy) {\n            if (useCopy === void 0) { useCopy = false; }\n            return useCopy\n                ? _super.prototype.forEach.call(this, action, useCopy)\n                : this._listInternal.forEach(function (node, i) { return action(node.value, i); });\n        };\n        LinkedList.prototype.getEnumerator = function () {\n            return LinkedNodeList_1.LinkedNodeList.valueEnumeratorFrom(this._listInternal);\n        };\n        LinkedList.prototype._findFirst = function (entry) {\n            var _ = this, equals = _._equalityComparer, next = _._listInternal.first;\n            while (next) {\n                if (equals(entry, next.value))\n                    return next;\n                next = next.next;\n            }\n            return null;\n        };\n        LinkedList.prototype._findLast = function (entry) {\n            var _ = this, equals = _._equalityComparer, prev = _._listInternal.last;\n            while (prev) {\n                if (equals(entry, prev.value))\n                    return prev;\n                prev = prev.previous;\n            }\n            return null;\n        };\n        LinkedList.prototype.removeOnce = function (entry) {\n            return this.remove(entry, 1) !== 0;\n        };\n        Object.defineProperty(LinkedList.prototype, \"first\", {\n            get: function () {\n                return ensureExternal(this._listInternal.first, this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedList.prototype, \"last\", {\n            get: function () {\n                return ensureExternal(this._listInternal.last, this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        LinkedList.prototype.getValueAt = function (index) {\n            var node = this._listInternal.getNodeAt(index);\n            if (!node)\n                return node && node.value || void (0);\n        };\n        LinkedList.prototype.getNodeAt = function (index) {\n            return ensureExternal(this._listInternal.getNodeAt(index), this);\n        };\n        LinkedList.prototype.find = function (entry) {\n            return ensureExternal(this._findFirst(entry), this);\n        };\n        LinkedList.prototype.findLast = function (entry) {\n            return ensureExternal(this._findLast(entry), this);\n        };\n        LinkedList.prototype.addFirst = function (entry) {\n            this._listInternal.addNodeBefore(new InternalNode(entry));\n            this._signalModification(true);\n        };\n        LinkedList.prototype.addLast = function (entry) {\n            this.add(entry);\n        };\n        LinkedList.prototype.removeFirst = function () {\n            var _ = this, first = _._listInternal.first;\n            if (first && _._listInternal.removeNode(first))\n                _._signalModification(true);\n        };\n        LinkedList.prototype.removeLast = function () {\n            var _ = this, last = _._listInternal.last;\n            if (last && _._listInternal.removeNode(last))\n                _._signalModification(true);\n        };\n        LinkedList.prototype.removeNode = function (node) {\n            var _ = this;\n            if (_._listInternal.removeNode(getInternal(node, _))) {\n                _._signalModification(true);\n                return true;\n            }\n            return false;\n        };\n        LinkedList.prototype.addBefore = function (before, entry) {\n            var _ = this;\n            _._listInternal.addNodeBefore(new InternalNode(entry), getInternal(before, _));\n            _._signalModification(true);\n        };\n        LinkedList.prototype.addAfter = function (after, entry) {\n            var _ = this;\n            _._listInternal.addNodeAfter(new InternalNode(entry), getInternal(after, _));\n            _._signalModification(true);\n        };\n        LinkedList.prototype.addNodeBefore = function (node, before) {\n            var _ = this;\n            _._listInternal.addNodeBefore(getInternal(before, _), getInternal(node, _));\n            _._signalModification(true);\n        };\n        LinkedList.prototype.addNodeAfter = function (node, after) {\n            var _ = this;\n            this._listInternal.addNodeAfter(getInternal(after, _), getInternal(node, _));\n            _._signalModification(true);\n        };\n        return LinkedList;\n    }(CollectionBase_1.CollectionBase));\n    exports.LinkedList = LinkedList;\n    var LinkedListNode = (function () {\n        function LinkedListNode(_list, _nodeInternal) {\n            this._list = _list;\n            this._nodeInternal = _nodeInternal;\n        }\n        Object.defineProperty(LinkedListNode.prototype, \"list\", {\n            get: function () {\n                return this._list;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"previous\", {\n            get: function () {\n                return ensureExternal(this._nodeInternal.previous, this._list);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"next\", {\n            get: function () {\n                return ensureExternal(this._nodeInternal.next, this._list);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"value\", {\n            get: function () {\n                return this._nodeInternal.value;\n            },\n            set: function (v) {\n                this._nodeInternal.value = v;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        LinkedListNode.prototype.addBefore = function (entry) {\n            this._list.addBefore(this, entry);\n        };\n        LinkedListNode.prototype.addAfter = function (entry) {\n            this._list.addAfter(this, entry);\n        };\n        LinkedListNode.prototype.addNodeBefore = function (before) {\n            this._list.addNodeBefore(this, before);\n        };\n        LinkedListNode.prototype.addNodeAfter = function (after) {\n            this._list.addNodeAfter(this, after);\n        };\n        LinkedListNode.prototype.remove = function () {\n            this._list.removeNode(this);\n        };\n        return LinkedListNode;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = LinkedList;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport {LinkedNodeList} from \"./LinkedNodeList\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {ILinkedListNode, ILinkedNode, INodeWithValue} from \"./ILinkedListNode\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {Predicate, Action, EqualityComparison} from \"../FunctionTypes\";\r\nimport {ILinkedList} from \"./ILinkedList\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/simulating-a-queue\r\n *\r\n * Adding to an array is very fast, but modifying is slow.\r\n * LinkedList wins when modifying contents.\r\n * http://stackoverflow.com/questions/166884/array-versus-linked-list\r\n *****************************/\r\n\r\n/*\r\n * An internal node is used to manage the order without exposing underlying link chain to the consumer.\r\n */\r\nclass InternalNode<T>\r\nimplements ILinkedNode<InternalNode<T>>, INodeWithValue<T>\r\n{\r\n\tconstructor(\r\n\t\tpublic value?:T,\r\n\t\tpublic previous?:InternalNode<T>,\r\n\t\tpublic next?:InternalNode<T>)\r\n\t{\r\n\t}\r\n\r\n\texternal:ILinkedListNode<T>;\r\n\r\n\tassertDetached():void\r\n\t{\r\n\t\tif(this.next || this.previous)\r\n\t\t\tthrow new InvalidOperationException(\r\n\t\t\t\t\"Adding a node that is already placed.\");\r\n\t}\r\n\r\n}\r\n\r\nfunction ensureExternal<T>(node:InternalNode<T>, list:LinkedList<T>):ILinkedListNode<T>\r\n{\r\n\tif(!node)\r\n\t\treturn null;\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tvar external:ILinkedListNode<T> = node.external;\r\n\tif(!external)\r\n\t\tnode.external = external = new LinkedListNode<T>(list, node);\r\n\r\n\treturn external;\r\n}\r\n\r\nfunction getInternal<T>(node:ILinkedListNode<T>, list:LinkedList<T>):InternalNode<T>\r\n{\r\n\tif(!node)\r\n\t\tthrow new ArgumentNullException(\"node\");\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tif(node.list!=list)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node does not belong to this list.\");\r\n\r\n\tvar n:InternalNode<T> = (<any>node)._nodeInternal;\r\n\tif(!n)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node is not valid.\");\r\n\r\n\treturn n;\r\n}\r\n\r\nexport class LinkedList<T>\r\nextends CollectionBase<T> implements ILinkedList<T>\r\n{\r\n\tprivate _listInternal:LinkedNodeList<InternalNode<T>>;\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(null, equalityComparer);\r\n\t\tvar _ = this;\r\n\t\t_._listInternal = new LinkedNodeList<InternalNode<T>>();\r\n\t\t_._importEntries(source);\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._listInternal.unsafeCount;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\tthis._listInternal.addNode(new InternalNode(entry));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\tvar _            = this,\r\n\t\t    equals       = _._equalityComparer,\r\n\t\t    list         = _._listInternal,\r\n\t\t    removedCount = 0;\r\n\r\n\t\tlist.forEach(node=>\r\n\t\t{\r\n\t\t\tif(equals(entry, node.value) && list.removeNode(node))\r\n\t\t\t\tremovedCount++;\r\n\r\n\t\t\treturn removedCount<max;\r\n\t\t});\r\n\r\n\t\treturn removedCount;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\treturn this._listInternal.clear();\r\n\t}\r\n\r\n\r\n\tforEach(\r\n\t\taction:Predicate<T> | Action<T>,\r\n\t\tuseCopy:boolean = false):number\r\n\t{\r\n\t\treturn useCopy\r\n\t\t\t? super.forEach(action, useCopy)\r\n\t\t\t: this._listInternal.forEach((node, i)=>action(node.value, i));\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IEnumerable<T>\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\treturn LinkedNodeList.valueEnumeratorFrom<T>(<any>this._listInternal);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tprivate _findFirst(entry:T):InternalNode<T>\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tvar _      = this,\r\n\t\t    equals = _._equalityComparer,\r\n\t\t    next   = _._listInternal.first;\r\n\t\twhile(next)\r\n\t\t{\r\n\t\t\tif(equals(entry, next.value))\r\n\t\t\t\treturn next;\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate _findLast(entry:T):InternalNode<T>\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tvar _      = this,\r\n\t\t    equals = _._equalityComparer,\r\n\t\t    prev   = _._listInternal.last;\r\n\t\twhile(prev)\r\n\t\t{\r\n\t\t\tif(equals(entry, prev.value))\r\n\t\t\t\treturn prev;\r\n\t\t\tprev = prev.previous;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tremoveOnce(entry:T):boolean\r\n\t{\r\n\t\treturn this.remove(entry, 1)!==0;\r\n\t}\r\n\r\n\tget first():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._listInternal.first, this);\r\n\t}\r\n\r\n\tget last():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._listInternal.last, this);\r\n\t}\r\n\r\n\t// get methods are available for convenience but is an n*index operation.\r\n\r\n\r\n\tgetValueAt(index:number):T\r\n\t{\r\n\t\tvar node = this._listInternal.getNodeAt(index);\r\n\t\tif(!node)\r\n\t\t\treturn node && node.value || void(0);\r\n\t}\r\n\r\n\tgetNodeAt(index:number):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._listInternal.getNodeAt(index), this);\r\n\t}\r\n\r\n\tfind(entry:T):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._findFirst(entry), this);\r\n\t}\r\n\r\n\tfindLast(entry:T):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._findLast(entry), this);\r\n\t}\r\n\r\n\taddFirst(entry:T):void\r\n\t{\r\n\t\tthis._listInternal.addNodeBefore(new InternalNode(entry));\r\n\t\tthis._signalModification(true);\r\n\t}\r\n\r\n\taddLast(entry:T):void\r\n\t{\r\n\t\tthis.add(entry);\r\n\t}\r\n\r\n\tremoveFirst():void\r\n\t{\r\n\t\tvar _ = this, first = _._listInternal.first;\r\n\t\tif(first && _._listInternal.removeNode(first))\r\n\t\t\t_._signalModification(true);\r\n\t}\r\n\r\n\tremoveLast():void\r\n\t{\r\n\t\tvar _ = this, last = _._listInternal.last;\r\n\t\tif(last && _._listInternal.removeNode(last))\r\n\t\t\t_._signalModification(true);\r\n\t}\r\n\r\n\t// Returns true if successful and false if not found (already removed).\r\n\tremoveNode(node:ILinkedListNode<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(_._listInternal.removeNode(getInternal(node, _)))\r\n\t\t{\r\n\t\t\t_._signalModification(true);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\taddBefore(before:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._listInternal.addNodeBefore(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(before, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddAfter(after:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._listInternal.addNodeAfter(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(after, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddNodeBefore(node:ILinkedListNode<T>, before:ILinkedListNode<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._listInternal.addNodeBefore(\r\n\t\t\tgetInternal(before, _),\r\n\t\t\tgetInternal(node, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddNodeAfter(node:ILinkedListNode<T>, after:ILinkedListNode<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tthis._listInternal.addNodeAfter(\r\n\t\t\tgetInternal(after, _),\r\n\t\t\tgetInternal(node, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\r\n}\r\n\r\n// Use an internal node class to prevent mucking up the LinkedList.\r\nclass LinkedListNode<T> implements ILinkedListNode<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate _list:LinkedList<T>,\r\n\t\tprivate _nodeInternal:InternalNode<T>)\r\n\t{\r\n\t}\r\n\r\n\tget list():LinkedList<T>\r\n\t{\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\tget previous():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._nodeInternal.previous, this._list);\r\n\t}\r\n\r\n\tget next():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._nodeInternal.next, this._list);\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this._nodeInternal.value;\r\n\t}\r\n\r\n\tset value(v:T)\r\n\t{\r\n\t\tthis._nodeInternal.value = v;\r\n\t}\r\n\r\n\taddBefore(entry:T):void\r\n\t{\r\n\t\tthis._list.addBefore(this, entry);\r\n\t}\r\n\r\n\taddAfter(entry:T):void\r\n\t{\r\n\t\tthis._list.addAfter(this, entry);\r\n\t}\r\n\r\n\taddNodeBefore(before:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._list.addNodeBefore(this, before);\r\n\t}\r\n\r\n\taddNodeAfter(after:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._list.addNodeAfter(this, after);\r\n\t}\r\n\r\n\tremove():void\r\n\t{\r\n\t\tthis._list.removeNode(this);\r\n\t}\r\n\r\n}\r\n\r\nexport default LinkedList;\r\n"]}