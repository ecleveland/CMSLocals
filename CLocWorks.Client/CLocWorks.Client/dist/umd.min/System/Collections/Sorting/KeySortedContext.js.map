{"version":3,"sources":["System/Collections/Sorting/KeySortedContext.js","System/Collections/Sorting/KeySortedContext.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","Values","SortContext_1","Functions_1","KeySortedContext","_super","next","_keySelector","order","comparer","compare","call","a","_","ks","Functions","Identity","_next","_order","SortContext","defineProperty","value"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,MAEnF,SAAWO,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,gBAAiB,gBAAiB,mBAAoBN,IAEzF,SAAUI,EAASF,GAClB,YCZJ,IAAYM,GAAMJ,EAAM,iBACxBK,EAAAL,EAA0B,iBAC1BM,EAAAN,EAAwB,mBAMxBO,EAAA,SAAAC,GAEC,QAAAD,GACCE,EACUC,EACVC,EACAC,GADA,SAAAD,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAyBR,EAAOS,SAEhCL,EAAAM,KAAA5B,KAAMuB,EAAMG,EAAUD,GAJZzB,KAAAwB,aAAAA,EAgBZ,MApBkEzB,WAAAsB,EAAAC,GAWjED,EAAAd,UAAAoB,QAAA,SAAQE,EAAK3B,GAEZ,GAAI4B,GAAI9B,KAAM+B,EAAKD,EAAEN,YACrB,KAAIO,GAAMA,GAAIX,EAAAY,UAAUC,SAAU,MAAOX,GAAAf,UAAMoB,QAAOC,KAAA5B,KAAC6B,EAAG3B,EAE1D,IAAID,GAAIiB,EAAOS,QAAaI,EAAGF,GAASE,EAAG7B,GAC3C,OAAM,IAAHD,GAAQ6B,EAAEI,MAAcJ,EAAEI,MAAMP,QAAQE,EAAG3B,GACvC4B,EAAEK,OAAOlC,GAElBoB,GApBkEF,EAAAiB,YAArDxB,GAAAS,iBAAgBA,EAsB7Bb,OAAA6B,eAAAzB,EAAA,cAAA0B,OAAA,IDOI1B,EAAAA,WCPWS","file":"System/Collections/Sorting/KeySortedContext.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../../Compare\", \"./SortContext\", \"../../Functions\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Values = require(\"../../Compare\");\n    var SortContext_1 = require(\"./SortContext\");\n    var Functions_1 = require(\"../../Functions\");\n    var KeySortedContext = (function (_super) {\n        __extends(KeySortedContext, _super);\n        function KeySortedContext(next, _keySelector, order, comparer) {\n            if (order === void 0) { order = 1; }\n            if (comparer === void 0) { comparer = Values.compare; }\n            _super.call(this, next, comparer, order);\n            this._keySelector = _keySelector;\n        }\n        KeySortedContext.prototype.compare = function (a, b) {\n            var _ = this, ks = _._keySelector;\n            if (!ks || ks == Functions_1.Functions.Identity)\n                return _super.prototype.compare.call(this, a, b);\n            var d = Values.compare(ks(a), ks(b));\n            if (d == 0 && _._next)\n                return _._next.compare(a, b);\n            return _._order * d;\n        };\n        return KeySortedContext;\n    }(SortContext_1.SortContext));\n    exports.KeySortedContext = KeySortedContext;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = KeySortedContext;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport * as Values from \"../../Compare\";\r\nimport {SortContext} from \"./SortContext\";\r\nimport {Functions} from \"../../Functions\";\r\nimport {Comparison, Selector} from \"../../FunctionTypes\";\r\nimport {Comparable} from \"../../IComparable\";\r\nimport {IComparer} from \"../../IComparer\";\r\nimport {Order} from \"./Order\";\r\n\r\nexport class KeySortedContext<T, TKey extends Comparable> extends SortContext<T>\r\n{\r\n\tconstructor(\r\n\t\tnext:IComparer<T>,\r\n\t\tprotected _keySelector:Selector<T,TKey>,\r\n\t\torder:Order = Order.Ascending,\r\n\t\tcomparer:Comparison<T> = Values.compare)\r\n\t{\r\n\t\tsuper(next, comparer, order);\r\n\t}\r\n\r\n\tcompare(a:T, b:T):number\r\n\t{\r\n\t\tvar _ = this, ks = _._keySelector;\r\n\t\tif(!ks || ks==Functions.Identity) return super.compare(a, b);\r\n\t\t// We force <any> here since it can be a Primitive or IComparable<any>\r\n\t\tvar d = Values.compare(<any>ks(a), <any>ks(b));\r\n\t\tif(d==0 && _._next) return _._next.compare(a, b);\r\n\t\treturn _._order*d;\r\n\t}\r\n}\r\n\r\nexport default KeySortedContext;"]}