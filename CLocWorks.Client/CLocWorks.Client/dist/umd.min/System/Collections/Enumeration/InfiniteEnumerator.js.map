{"version":3,"sources":["System/Collections/Enumeration/InfiniteEnumerator.js","System/Collections/Enumeration/InfiniteEnumerator.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","SimpleEnumerableBase_1","VOID0","InfiniteEnumerator","_super","_factory","call","canMoveNext","moveNext","_","f","_current","incrementIndex","dispose","SimpleEnumerableBase","defineProperty","value"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,MAEnF,SAAWO,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,0BAA2BN,IAE9D,SAAUI,EAASF,GAClB,YCXJ,IAAAM,GAAAJ,EAAmC,0BAE7BK,EAAY,OAclBC,EAAA,SAAAC,GAMC,QAAAD,GAAoBE,GAEnBD,EAAAE,KAAAvB,MAFmBA,KAAAsB,SAAAA,EAwBrB,MA9B2CvB,WAAAqB,EAAAC,GAWhCD,EAAAb,UAAAiB,YAAV,WAEC,MAAsB,OAAfxB,KAAKsB,UAGbF,EAAAb,UAAAkB,SAAA,WAEC,GAAIC,GAAI1B,KACJ2B,EAAID,EAAEJ,QAEV,OADGK,KAAGD,EAAEE,SAAWD,EAAED,EAAEE,SAAUF,EAAEG,mBAC5BF,GAAGR,GAGXC,EAAAb,UAAAuB,QAAA,WAECT,EAAAd,UAAMuB,QAAOP,KAAAvB,MACbA,KAAKsB,SAAWH,GAGlBC,GA9B2CF,EAAAa,qBAA9BnB,GAAAQ,mBAAkBA,EAgC/BZ,OAAAwB,eAAApB,EAAA,cAAAqB,OAAA,IDVIrB,EAAAA,WCUWQ","file":"System/Collections/Enumeration/InfiniteEnumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./SimpleEnumerableBase\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var SimpleEnumerableBase_1 = require(\"./SimpleEnumerableBase\");\n    var VOID0 = void 0;\n    var InfiniteEnumerator = (function (_super) {\n        __extends(InfiniteEnumerator, _super);\n        function InfiniteEnumerator(_factory) {\n            _super.call(this);\n            this._factory = _factory;\n        }\n        InfiniteEnumerator.prototype.canMoveNext = function () {\n            return this._factory != null;\n        };\n        InfiniteEnumerator.prototype.moveNext = function () {\n            var _ = this;\n            var f = _._factory;\n            if (f)\n                _._current = f(_._current, _.incrementIndex());\n            return f != VOID0;\n        };\n        InfiniteEnumerator.prototype.dispose = function () {\n            _super.prototype.dispose.call(this);\n            this._factory = VOID0;\n        };\n        return InfiniteEnumerator;\n    }(SimpleEnumerableBase_1.SimpleEnumerableBase));\n    exports.InfiniteEnumerator = InfiniteEnumerator;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = InfiniteEnumerator;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/**\r\n * An aggregate/reduce style factory function that expects a previous value and the current index of the enumeration.\r\n */\r\nexport interface InfiniteValueFactory<T>\r\n{\r\n\t(previous?:T, index?:number):T;\r\n}\r\n\r\n/**\r\n * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\r\n * This is analogous to a 'generator' and has a compatible interface.\r\n */\r\nexport class InfiniteEnumerator<T> extends SimpleEnumerableBase<T>\r\n{\r\n\t/**\r\n\t * See InfiniteValueFactory\r\n\t * @param _factory\r\n\t */\r\n\tconstructor(private _factory:InfiniteValueFactory<T>)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprotected canMoveNext():boolean\r\n\t{\r\n\t\treturn this._factory!=null;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar f = _._factory;\r\n\t\tif(f) _._current = f(_._current, _.incrementIndex());\r\n\t\treturn f!=VOID0;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.dispose();\r\n\t\tthis._factory = VOID0;\r\n\t}\r\n\r\n}\r\n\r\nexport default InfiniteEnumerator;"]}