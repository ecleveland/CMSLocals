{"version":3,"sources":["System/Collections/Enumeration/SimpleEnumerableBase.js","System/Collections/Enumeration/SimpleEnumerableBase.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","IteratorResult_1","VOID0","SimpleEnumerableBase","this","reset","Object","defineProperty","prototype","get","_current","enumerable","configurable","incrementIndex","i","_index","nextValue","moveNext","next","IteratorResult","Done","value","canMoveNext","dispose","getIsEndless"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,oBAAqBN,IAExD,SAAUI,EAASF,GAClB,YCAJ,IAAAM,GAAAJ,EAA6B,oBAGvBK,EAAY,OAElBC,EAAA,WAMC,QAAAA,KAECC,KAAKC,QAiEP,MA9DCC,QAAAC,eAAIJ,EAAAK,UAAA,WDROC,ICQX,WAEC,MAAOL,MAAKM,UDPFC,YAAY,EACZC,cAAc,ICYfT,EAAAK,UAAAK,eAAV,WACC,GAAIC,GAAIV,KAAKW,MAEb,OADAX,MAAKW,OAASD,EAAIA,IAAIZ,EAAQ,EAAKY,EAAE,EAC9BA,GAGRX,EAAAK,UAAAQ,UAAA,WAGC,MADAZ,MAAKa,WACEb,KAAKM,UAGbP,EAAAK,UAAAU,KAAA,WAEC,MAAOd,MAAKa,WACT,GAAIhB,GAAAkB,eAAef,KAAKM,SAASN,KAAKW,QACtCd,EAAAkB,eAAeC,MAKnBjB,EAAAK,UAAA,UAAA,SAASa,GAER,IAEC,MAAOA,KAAQnB,GAASE,KAAKkB,cAC1B,GAAIrB,GAAAkB,eAAeE,EAAMnB,GAAM,GAC/BD,EAAAkB,eAAeC,KDjBT,QCqBThB,KAAKmB,YAIPpB,EAAAK,UAAAH,MAAA,WAECD,KAAKM,SAAWR,EAChBE,KAAKW,OAASb,GAGfC,EAAAK,UAAAe,QAAA,WAECnB,KAAKC,SAGIF,EAAAK,UAAAgB,aAAV,WACC,MAAOpB,MAAKkB,eAGbhB,OAAAC,eAAIJ,EAAAK,UAAA,aDzBOC,ICyBX,WAEC,MAAOL,MAAKoB,gBDxBFb,YAAY,EACZC,cAAc,ICyB1BT,IAzEsBR,GAAAQ,qBAAoBA,EA2E1CG,OAAAC,eAAAZ,EAAA,cAAA0B,OAAA,IDrBI1B,EAAAA,WCqBWQ","file":"System/Collections/Enumeration/SimpleEnumerableBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./IteratorResult\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var IteratorResult_1 = require(\"./IteratorResult\");\n    var VOID0 = void 0;\n    var SimpleEnumerableBase = (function () {\n        function SimpleEnumerableBase() {\n            this.reset();\n        }\n        Object.defineProperty(SimpleEnumerableBase.prototype, \"current\", {\n            get: function () {\n                return this._current;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        SimpleEnumerableBase.prototype.incrementIndex = function () {\n            var i = this._index;\n            this._index = i = i === VOID0 ? 0 : (i + 1);\n            return i;\n        };\n        SimpleEnumerableBase.prototype.nextValue = function () {\n            this.moveNext();\n            return this._current;\n        };\n        SimpleEnumerableBase.prototype.next = function () {\n            return this.moveNext()\n                ? new IteratorResult_1.IteratorResult(this._current, this._index)\n                : IteratorResult_1.IteratorResult.Done;\n        };\n        SimpleEnumerableBase.prototype['return'] = function (value) {\n            try {\n                return value !== VOID0 && this.canMoveNext()\n                    ? new IteratorResult_1.IteratorResult(value, VOID0, true)\n                    : IteratorResult_1.IteratorResult.Done;\n            }\n            finally {\n                this.dispose();\n            }\n        };\n        SimpleEnumerableBase.prototype.reset = function () {\n            this._current = VOID0;\n            this._index = VOID0;\n        };\n        SimpleEnumerableBase.prototype.dispose = function () {\n            this.reset();\n        };\n        SimpleEnumerableBase.prototype.getIsEndless = function () {\n            return this.canMoveNext();\n        };\n        Object.defineProperty(SimpleEnumerableBase.prototype, \"isEndless\", {\n            get: function () {\n                return this.getIsEndless();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return SimpleEnumerableBase;\n    }());\n    exports.SimpleEnumerableBase = SimpleEnumerableBase;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = SimpleEnumerableBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {IIteratorResult} from \"./IIterator\";\r\nimport {IteratorResult} from \"./IteratorResult\";\r\nimport {IEnumerator} from \"./IEnumerator\";\r\n\r\nconst VOID0:any = void 0;\r\n\r\nexport abstract class SimpleEnumerableBase<T> implements IEnumerator<T>\r\n{\r\n\r\n\tprotected _current:T;\r\n\tprotected _index:number;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tget current():T\r\n\t{\r\n\t\treturn this._current;\r\n\t}\r\n\r\n\tprotected abstract canMoveNext():boolean;\r\n\tabstract moveNext():boolean;\r\n\r\n\tprotected incrementIndex():number {\r\n\t\tlet i = this._index;\r\n\t\tthis._index = i = i===VOID0 ? 0 : (i+1);\r\n\t\treturn i;\r\n\t}\r\n\r\n\tnextValue():T\r\n\t{\r\n\t\tthis.moveNext();\r\n\t\treturn this._current;\r\n\t}\r\n\r\n\tnext():IIteratorResult<T>\r\n\t{\r\n\t\treturn this.moveNext()\r\n\t\t\t? new IteratorResult(this._current,this._index)\r\n\t\t\t: IteratorResult.Done;\r\n\t}\r\n\r\n\t'return'():IIteratorResult<void>\r\n\t'return'<TReturn>(value:TReturn):IIteratorResult<TReturn>\r\n\t'return'(value?:any):IIteratorResult<any>\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\treturn value!==VOID0 && this.canMoveNext()\r\n\t\t\t\t? new IteratorResult(value,VOID0,true)\r\n\t\t\t\t: IteratorResult.Done;\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tthis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tthis._current = VOID0;\r\n\t\tthis._index = VOID0;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean {\r\n\t\treturn this.canMoveNext();\r\n\t}\r\n\r\n\tget isEndless():boolean\r\n\t{\r\n\t\treturn this.getIsEndless();\r\n\t}\r\n}\r\n\r\nexport default SimpleEnumerableBase;\r\n"]}