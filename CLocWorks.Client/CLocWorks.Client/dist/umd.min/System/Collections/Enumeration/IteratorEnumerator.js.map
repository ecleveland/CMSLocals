{"version":3,"sources":["System/Collections/Enumeration/IteratorEnumerator.js","System/Collections/Enumeration/IteratorEnumerator.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","SimpleEnumerableBase_1","VOID0","IteratorEnumerator","_super","_iterator","_isEndless","call","canMoveNext","moveNext","value","_","i","r","arguments","length","next","_current","done","dispose","getIsEndless","SimpleEnumerableBase","defineProperty"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,MAEnF,SAAWO,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,0BAA2BN,IAE9D,SAAUI,EAASF,GAClB,YCVJ,IAAAM,GAAAJ,EAAmC,0BAE7BK,EAAY,OAQlBC,EAAA,SAAAC,GAMC,QAAAD,GAAoBE,EAAgCC,GAEnDF,EAAAG,KAAAxB,MAFmBA,KAAAsB,UAAAA,EAAgCtB,KAAAuB,WAAAA,EAkCrD,MAxC2CxB,WAAAqB,EAAAC,GAWhCD,EAAAb,UAAAkB,YAAV,WAEC,MAAuB,OAAhBzB,KAAKsB,WAGbF,EAAAb,UAAAmB,SAAA,SAASC,GAER,GAAIC,GAAI5B,KACJ6B,EAAID,EAAEN,SACV,IAAGO,EACH,CACC,GAAIC,GAAIC,UAAUC,OAASH,EAAEI,KAAKN,GAASE,EAAEI,MAE7C,IADAL,EAAEM,SAAWJ,EAAEH,OACZG,EAAEK,KACA,OAAO,CADDP,GAAEQ,UAGd,OAAO,GAGRhB,EAAAb,UAAA6B,QAAA,WAECf,EAAAd,UAAM6B,QAAOZ,KAAAxB,MACbA,KAAKsB,UAAYH,GAGRC,EAAAb,UAAA8B,aAAV,WAEC,MAAOrC,MAAKuB,YAAcF,EAAAd,UAAM8B,aAAYb,KAAAxB,OAE9CoB,GAxC2CF,EAAAoB,qBAA9B1B,GAAAQ,mBAAkBA,EA0C/BZ,OAAA+B,eAAA3B,EAAA,cAAAe,OAAA,IDLIf,EAAAA,WCKWQ","file":"System/Collections/Enumeration/IteratorEnumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./SimpleEnumerableBase\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var SimpleEnumerableBase_1 = require(\"./SimpleEnumerableBase\");\n    var VOID0 = void 0;\n    var IteratorEnumerator = (function (_super) {\n        __extends(IteratorEnumerator, _super);\n        function IteratorEnumerator(_iterator, _isEndless) {\n            _super.call(this);\n            this._iterator = _iterator;\n            this._isEndless = _isEndless;\n        }\n        IteratorEnumerator.prototype.canMoveNext = function () {\n            return this._iterator != null;\n        };\n        IteratorEnumerator.prototype.moveNext = function (value) {\n            var _ = this;\n            var i = _._iterator;\n            if (i) {\n                var r = arguments.length ? i.next(value) : i.next();\n                _._current = r.value;\n                if (r.done)\n                    _.dispose();\n                else\n                    return true;\n            }\n            return false;\n        };\n        IteratorEnumerator.prototype.dispose = function () {\n            _super.prototype.dispose.call(this);\n            this._iterator = VOID0;\n        };\n        IteratorEnumerator.prototype.getIsEndless = function () {\n            return this._isEndless && _super.prototype.getIsEndless.call(this);\n        };\n        return IteratorEnumerator;\n    }(SimpleEnumerableBase_1.SimpleEnumerableBase));\n    exports.IteratorEnumerator = IteratorEnumerator;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = IteratorEnumerator;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {IIterator} from \"./IIterator\";\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/**\r\n * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\r\n * This is analogous to a 'generator' and has a compatible interface.\r\n *\r\n *\r\n */\r\nexport class IteratorEnumerator<T> extends SimpleEnumerableBase<T>\r\n{\r\n\t/**\r\n\t * @param _iterator\r\n\t * @param _isEndless true and false are explicit where as undefined means 'unknown'.\r\n\t */\r\n\tconstructor(private _iterator:IIterator<T>, private _isEndless?:boolean)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprotected canMoveNext():boolean\r\n\t{\r\n\t\treturn this._iterator!=null;\r\n\t}\r\n\r\n\tmoveNext(value?:any):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar i = _._iterator;\r\n\t\tif(i)\r\n\t\t{\r\n\t\t\tvar r = arguments.length ? i.next(value) : i.next();\r\n\t\t\t_._current = r.value;\r\n\t\t\tif(r.done) _.dispose();\r\n\t\t\telse return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.dispose();\r\n\t\tthis._iterator = VOID0;\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean\r\n\t{\r\n\t\treturn this._isEndless && super.getIsEndless();\r\n\t}\r\n}\r\n\r\nexport default IteratorEnumerator;"]}