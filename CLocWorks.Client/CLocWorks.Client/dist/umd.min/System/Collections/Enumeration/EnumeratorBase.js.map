{"version":3,"sources":["System/Collections/Enumeration/EnumeratorBase.js","System/Collections/Enumeration/EnumeratorBase.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","yielder","recycle","yielderPool","ObjectPool_1","ObjectPool","Yielder","y","yieldBreak","add","take","EnumeratorState","Types_1","DisposableBase_1","IteratorResult_1","VOID0","_current","defineProperty","get","enumerable","configurable","_index","yieldReturn","value","dispose","EnumeratorBase","_super","_initializer","_tryGetNext","disposer","isEndless","call","reset","Type","isBoolean","_isEndless","isFunction","_disposer","_yielder","current","index","_","throwIfDisposed","_state","Before","moveNext","Running","initializer","After","e","nextValue","next","IteratorResult","Done","_onDispose","DisposableBase"],"mappings":"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","file":"System/Collections/Enumeration/EnumeratorBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../../Types\", \"../../Disposable/DisposableBase\", \"../../Disposable/ObjectPool\", \"./IteratorResult\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Types_1 = require(\"../../Types\");\n    var DisposableBase_1 = require(\"../../Disposable/DisposableBase\");\n    var ObjectPool_1 = require(\"../../Disposable/ObjectPool\");\n    var IteratorResult_1 = require(\"./IteratorResult\");\n    var VOID0 = void (0);\n    var yielderPool;\n    function yielder(recycle) {\n        if (!yielderPool)\n            yielderPool\n                = new ObjectPool_1.ObjectPool(40, function () { return new Yielder(); }, function (y) { return y.yieldBreak(); });\n        if (!recycle)\n            return yielderPool.take();\n        yielderPool.add(recycle);\n    }\n    var Yielder = (function () {\n        function Yielder() {\n            this._current = VOID0;\n        }\n        Object.defineProperty(Yielder.prototype, \"current\", {\n            get: function () { return this._current; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Yielder.prototype, \"index\", {\n            get: function () { return this._index; },\n            enumerable: true,\n            configurable: true\n        });\n        Yielder.prototype.yieldReturn = function (value) {\n            this._current = value;\n            if (this._index === VOID0)\n                this._index = 0;\n            else\n                this._index++;\n            return true;\n        };\n        Yielder.prototype.yieldBreak = function () {\n            this._current = VOID0;\n            this._index = VOID0;\n            return false;\n        };\n        Yielder.prototype.dispose = function () {\n            this.yieldBreak();\n        };\n        return Yielder;\n    }());\n    var EnumeratorState;\n    (function (EnumeratorState) {\n        EnumeratorState[EnumeratorState[\"Before\"] = 0] = \"Before\";\n        EnumeratorState[EnumeratorState[\"Running\"] = 1] = \"Running\";\n        EnumeratorState[EnumeratorState[\"After\"] = 2] = \"After\";\n    })(EnumeratorState || (EnumeratorState = {}));\n    var EnumeratorBase = (function (_super) {\n        __extends(EnumeratorBase, _super);\n        function EnumeratorBase(_initializer, _tryGetNext, disposer, isEndless) {\n            _super.call(this);\n            this._initializer = _initializer;\n            this._tryGetNext = _tryGetNext;\n            this.reset();\n            if (Types_1.Type.isBoolean(isEndless))\n                this._isEndless = isEndless;\n            else if (Types_1.Type.isBoolean(disposer))\n                this._isEndless = disposer;\n            if (Types_1.Type.isFunction(disposer))\n                this._disposer = disposer;\n        }\n        Object.defineProperty(EnumeratorBase.prototype, \"current\", {\n            get: function () {\n                var y = this._yielder;\n                return y && y.current;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EnumeratorBase.prototype, \"index\", {\n            get: function () {\n                var y = this._yielder;\n                return y && y.index;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EnumeratorBase.prototype, \"isEndless\", {\n            get: function () {\n                return this._isEndless;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        EnumeratorBase.prototype.reset = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var y = _._yielder;\n            _._yielder = null;\n            _._state = EnumeratorState.Before;\n            if (y)\n                yielder(y);\n        };\n        EnumeratorBase.prototype.moveNext = function () {\n            var _ = this;\n            try {\n                switch (_._state) {\n                    case EnumeratorState.Before:\n                        _._yielder = _._yielder || yielder();\n                        _._state = EnumeratorState.Running;\n                        var initializer = _._initializer;\n                        if (initializer)\n                            initializer();\n                    case EnumeratorState.Running:\n                        if (_._tryGetNext(_._yielder)) {\n                            return true;\n                        }\n                        else {\n                            this.dispose();\n                            return false;\n                        }\n                    case EnumeratorState.After:\n                        return false;\n                }\n            }\n            catch (e) {\n                this.dispose();\n                throw e;\n            }\n        };\n        EnumeratorBase.prototype.nextValue = function () {\n            return this.moveNext()\n                ? this.current\n                : VOID0;\n        };\n        EnumeratorBase.prototype.next = function () {\n            return this.moveNext()\n                ? new IteratorResult_1.IteratorResult(this.current, this.index)\n                : IteratorResult_1.IteratorResult.Done;\n        };\n        EnumeratorBase.prototype['return'] = function (value) {\n            try {\n                return value === VOID0 || this._state === EnumeratorState.After\n                    ? IteratorResult_1.IteratorResult.Done\n                    : new IteratorResult_1.IteratorResult(value, VOID0, true);\n            }\n            finally {\n                this.dispose();\n            }\n        };\n        EnumeratorBase.prototype._onDispose = function () {\n            var _ = this, disposer = _._disposer;\n            _._initializer = null;\n            _._disposer = null;\n            var y = _._yielder;\n            _._yielder = null;\n            this._state = EnumeratorState.After;\n            if (y)\n                yielder(y);\n            if (disposer)\n                disposer();\n        };\n        return EnumeratorBase;\n    }(DisposableBase_1.DisposableBase));\n    exports.EnumeratorBase = EnumeratorBase;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = EnumeratorBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../../Types\";\r\nimport {DisposableBase} from \"../../Disposable/DisposableBase\";\r\nimport {ObjectPool} from \"../../Disposable/ObjectPool\";\r\nimport {IDisposable} from \"../../Disposable/IDisposable\";\r\nimport {IEnumerator} from \"./IEnumerator\";\r\nimport {IIteratorResult} from \"./IIterator\";\r\nimport {IYield} from \"./IYield\";\r\nimport {IteratorResult} from \"./IteratorResult\";\r\n\r\nconst VOID0:any = void(0);\r\n\r\nvar yielderPool:ObjectPool<Yielder<any>>;\r\nfunction yielder():Yielder<any>;\r\nfunction yielder(recycle?:Yielder<any>):void;\r\nfunction yielder(recycle?:Yielder<any>):Yielder<any>\r\n{\r\n\tif(!yielderPool)\r\n\t\tyielderPool\r\n\t\t\t= new ObjectPool<Yielder<any>>(40, ()=>new Yielder<any>(),y=>y.yieldBreak());\r\n\tif(!recycle) return yielderPool.take();\r\n\tyielderPool.add(recycle);\r\n}\r\n\r\nclass Yielder<T> implements IYield<T>, IDisposable\r\n{\r\n\tprivate _current:T = VOID0;\r\n\tprivate _index:number;\r\n\r\n\tget current():T { return this._current; } // this class is not entirely local/private.  Still needs protection.\r\n\r\n\tget index():number { return this._index; }\r\n\r\n\tyieldReturn(value:T):boolean\r\n\t{\r\n\t\tthis._current = value;\r\n\t\tif(this._index===VOID0)\r\n\t\t\tthis._index = 0;\r\n\t\telse\r\n\t\t\tthis._index++;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tyieldBreak():boolean\r\n\t{\r\n\t\tthis._current = VOID0;\r\n\t\tthis._index = VOID0;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.yieldBreak();\r\n\t}\r\n}\r\n\r\ntype ActionVoid = ()=>void;\r\n\r\n// IEnumerator State\r\nenum EnumeratorState { Before, Running, After }\r\n\r\n// \"Enumerator\" is conflict JScript's \"Enumerator\"\r\n// Naming this class EnumeratorBase to avoid collision with IE.\r\nexport class EnumeratorBase<T> extends DisposableBase implements IEnumerator<T>\r\n{\r\n\r\n\tprivate _yielder:Yielder<T>;\r\n\tprivate _state:EnumeratorState;\r\n\tprivate _disposer:()=>void;\r\n\r\n\tget current():T\r\n\t{\r\n\t\tvar y = this._yielder;\r\n\t\treturn y && y.current;\r\n\t}\r\n\r\n\tget index():number\r\n\t{\r\n\t\tvar y = this._yielder;\r\n\t\treturn y && y.index;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tinitializer:() => void,\r\n\t\ttryGetNext:(yielder:IYield<T>) => boolean,\r\n\t\tisEndless?:boolean);\r\n\tconstructor(\r\n\t\tinitializer:() => void,\r\n\t\ttryGetNext:(yielder:IYield<T>) => boolean,\r\n\t\tdisposer?:()=>void,\r\n\t\tisEndless?:boolean);\r\n\tconstructor(\r\n\t\tprivate _initializer:() => void,\r\n\t\tprivate _tryGetNext:(yielder:IYield<T>) => boolean,\r\n\t\tdisposer?:ActionVoid|boolean,\r\n\t\tisEndless?:boolean)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.reset();\r\n\t\tif(Type.isBoolean(isEndless))\r\n\t\t\tthis._isEndless = isEndless;\r\n\t\telse if(Type.isBoolean(disposer))\r\n\t\t\tthis._isEndless = disposer;\r\n\r\n\t\tif(Type.isFunction(disposer))\r\n\t\t\tthis._disposer = disposer;\r\n\t}\r\n\r\n\tprotected _isEndless:boolean;\r\n\t/*\r\n\t * Provides a mechanism to indicate if this enumerable never ends.\r\n\t * If set to true, some operations that expect a finite result may throw.\r\n\t * Explicit false means it has an end.\r\n\t * Implicit void means unknown.\r\n\t */\r\n\tget isEndless():boolean\r\n\t{\r\n\t\treturn this._isEndless;\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tvar y = _._yielder;\r\n\t\t_._yielder = null;\r\n\r\n\t\t_._state = EnumeratorState.Before;\r\n\r\n\t\tif(y) yielder(y); // recycle until actually needed.\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\ttry\r\n\t\t{\r\n\t\t\tswitch(_._state)\r\n\t\t\t{\r\n\t\t\t\tcase EnumeratorState.Before:\r\n\t\t\t\t\t_._yielder = _._yielder || yielder();\r\n\t\t\t\t\t_._state = EnumeratorState.Running;\r\n\t\t\t\t\tvar initializer = _._initializer;\r\n\t\t\t\t\tif(initializer)\r\n\t\t\t\t\t\tinitializer();\r\n\t\t\t\t// fall through\r\n\t\t\t\tcase EnumeratorState.Running:\r\n\t\t\t\t\tif(_._tryGetNext(_._yielder))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.dispose();\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\tcase EnumeratorState.After:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(e)\r\n\t\t{\r\n\t\t\tthis.dispose();\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n\r\n\tnextValue():T\r\n\t{\r\n\t\treturn this.moveNext()\r\n\t\t\t? this.current\r\n\t\t\t: VOID0;\r\n\t}\r\n\r\n\t/**\r\n\t * Exposed for compatibility with generators.\r\n\t */\r\n\tnext():IIteratorResult<T>\r\n\t{\r\n\t\treturn this.moveNext()\r\n\t\t\t? new IteratorResult(this.current, this.index)\r\n\t\t\t: IteratorResult.Done\r\n\t}\r\n\r\n\t'return'():IIteratorResult<void>\r\n\t'return'<TReturn>(value:TReturn):IIteratorResult<TReturn>\r\n\t'return'(value?:any):IIteratorResult<any>\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\treturn value===VOID0 || this._state===EnumeratorState.After\r\n\t\t\t\t? IteratorResult.Done\r\n\t\t\t\t: new IteratorResult(value, VOID0, true);\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tthis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tvar _ = this, disposer = _._disposer;\r\n\r\n\t\t_._initializer = null;\r\n\t\t_._disposer = null;\r\n\r\n\r\n\t\tvar y = _._yielder;\r\n\t\t_._yielder = null;\r\n\t\tthis._state = EnumeratorState.After;\r\n\r\n\t\tif(y) yielder(y);\r\n\r\n\t\tif(disposer)\r\n\t\t\tdisposer();\r\n\t}\r\n\r\n}\r\n\r\nexport default EnumeratorBase;\r\n"]}