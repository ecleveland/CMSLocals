{"version":3,"sources":["System/Threading/Tasks/Task.js","System/Threading/Tasks/Task.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","factory","module","exports","v","require","undefined","define","amd","TaskHandlerBase_1","ArgumentNullException_1","Lazy_1","Task","_super","valueFactory","call","ArgumentNullException","_result","Lazy","_onExecute","getValue","getResult","value","getState","r","status","getStatus","result","isValueCreated","error","start","defer","runSynchronously","defineProperty","get","enumerable","configurable","throwIfDisposed","_onDispose","dispose","TaskHandlerBase"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,MAEnF,SAAWO,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,oBAAqB,yCAA0C,cAAeN,IAEjH,SAAUI,EAASF,GAClB,YCZJ,IAAAM,GAAAJ,EAA8B,qBAC9BK,EAAAL,EAAoC,0CAEpCM,EAAAN,EAAmB,cAQnBO,EAAA,SAAAC,GAIC,QAAAD,GAAYE,GAGX,GADAD,EAAAE,KAAAxB,OACIuB,EAAc,KAAM,IAAIJ,GAAAM,sBAAsB,eAClDzB,MAAK0B,QAAU,GAAIN,GAAAO,KAAKJ,GAAc,GAqExC,MA7E6BxB,WAAAsB,EAAAC,GAWlBD,EAAAd,UAAAqB,WAAV,WAEC5B,KAAK0B,QAAQG,YAGJR,EAAAd,UAAAuB,UAAV,WAEC,MAAO9B,MAAK0B,QAAQK,OAGXV,EAAAd,UAAAyB,SAAV,WAEC,GAAIC,GAAIjC,KAAK0B,OACb,OAAOO,KACLC,OAAQlC,KAAKmC,YACbC,OAAQH,EAAEI,eAAiBJ,EAAEF,MAAQ,OACrCO,MAAOL,EAAEK,QAKZjB,EAAAd,UAAAgC,MAAA,SAAMC,GAEgB,GAAlBxC,KAAKmC,aAEPb,EAAAf,UAAMgC,MAAKf,KAAAxB,KAACwC,IAIdnB,EAAAd,UAAAkC,iBAAA,WAEsB,GAAlBzC,KAAKmC,aAEPb,EAAAf,UAAMkC,iBAAgBjB,KAAAxB,OAIxBQ,OAAAkC,eAAIrB,EAAAd,UAAA,SDVOoC,ICUX,WAEC,MAAO3C,MAAKgC,YDTFY,YAAY,EACZC,cAAc,ICWzBrC,OAAAkC,eAAIrB,EAAAd,UAAA,UDROoC,ICQX,WAIC,MAFA3C,MAAK8C,kBACL9C,KAAKyC,mBACEzC,KAAK8B,aDPFc,YAAY,EACZC,cAAc,ICSzBrC,OAAAkC,eAAIrB,EAAAd,UAAA,SDNOoC,ICMX,WAGC,MADA3C,MAAK8C,kBACE9C,KAAK0B,QAAQY,ODLVM,YAAY,EACZC,cAAc,ICOfxB,EAAAd,UAAAwC,WAAV,WAECzB,EAAAf,UAAMwC,WAAUvB,KAAAxB,KAChB,IAAIiC,GAAIjC,KAAK0B,OAEVO,KAEFjC,KAAK0B,QAAU,KACfO,EAAEe,YAGL3B,GA7E6BH,EAAA+B,gBAAhBrC,GAAAS,KAAIA,EA+EjBb,OAAAkC,eAAA9B,EAAA,cAAAmB,OAAA,IDNInB,EAAAA,WCMWS","file":"System/Threading/Tasks/Task.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./TaskHandlerBase\", \"../../Exceptions/ArgumentNullException\", \"../../Lazy\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var TaskHandlerBase_1 = require(\"./TaskHandlerBase\");\n    var ArgumentNullException_1 = require(\"../../Exceptions/ArgumentNullException\");\n    var Lazy_1 = require(\"../../Lazy\");\n    var Task = (function (_super) {\n        __extends(Task, _super);\n        function Task(valueFactory) {\n            _super.call(this);\n            if (!valueFactory)\n                throw new ArgumentNullException_1.ArgumentNullException('valueFactory');\n            this._result = new Lazy_1.Lazy(valueFactory, false);\n        }\n        Task.prototype._onExecute = function () {\n            this._result.getValue();\n        };\n        Task.prototype.getResult = function () {\n            return this._result.value;\n        };\n        Task.prototype.getState = function () {\n            var r = this._result;\n            return r && {\n                status: this.getStatus(),\n                result: r.isValueCreated ? r.value : void 0,\n                error: r.error\n            };\n        };\n        Task.prototype.start = function (defer) {\n            if (this.getStatus() == 0) {\n                _super.prototype.start.call(this, defer);\n            }\n        };\n        Task.prototype.runSynchronously = function () {\n            if (this.getStatus() == 0) {\n                _super.prototype.runSynchronously.call(this);\n            }\n        };\n        Object.defineProperty(Task.prototype, \"state\", {\n            get: function () {\n                return this.getState();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Task.prototype, \"result\", {\n            get: function () {\n                this.throwIfDisposed();\n                this.runSynchronously();\n                return this.getResult();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Task.prototype, \"error\", {\n            get: function () {\n                this.throwIfDisposed();\n                return this._result.error;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Task.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            var r = this._result;\n            if (r) {\n                this._result = null;\n                r.dispose();\n            }\n        };\n        return Task;\n    }(TaskHandlerBase_1.TaskHandlerBase));\n    exports.Task = Task;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Task;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {TaskHandlerBase} from \"./TaskHandlerBase\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {Func} from \"../../FunctionTypes\";\r\nimport {Lazy} from \"../../Lazy\";\r\nimport {ITaskState} from \"./ITaskState\";\r\nimport {TaskStatus} from \"./TaskStatus\";\r\n\r\n/**\r\n * A simplified synchronous (but deferrable) version of Task<T>\r\n * Asynchronous operations should use Promise<T>.\r\n */\r\nexport class Task<T> extends TaskHandlerBase\r\n{\r\n\tprivate _result:Lazy<T>;\r\n\r\n\tconstructor(valueFactory:Func<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!valueFactory) throw new ArgumentNullException('valueFactory');\r\n\t\tthis._result = new Lazy(valueFactory, false);\r\n\t}\r\n\r\n\tprotected _onExecute():void\r\n\t{\r\n\t\tthis._result.getValue();\r\n\t}\r\n\r\n\tprotected getResult():T\r\n\t{\r\n\t\treturn this._result.value; // This will detect any potential recursion.\r\n\t}\r\n\r\n\tprotected getState():ITaskState<T>\r\n\t{\r\n\t\tvar r = this._result;\r\n\t\treturn r && {\r\n\t\t\t\tstatus: this.getStatus(),\r\n\t\t\t\tresult: r.isValueCreated ? r.value : void 0,\r\n\t\t\t\terror: r.error\r\n\t\t\t};\r\n\t}\r\n\r\n\r\n\tstart(defer?:number):void\r\n\t{\r\n\t\tif(this.getStatus()==TaskStatus.Created)\r\n\t\t{\r\n\t\t\tsuper.start(defer);\r\n\t\t}\r\n\t}\r\n\r\n\trunSynchronously():void\r\n\t{\r\n\t\tif(this.getStatus()==TaskStatus.Created)\r\n\t\t{\r\n\t\t\tsuper.runSynchronously();\r\n\t\t}\r\n\t}\r\n\r\n\tget state():ITaskState<T>\r\n\t{\r\n\t\treturn this.getState();\r\n\t}\r\n\r\n\tget result():T\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis.runSynchronously();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this._result.error;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tvar r = this._result;\r\n\r\n\t\tif(r)\r\n\t\t{\r\n\t\t\tthis._result = null;\r\n\t\t\tr.dispose();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Task;"]}