{"version":3,"sources":["System/Types.js","System/Types.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","VOID0","_BOOLEAN","_NUMBER","_STRING","_OBJECT","_UNDEFINED","_FUNCTION","LENGTH","typeInfoRegistry","TypeInfo","target","onBeforeFreeze","_","this","isBoolean","isNumber","isString","isTrueNaN","isObject","isFunction","isUndefined","isNull","isPrimitive","type","isNaN","isFinite","isValidNumber","isNullOrUndefined","isArray","Array","Object","freeze","prototype","member","name","t","getFor","info","Type","value","allowNaN","allowNull","numberOrNaN","NaN","of","hasMember","property","hasMemberOfType","instance","isArrayLike","BOOLEAN","NUMBER","STRING","OBJECT","UNDEFINED","FUNCTION","defineProperty"],"mappings":"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","file":"System/Types.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var VOID0 = void (0), _BOOLEAN = typeof true, _NUMBER = typeof 0, _STRING = typeof \"\", _OBJECT = typeof {}, _UNDEFINED = typeof VOID0, _FUNCTION = typeof function () { }, LENGTH = \"length\";\n    var typeInfoRegistry = {};\n    var TypeInfo = (function () {\n        function TypeInfo(target, onBeforeFreeze) {\n            var _ = this;\n            _.isBoolean = false;\n            _.isNumber = false;\n            _.isString = false;\n            _.isTrueNaN = false;\n            _.isObject = false;\n            _.isFunction = false;\n            _.isUndefined = false;\n            _.isNull = false;\n            _.isPrimitive = false;\n            switch (_.type = typeof target) {\n                case _BOOLEAN:\n                    _.isBoolean = true;\n                    _.isPrimitive = true;\n                    break;\n                case _NUMBER:\n                    _.isNumber = true;\n                    _.isTrueNaN = isNaN(target);\n                    _.isFinite = isFinite(target);\n                    _.isValidNumber = !_.isTrueNaN;\n                    _.isPrimitive = true;\n                    break;\n                case _STRING:\n                    _.isString = true;\n                    _.isPrimitive = true;\n                    break;\n                case _OBJECT:\n                    _.target = target;\n                    if (target === null) {\n                        _.isNull = true;\n                        _.isNullOrUndefined = true;\n                        _.isPrimitive = true;\n                    }\n                    else {\n                        _.isArray = Array.isArray(target);\n                        _.isObject = true;\n                    }\n                    break;\n                case _FUNCTION:\n                    _.target = target;\n                    _.isFunction = true;\n                    break;\n                case _UNDEFINED:\n                    _.isUndefined = true;\n                    _.isNullOrUndefined = true;\n                    _.isPrimitive = true;\n                    break;\n                default:\n                    throw \"Fatal type failure.  Unknown type: \" + _.type;\n            }\n            if (onBeforeFreeze)\n                onBeforeFreeze();\n            Object.freeze(_);\n        }\n        TypeInfo.prototype.member = function (name) {\n            var t = this.target;\n            return TypeInfo.getFor(t && (name) in (t)\n                ? t[name]\n                : undefined);\n        };\n        TypeInfo.getFor = function (target) {\n            var type = typeof target;\n            switch (type) {\n                case _OBJECT:\n                case _FUNCTION:\n                    return new TypeInfo(target);\n            }\n            var info = typeInfoRegistry[type];\n            if (!info)\n                typeInfoRegistry[type] = info = new TypeInfo(target);\n            return info;\n        };\n        return TypeInfo;\n    }());\n    exports.TypeInfo = TypeInfo;\n    var Type;\n    (function (Type) {\n        Type.BOOLEAN = _BOOLEAN;\n        Type.NUMBER = _NUMBER;\n        Type.STRING = _STRING;\n        Type.OBJECT = _OBJECT;\n        Type.UNDEFINED = _UNDEFINED;\n        Type.FUNCTION = _FUNCTION;\n        function isBoolean(value) {\n            return typeof value === _BOOLEAN;\n        }\n        Type.isBoolean = isBoolean;\n        function isNumber(value, allowNaN) {\n            if (allowNaN === VOID0)\n                allowNaN = true;\n            return typeof value === _NUMBER && (allowNaN || !isNaN(value));\n        }\n        Type.isNumber = isNumber;\n        function isTrueNaN(value) {\n            return typeof value === _NUMBER && isNaN(value);\n        }\n        Type.isTrueNaN = isTrueNaN;\n        function isString(value) {\n            return typeof value === _STRING;\n        }\n        Type.isString = isString;\n        function isPrimitive(value) {\n            var t = typeof value;\n            switch (t) {\n                case _BOOLEAN:\n                case _STRING:\n                case _NUMBER:\n                case _UNDEFINED:\n                    return true;\n                case _OBJECT:\n                    return value === null;\n            }\n            return false;\n        }\n        Type.isPrimitive = isPrimitive;\n        function isFunction(value) {\n            return typeof value === _FUNCTION;\n        }\n        Type.isFunction = isFunction;\n        function isObject(value, allowNull) {\n            if (allowNull === void 0) { allowNull = false; }\n            return typeof value === _OBJECT && (allowNull || value !== null);\n        }\n        Type.isObject = isObject;\n        function numberOrNaN(value) {\n            return isNaN(value) ? NaN : value;\n        }\n        Type.numberOrNaN = numberOrNaN;\n        function of(target) {\n            return TypeInfo.getFor(target);\n        }\n        Type.of = of;\n        function hasMember(value, property) {\n            return value && !isPrimitive(value) && (property) in (value);\n        }\n        Type.hasMember = hasMember;\n        function hasMemberOfType(instance, property, type) {\n            return hasMember(instance, property) && typeof (instance[property]) === type;\n        }\n        Type.hasMemberOfType = hasMemberOfType;\n        function isArrayLike(instance) {\n            return instance instanceof Array\n                || Type.isString(instance)\n                || !Type.isFunction(instance) && hasMember(instance, LENGTH);\n        }\n        Type.isArrayLike = isArrayLike;\n    })(Type = exports.Type || (exports.Type = {}));\n    Object.freeze(Type);\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Type;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {Primitive} from \"./Primitive\";\r\nimport {IArray} from \"./Collections/Array/IArray\"; // For compatibility with (let, const, function, class);\r\n\r\nconst\r\n\tVOID0:any         = void(0),\r\n\t_BOOLEAN:string   = typeof true,\r\n\t_NUMBER:string    = typeof 0,\r\n\t_STRING:string    = typeof \"\",\r\n\t_OBJECT:string    = typeof {},\r\n\t_UNDEFINED:string = typeof VOID0,\r\n\t_FUNCTION:string  = typeof function() {},\r\n\tLENGTH:string     = \"length\";\r\n\r\n// Only used for primitives.\r\nvar typeInfoRegistry:{[key:string]:TypeInfo} = {};\r\n\r\n/**\r\n * Exposes easy access to type information including inquiring about members.\r\n */\r\nexport class TypeInfo\r\n{\r\n\t// Not retained for primitives. Since they have no members.\r\n\tprotected target:any;\r\n\r\n\ttype:string;\r\n\r\n\tisBoolean:boolean;\r\n\tisNumber:boolean;\r\n\tisFinite:boolean;\r\n\tisValidNumber:boolean;\r\n\tisString:boolean;\r\n\tisTrueNaN:boolean;\r\n\tisObject:boolean;\r\n\tisArray:boolean;\r\n\tisFunction:boolean;\r\n\tisUndefined:boolean;\r\n\tisNull:boolean;\r\n\tisNullOrUndefined:boolean;\r\n\tisPrimitive:boolean;\r\n\r\n\tconstructor(target:any,onBeforeFreeze?:()=>void)\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.isBoolean = false;\r\n\t\t_.isNumber = false;\r\n\t\t_.isString = false;\r\n\t\t_.isTrueNaN = false;\r\n\t\t_.isObject = false;\r\n\t\t_.isFunction = false;\r\n\t\t_.isUndefined = false;\r\n\t\t_.isNull = false;\r\n\t\t_.isPrimitive = false;\r\n\r\n\t\tswitch(_.type = typeof target)\r\n\t\t{\r\n\t\t\tcase _BOOLEAN:\r\n\t\t\t\t_.isBoolean = true;\r\n\t\t\t\t_.isPrimitive = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase _NUMBER:\r\n\t\t\t\t_.isNumber = true;\r\n\t\t\t\t_.isTrueNaN = isNaN(target);\r\n\t\t\t\t_.isFinite = isFinite(target);\r\n\t\t\t\t_.isValidNumber = !_.isTrueNaN;\r\n\t\t\t\t_.isPrimitive = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase _STRING:\r\n\t\t\t\t_.isString = true;\r\n\t\t\t\t_.isPrimitive = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase _OBJECT:\r\n\t\t\t\t_.target = target;\r\n\t\t\t\tif(target===null)\r\n\t\t\t\t{\r\n\t\t\t\t\t_.isNull = true;\r\n\t\t\t\t\t_.isNullOrUndefined = true;\r\n\t\t\t\t\t_.isPrimitive = true;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t_.isArray = Array.isArray(target);\r\n\t\t\t\t\t_.isObject = true;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase _FUNCTION:\r\n\t\t\t\t_.target = target;\r\n\t\t\t\t_.isFunction = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase _UNDEFINED:\r\n\t\t\t\t_.isUndefined = true;\r\n\t\t\t\t_.isNullOrUndefined = true;\r\n\t\t\t\t_.isPrimitive = true;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"Fatal type failure.  Unknown type: \" + _.type;\r\n\t\t}\r\n\r\n\t\tif(onBeforeFreeze) onBeforeFreeze();\r\n\t\tObject.freeze(_);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a TypeInfo for any member or non-member,\r\n\t * where non-members are of type undefined.\r\n\t * @param name\r\n\t * @returns {TypeInfo}\r\n\t */\r\n\tmember(name:string):TypeInfo\r\n\t{\r\n\t\tvar t = this.target;\r\n\t\treturn TypeInfo.getFor(\r\n\t\t\tt && (name) in (t)\r\n\t\t\t\t? t[name]\r\n\t\t\t\t: undefined);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a TypeInfo for any target object.\r\n\t * If the target object is of a primitive type, it returns the TypeInfo instance assigned to that type.\r\n\t * @param target\r\n\t * @returns {TypeInfo}\r\n\t */\r\n\tstatic getFor(target:any):TypeInfo\r\n\t{\r\n\t\tvar type:string = typeof target;\r\n\t\tswitch(type)\r\n\t\t{\r\n\t\t\tcase _OBJECT:\r\n\t\t\tcase _FUNCTION:\r\n\t\t\t\treturn new TypeInfo(target);\r\n\t\t}\r\n\t\tvar info = typeInfoRegistry[type];\r\n\t\tif(!info) typeInfoRegistry[type] = info = new TypeInfo(target);\r\n\t\treturn info;\r\n\t}\r\n\t\r\n\t\r\n\r\n}\r\n\r\nexport module Type\r\n{\r\n\t/**\r\n\t * typeof true\r\n\t * @type {string}\r\n\t */\r\n\texport const BOOLEAN:string = _BOOLEAN;\r\n\r\n\t/**\r\n\t * typeof 0\r\n\t * @type {string}\r\n\t */\r\n\texport const NUMBER:string = _NUMBER;\r\n\r\n\t/**\r\n\t * typeof \"\"\r\n\t * @type {string}\r\n\t */\r\n\texport const STRING:string = _STRING;\r\n\r\n\t/**\r\n\t * typeof {}\r\n\t * @type {string}\r\n\t */\r\n\texport const OBJECT:string = _OBJECT;\r\n\r\n\r\n\t/**\r\n\t * typeof undefined\r\n\t * @type {string}\r\n\t */\r\n\texport const UNDEFINED:string = _UNDEFINED;\r\n\r\n\t/**\r\n\t * typeof function\r\n\t * @type {string}\r\n\t */\r\n\texport const FUNCTION:string = _FUNCTION;\r\n\r\n\t/**\r\n\t * Returns true if the value parameter is a boolean.\r\n\t * @param value\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function isBoolean(value:any):value is boolean\r\n\t{\r\n\t\treturn typeof value===_BOOLEAN;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the value parameter is a number.\r\n\t * @param value\r\n\t * @param allowNaN Default is true.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function isNumber(value:any, allowNaN?:boolean):value is number\r\n\t{\r\n\t\tif(allowNaN===VOID0) allowNaN = true;\r\n\t\treturn typeof value===_NUMBER && (allowNaN || !isNaN(value));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if is a number and is NaN.\r\n\t * @param value\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function isTrueNaN(value:any):value is number\r\n\t{\r\n\t\treturn typeof value===_NUMBER && isNaN(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the value parameter is a string.\r\n\t * @param value\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function isString(value:any):value is string\r\n\t{\r\n\t\treturn typeof value===_STRING;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the value is a boolean, string, number, null, or undefined.\r\n\t * @param value\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function isPrimitive(value:any):value is Primitive\r\n\t{\r\n\t\tvar t = typeof value;\r\n\t\tswitch(t)\r\n\t\t{\r\n\t\t\tcase _BOOLEAN:\r\n\t\t\tcase _STRING:\r\n\t\t\tcase _NUMBER:\r\n\t\t\tcase _UNDEFINED:\r\n\t\t\t\treturn true;\r\n\t\t\tcase _OBJECT:\r\n\t\t\t\treturn value===null;\r\n\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the value parameter is a function.\r\n\t * @param value\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function isFunction(value:any):value is Function\r\n\t{\r\n\t\treturn typeof value===_FUNCTION;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the value parameter is an object.\r\n\t * @param value\r\n\t * @param allowNull If false (default) null is not considered an object.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function isObject(value:any, allowNull:boolean = false):boolean\r\n\t{\r\n\t\treturn typeof value===_OBJECT && (allowNull || value!==null);\r\n\t}\r\n\r\n\t/**\r\n\t * Guarantees a number value or NaN instead.\r\n\t * @param value\r\n\t * @returns {number}\r\n\t */\r\n\texport function numberOrNaN(value:any):number\r\n\t{\r\n\t\treturn isNaN(value) ? NaN : value;\r\n\t}\r\n\r\n\texport function of(target:any):TypeInfo\r\n\t{\r\n\t\treturn TypeInfo.getFor(target);\r\n\t}\r\n\r\n\texport function hasMember(value:any, property:string):boolean\r\n\t{\r\n\t\treturn value && !isPrimitive(value) && (property) in (value);\r\n\t}\r\n\r\n\texport function hasMemberOfType<T>(instance:any, property:string, type:string):instance is T\r\n\t{\r\n\t\treturn hasMember(instance, property) && typeof(instance[property])===type;\r\n\t}\r\n\r\n\texport function isArrayLike<T>(instance:any):instance is IArray<T>\r\n\t{\r\n\t\t/*\r\n\t\t * NOTE:\r\n\t\t *\r\n\t\t * Functions:\r\n\t\t * Enumerating a function although it has a .length property will yield nothing or unexpected results.\r\n\t\t * Effectively, a function is not like an array.\r\n\t\t *\r\n\t\t * Strings:\r\n\t\t * Behave like arrays but don't have the same exact methods.\r\n\t\t */\r\n\t\treturn instance instanceof Array\r\n\t\t\t|| Type.isString(instance)\r\n\t\t\t|| !Type.isFunction(instance) && hasMember(instance, LENGTH);\r\n\t}\r\n}\r\n\r\nObject.freeze(Type);\r\n\r\nexport default Type;\r\n\r\n"]}