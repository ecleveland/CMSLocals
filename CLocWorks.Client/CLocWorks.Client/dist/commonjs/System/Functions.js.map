{"version":3,"sources":["System/Functions.js","System/Functions.ts"],"names":[],"mappings":";;;;AAIA;;;;;;ICIA;;;;;;;iCAOa,GAAG;AACb,mBAAO,CAAP,CADa;;;;+BAOX;AACF,mBAAO,IAAP,CADE;;;;gCAOC;AACH,mBAAO,KAAP,CADG;;;;gCAMA;;;WA3BN;;;AAAa,QAAA,SAAA,GAAS,SAAT;AA+Bb,IAAM,gBAA0B,IAAI,SAAJ,EAA1B;AAIN,CAAA,UAAc,SAAd,EACA;AAKc,cAAA,QAAA,GACV,cAAc,QAAd,CANJ;AAYc,cAAA,IAAA,GACV,cAAc,IAAd,CAbJ;AAmBc,cAAA,KAAA,GACV,cAAc,KAAd,CApBJ;AAyBc,cAAA,KAAA,GACV,cAAc,KAAd,CA1BJ;CADA,CAAA,CAAc,YAAA,QAAA,SAAA,KAAA,QAAA,SAAA,GAAS,EAAT,CAAA,CAAd;AA+BA,OAAO,MAAP,CAAc,SAAd;AAEA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADvDA,QAAQ,OAAR,GCuDe,SDvDf","file":"System/Functions.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nclass Functions {\n    Identity(x) { return x; }\n    True() { return true; }\n    False() { return false; }\n    Blank() { }\n}\nexports.Functions = Functions;\nconst rootFunctions = new Functions();\n(function (Functions) {\n    Functions.Identity = rootFunctions.Identity;\n    Functions.True = rootFunctions.True;\n    Functions.False = rootFunctions.False;\n    Functions.Blank = rootFunctions.Blank;\n})(Functions = exports.Functions || (exports.Functions = {}));\nObject.freeze(Functions);\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Functions;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n/**\r\n * Can be used statically or extended for varying different reusable function signatures.\r\n */\r\nexport class Functions\r\n{\r\n\r\n\t/**\r\n\t * A typed method for use with simple selection of the parameter.\r\n\t * @returns {T}\r\n\t */\r\n\tIdentity<T>(x:T):T\r\n\t{ return x; }\r\n\r\n\t/**\r\n\t * Returns true.\r\n\t * @returns {boolean}\r\n\t */\r\n\tTrue():boolean\r\n\t{ return true; }\r\n\r\n\t/**\r\n\t * Returns false.\r\n\t * @returns {boolean}\r\n\t */\r\n\tFalse():boolean\r\n\t{ return false; }\r\n\r\n\t/**\r\n\t * Does nothing.\r\n\t */\r\n\tBlank():void\r\n\t{ }\r\n}\r\n\r\nconst rootFunctions:Functions = new Functions();\r\n\r\n// Expose static versions.\r\n\r\nexport module Functions\r\n{\r\n\t/**\r\n\t * A typed method for use with simple selection of the parameter.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport const Identity:<T>(x:T) => T\r\n\t\t= rootFunctions.Identity;\r\n\r\n\t/**\r\n\t * Returns false.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport const True:() => boolean\r\n\t\t= rootFunctions.True;\r\n\r\n\t/**\r\n\t * Returns false.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport const False:() => boolean\r\n\t\t= rootFunctions.False;\r\n\r\n\t/**\r\n\t * Does nothing.\r\n\t */\r\n\texport const Blank:() => void\r\n\t\t= rootFunctions.Blank;\r\n}\r\n\r\n// Make this read only.  Should still allow for sub-classing since extra methods are added to prototype.\r\nObject.freeze(Functions);\r\n\r\nexport default Functions;\r\n\r\n"]}