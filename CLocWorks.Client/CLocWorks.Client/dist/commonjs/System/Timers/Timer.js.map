{"version":3,"sources":["System/Timers/Timer.js","System/Timers/Timer.ts"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;ACGA,IAAA,mBAAA,QAA6B,8BAA7B,CAAA;;IAGA;;;AAMC,aAND,KAMC,CACS,SADT,EAGkC;YADzB,kEAAmB,wBACM;;YAAzB,sEAAgB,yBAAS;;8BATnC,OASmC;;2EATnC,mBASmC;;AAFzB,cAAA,SAAA,GAAA,SAAA,CAEyB;AADzB,cAAA,SAAA,GAAA,SAAA,CACyB;AAAzB,cAAA,aAAA,GAAA,aAAA,CAAyB;AAL1B,cAAA,MAAA,GAAgB,CAAhB,CAK0B;AAIjC,YAAG,cAAY,IAAZ,IAAoB,cAAa,KAAK,CAAL,EACnC,MAAM,oCAAN,CADD;AAEA,YAAG,YAAU,CAAV,EACF,MAAM,gCAAN,CADD;qBANiC;KAHlC;;iBAND;;gCAuCM;AAEJ,gBAAI,IAAI,IAAJ,CAFA;AAGJ,gBAAG,CAAC,EAAE,OAAF,IAAa,EAAE,MAAF,GAAS,EAAE,SAAF,EAC1B;AAEC,oBAAG,EAAE,MAAF,IAAY,EAAE,aAAF,IAAiB,EAAE,SAAF,EAChC;;AACC,4BAAI,IAAI,YACP,MAAM,OAAN,EACA,EAAE,SAAF,EACA,CAHO,CAAJ;AAKJ,0BAAE,OAAF,GAAY,YAAA;AAEX,0CAAc,CAAd,EAFW;yBAAA;yBANb;iBADA,MAaA;;AACC,4BAAI,IAAI,WACP,MAAM,OAAN,EACA,EAAE,aAAF,EACA,CAHO,EAGJ,IAHI,CAAJ;AAKJ,0BAAE,OAAF,GAAY,YAAA;AAEX,yCAAa,CAAb,EAFW;yBAAA;yBANb;iBAbA;aAHD;;;;+BA+BG;AAEH,iBAAK,MAAL,GAFG;;;;gCAKC;AAEJ,iBAAK,IAAL,GAFI;AAGJ,iBAAK,MAAL,GAAc,CAAd,CAHI;;;;iCAMC;AAEL,gBAAG,KAAK,OAAL,EACH;AACC,qBAAK,OAAL,GADD;AAEC,qBAAK,OAAL,GAAe,IAAf,CAFD;AAGC,uBAAO,IAAP,CAHD;aADA;AAMA,mBAAO,KAAP,CARK;;;;kCAWC;AAEN,iBAAK,MAAL,GAFM;AAGN,uCAlGF,6CAkGE,CAHM;;;;4BAlEM;AAEZ,mBAAO,CAAC,CAAC,KAAK,OAAL,CAFG;;;;4BAKJ;AAER,mBAAO,KAAK,MAAL,CAFC;;;;iCAdR,qBAEyC;gBADzC,iEAAkB,wBACuB;gBAAzC,qEAAsB,mCAAmB;;AAEzC,gBAAI,IAAI,IAAI,KAAJ,CAAU,mBAAV,EAA+B,QAA/B,EAAyC,mBAAzC,CAAJ,CAFqC;AAGzC,cAAE,KAAF,GAHyC;AAIzC,mBAAO,CAAP,CAJyC;;;;gCAiFzC,OACA,aAAoB;AAEpB,gBAAI,QAAa,MAAM,MAAN,EAAb;gBACA,MAAa,MAAM,SAAN;gBACb,aAAa,MAAM,MAAN,IAAc,GAAd,CAJG;AAMpB,gBAAG,WAAH,EACA;AACC,sBAAM,MAAN,GADD;AAEC,sBAAM,KAAN,GAFD;aADA;AAMA,gBAAG,UAAH,EACA;AACC,sBAAM,IAAN,GADD;aADA;AAKA,gBAAG,QAAM,GAAN,EACH;AACC,sBAAM,OAAN,CAAc,KAAd,EADD;aADA;AAKA,gBAAG,UAAH,EACA;AACC,sBAAM,YAAN,GADD;aADA;;;;WA9HF;EAAmC,iBAAA,cAAA;;AAAnC,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADyEA,QAAQ,OAAR,GAAkB,KAAlB","file":"System/Timers/Timer.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst ObservableBase_1 = require(\"../Observable/ObservableBase\");\nclass Timer extends ObservableBase_1.ObservableBase {\n    constructor(_interval, _maxCount = Infinity, _initialDelay = _interval) {\n        super();\n        this._interval = _interval;\n        this._maxCount = _maxCount;\n        this._initialDelay = _initialDelay;\n        this._count = 0;\n        if (_interval === null || _interval === void (0))\n            throw \"'interval' must be a valid number.\";\n        if (_interval < 0)\n            throw \"'interval' cannot be negative.\";\n    }\n    static startNew(millisecondInterval, maxCount = Infinity, initialDelay = millisecondInterval) {\n        var t = new Timer(millisecondInterval, maxCount, millisecondInterval);\n        t.start();\n        return t;\n    }\n    get isRunning() {\n        return !!this._cancel;\n    }\n    get count() {\n        return this._count;\n    }\n    start() {\n        var _ = this;\n        if (!_._cancel && _._count < _._maxCount) {\n            if (_._count || _._initialDelay == _._interval) {\n                let i = setInterval(Timer._onTick, _._interval, _);\n                _._cancel = () => {\n                    clearInterval(i);\n                };\n            }\n            else {\n                let i = setTimeout(Timer._onTick, _._initialDelay, _, true);\n                _._cancel = () => {\n                    clearTimeout(i);\n                };\n            }\n        }\n    }\n    stop() {\n        this.cancel();\n    }\n    reset() {\n        this.stop();\n        this._count = 0;\n    }\n    cancel() {\n        if (this._cancel) {\n            this._cancel();\n            this._cancel = null;\n            return true;\n        }\n        return false;\n    }\n    dispose() {\n        this.cancel();\n        super.dispose();\n    }\n    static _onTick(timer, reInitTimer) {\n        var index = timer._count++, max = timer._maxCount, isComplete = timer._count >= max;\n        if (reInitTimer) {\n            timer.cancel();\n            timer.start();\n        }\n        if (isComplete) {\n            timer.stop();\n        }\n        if (index < max) {\n            timer._onNext(index);\n        }\n        if (isComplete) {\n            timer._onCompleted();\n        }\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Timer;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {ICancellable} from \"../Threading/ICancellable\";\r\nimport {ObservableBase} from \"../Observable/ObservableBase\";\r\nimport {ITimer} from \"./ITimer\";\r\n\r\nexport default class Timer extends ObservableBase<number> implements ITimer, ICancellable\r\n{\r\n\r\n\tprivate _cancel:()=>void;\r\n\tprivate _count:number = 0;\r\n\r\n\tconstructor(\r\n\t\tprivate _interval:number,\r\n\t\tprivate _maxCount:number = Infinity,\r\n\t\tprivate _initialDelay = _interval)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(_interval===null || _interval=== void(0))\r\n\t\t\tthrow \"'interval' must be a valid number.\";\r\n\t\tif(_interval<0)\r\n\t\t\tthrow \"'interval' cannot be negative.\";\r\n\t}\r\n\r\n\tstatic startNew(\r\n\t\tmillisecondInterval:number,\r\n\t\tmaxCount:number = Infinity,\r\n\t\tinitialDelay:number = millisecondInterval):Timer\r\n\t{\r\n\t\tvar t = new Timer(millisecondInterval, maxCount, millisecondInterval);\r\n\t\tt.start();\r\n\t\treturn t;\r\n\t}\r\n\r\n\tget isRunning():boolean\r\n\t{\r\n\t\treturn !!this._cancel;\r\n\t}\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\tstart():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!_._cancel && _._count<_._maxCount)\r\n\t\t{\r\n\t\t\t// For now, if it's isn't the start...\r\n\t\t\tif(_._count || _._initialDelay==_._interval)\r\n\t\t\t{\r\n\t\t\t\tlet i = setInterval(\r\n\t\t\t\t\tTimer._onTick,\r\n\t\t\t\t\t_._interval,\r\n\t\t\t\t\t_);\r\n\r\n\t\t\t\t_._cancel = ()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tclearInterval(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlet i = setTimeout(\r\n\t\t\t\t\tTimer._onTick,\r\n\t\t\t\t\t_._initialDelay,\r\n\t\t\t\t\t_, true);\r\n\r\n\t\t\t\t_._cancel = ()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tclearTimeout(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstop():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tthis.stop();\r\n\t\tthis._count = 0;\r\n\t}\r\n\r\n\tcancel():boolean\r\n\t{\r\n\t\tif(this._cancel)\r\n\t\t{\r\n\t\t\tthis._cancel();\r\n\t\t\tthis._cancel = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t// We use a private static here so there's no need to create a handler every time.\r\n\tprivate static _onTick(\r\n\t\ttimer:Timer,\r\n\t\treInitTimer?:boolean):void\r\n\t{\r\n\t\tvar index      = timer._count++,\r\n\t\t    max        = timer._maxCount,\r\n\t\t    isComplete = timer._count>=max;\r\n\r\n\t\tif(reInitTimer)\r\n\t\t{\r\n\t\t\ttimer.cancel();\r\n\t\t\ttimer.start();\r\n\t\t}\r\n\r\n\t\tif(isComplete)\r\n\t\t{\r\n\t\t\ttimer.stop();\r\n\t\t}\r\n\r\n\t\tif(index<max)\r\n\t\t{\r\n\t\t\ttimer._onNext(index);\r\n\t\t}\r\n\r\n\t\tif(isComplete)\r\n\t\t{\r\n\t\t\ttimer._onCompleted();\r\n\t\t}\r\n\t}\r\n\r\n}"]}