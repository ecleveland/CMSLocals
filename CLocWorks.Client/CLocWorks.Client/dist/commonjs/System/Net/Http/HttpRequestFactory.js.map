{"version":3,"sources":["System/Net/Http/HttpRequestFactory.js","System/Net/Http/HttpRequestFactory.ts"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;ACGA,IAAA,0BAAA,QAAoC,wCAApC,CAAA;AACA,IAAA,mBAAA,QAA6B,iCAA7B,CAAA;AAEA,IAAA,eAAA,QAAqC,cAArC,CAAA;AACA,IAAA,QAAA,QAAkB,eAAlB,CAAA;;IAOA;;;AAKC,aALD,kBAKC,CACS,KADT,EAEC,WAFD,EAEyB;8BAP1B,oBAO0B;;2EAP1B,gCAO0B;;AADhB,cAAA,KAAA,GAAA,KAAA,CACgB;AAIxB,cAAK,qBAAL,GAA6B,oBAA7B,CAJwB;AAMxB,YAAG,CAAC,KAAD,EACF,MAAM,IAAI,wBAAA,qBAAA,CAAsB,OAA1B,CAAN,CADD;AAGA,cAAK,YAAL,GAAoB,MAAA,GAAA,CAAI,IAAJ,CAAS,WAAT,CAApB,CATwB;;KAFzB;;iBALD;;qCAmBqB;AAGnB,iBAAK,KAAL,GAAa,IAAb,CAHmB;AAInB,iBAAK,YAAL,GAAoB,IAApB,CAJmB;;;;4BAOhB,MAAe;AAGlB,gBAAI,IAAI,IAAJ,CAHc;AAIlB,cAAE,eAAF,GAJkB;AAKlB,gBAAI,IAAI,MAAA,GAAA,CAAI,IAAJ,CAAS,IAAT,EAAc,EAAE,YAAF,CAAlB,CALc;AAMlB,mBAAO,EAAE,YAAF,CAAe,MAAf,CAAsB,CAAtB,IACJ,CADI,GAEJ,IAAI,kBAAJ,CAAuB,EAAE,KAAF,EAAS,CAAhC,CAFI,CANW;;;;+BAWZ,SAA6B;AAEnC,gBAAI,IAAI,IAAJ,CAF+B;AAGnC,cAAE,eAAF,GAHmC;AAInC,mBAAO,EAAE,GAAF,CAAM,EAAE,YAAF,CAAe,WAAf,CAA2B,OAA3B,CAAN,CAAP,CAJmC;;;;gCAOnB,QAAwB,MAAS;AAEjD,gBAAI,IAAI,IAAJ,CAF6C;AAGjD,cAAE,eAAF,GAHiD;AAIjD,mBAAO,EAAE,KAAF,CAAQ,OAAR,CAAgB;AACtB,wBAAQ,MAAR;AACA,qBAAK,EAAE,YAAF;AACL,sBAAM,IAAN;aAHM,CAAP,CAJiD;;;;8BAY/C;AAEF,mBAAO,KAAK,OAAL,CAAsB,aAAA,GAAA,CAA7B,CAFE;;;;8BAKA;AAEF,mBAAO,KAAK,OAAL,CAAsB,aAAA,GAAA,CAA7B,CAFE;;;;6BAKW,MAAQ;AAErB,mBAAO,KAAK,OAAL,CAAsB,aAAA,IAAA,EAAM,IAA5B,CAAP,CAFqB;;;aAKtB;kCAAQ;AAEP,mBAAO,KAAK,OAAL,CAAsB,aAAA,MAAA,CAA7B,CAFO;;;;WAvET;EAAgD,iBAAA,cAAA;;AAAhD,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADwCA,QAAQ,OAAR,GAAkB,kBAAlB","file":"System/Net/Http/HttpRequestFactory.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst ArgumentNullException_1 = require(\"../../Exceptions/ArgumentNullException\");\nconst DisposableBase_1 = require(\"../../Disposable/DisposableBase\");\nconst HttpMethod_1 = require(\"./HttpMethod\");\nconst Uri_1 = require(\"../../Uri/Uri\");\nclass HttpRequestFactory extends DisposableBase_1.DisposableBase {\n    constructor(_http, uriDefaults) {\n        super();\n        this._http = _http;\n        this._disposableObjectName = 'HttpRequestFactory';\n        if (!_http)\n            throw new ArgumentNullException_1.ArgumentNullException('_http');\n        this._uriDefaults = Uri_1.Uri.from(uriDefaults);\n    }\n    _onDispose() {\n        this._http = null;\n        this._uriDefaults = null;\n    }\n    uri(uri) {\n        var _ = this;\n        _.throwIfDisposed();\n        var u = Uri_1.Uri.from(uri, _._uriDefaults);\n        return _._uriDefaults.equals(u)\n            ? _\n            : new HttpRequestFactory(_._http, u);\n    }\n    params(params) {\n        var _ = this;\n        _.throwIfDisposed();\n        return _.uri(_._uriDefaults.updateQuery(params));\n    }\n    request(method, data) {\n        var _ = this;\n        _.throwIfDisposed();\n        return _._http.request({\n            method: method,\n            uri: _._uriDefaults,\n            data: data\n        });\n    }\n    get() {\n        return this.request(HttpMethod_1.GET);\n    }\n    put() {\n        return this.request(HttpMethod_1.PUT);\n    }\n    post(data) {\n        return this.request(HttpMethod_1.POST, data);\n    }\n    'delete'() {\n        return this.request(HttpMethod_1.DELETE);\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = HttpRequestFactory;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport * as QueryParam from \"../../Uri/QueryParam\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {DisposableBase} from \"../../Disposable/DisposableBase\";\r\nimport {HttpMethodValue} from \"./HttpMethodValue\";\r\nimport {GET, PUT, POST, DELETE} from \"./HttpMethod\";\r\nimport {Uri} from \"../../Uri/Uri\";\r\nimport {IUri} from \"../../Uri/IUri\";\r\nimport {IHttpRequestAdapter} from \"./IHttpRequestAdapter\";\r\n\r\n/**\r\n * This class exposes a factory for making requests to prepared uri and params.\r\n */\r\nexport default class HttpRequestFactory extends DisposableBase\r\n{\r\n\r\n\tprotected _uriDefaults:Uri;\r\n\r\n\tconstructor(\r\n\t\tprivate _http:IHttpRequestAdapter,\r\n\t\turiDefaults?:string|IUri)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._disposableObjectName = 'HttpRequestFactory';\r\n\r\n\t\tif(!_http)\r\n\t\t\tthrow new ArgumentNullException('_http');\r\n\r\n\t\tthis._uriDefaults = Uri.from(uriDefaults);\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\t// super._onDispose(); // Not required for first level inheritance.\r\n\t\tthis._http = null;\r\n\t\tthis._uriDefaults = null;\r\n\t}\r\n\r\n\turi(uri:string|IUri):HttpRequestFactory\r\n\t{\r\n\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tvar u = Uri.from(uri, _._uriDefaults);\r\n\t\treturn _._uriDefaults.equals(u)\r\n\t\t\t? _\r\n\t\t\t: new HttpRequestFactory(_._http, u);\r\n\t}\r\n\r\n\tparams(params:QueryParam.Convertible):HttpRequestFactory\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\treturn _.uri(_._uriDefaults.updateQuery(params));\r\n\t}\r\n\r\n\trequest<TResult>(method:HttpMethodValue, data?:any):PromiseLike<TResult>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\treturn _._http.request({\r\n\t\t\tmethod: method,\r\n\t\t\turi: _._uriDefaults,\r\n\t\t\tdata: data\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tget<TResult>():PromiseLike<TResult>\r\n\t{\r\n\t\treturn this.request<TResult>(GET);\r\n\t}\r\n\r\n\tput<TResult>():PromiseLike<TResult>\r\n\t{\r\n\t\treturn this.request<TResult>(PUT);\r\n\t}\r\n\r\n\tpost<TResult>(data:any):PromiseLike<TResult>\r\n\t{\r\n\t\treturn this.request<TResult>(POST, data);\r\n\t}\r\n\r\n\t'delete'<TResult>():PromiseLike<TResult>\r\n\t{\r\n\t\treturn this.request<TResult>(DELETE);\r\n\t}\r\n\r\n}\r\n"]}