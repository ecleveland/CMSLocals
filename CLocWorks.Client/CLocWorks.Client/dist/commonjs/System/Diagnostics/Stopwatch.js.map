{"version":3,"sources":["System/Diagnostics/Stopwatch.js","System/Diagnostics/Stopwatch.ts"],"names":[],"mappings":";;;;AAIA;;;;;;ACEA,IAAA,aAAA,QAAuB,kBAAvB,CAAA;AAGA,SAAA,yBAAA,GAAA;AAEC,WAAO,IAAK,IAAJ,EAAD,CAAa,OAAb,EAAP,CAFD;CAAA;;IAKA;AAkBC,aAlBD,SAkBC,GAAA;8BAlBD,WAkBC;;AAEC,aAAK,KAAL,GAFD;KAAA;;iBAlBD;;gCAqCM;AAEJ,gBAAI,IAAI,IAAJ,CAFA;AAGJ,gBAAG,CAAC,EAAE,UAAF,EACJ;AACC,kBAAE,eAAF,GAAoB,2BAApB,CADD;AAEC,kBAAE,UAAF,GAAe,IAAf,CAFD;aADA;;;;+BAOG;AAEH,gBAAI,IAAI,IAAJ,CAFD;AAGH,gBAAG,EAAE,UAAF,EACH;AACC,kBAAE,QAAF,IAAc,EAAE,sBAAF,CADf;AAEC,kBAAE,UAAF,GAAe,KAAf,CAFD;aADA;;;;gCAOI;AAEJ,gBAAI,IAAI,IAAJ,CAFA;AAGJ,cAAE,QAAF,GAAa,CAAb,CAHI;AAIJ,cAAE,UAAF,GAAe,KAAf,CAJI;AAKJ,cAAE,eAAF,GAAoB,GAApB,CALI;;;;8BAUF;AAEF,gBAAI,IAAI,IAAJ,CAFF;AAGF,gBAAG,EAAE,UAAF,EACH;AACC,oBAAI,IAAI,2BAAJ,CADL;AAEC,oBAAI,IAAI,EAAE,eAAF,CAFT;AAGC,oBAAI,IAAI,IAAI,CAAJ,CAHT;AAIC,kBAAE,eAAF,GAAoB,CAApB,CAJD;AAKC,kBAAE,QAAF,IAAc,CAAd,CALD;AAMC,uBAAO,IAAI,WAAA,QAAA,CAAS,CAAb,CAAP,CAND;aADA,MAUC,OAAO,WAAA,QAAA,CAAS,IAAT,CAVR;;;;4BAzDY;AAEZ,mBAAO,KAAK,UAAL,CAFK;;;;4BAsEa;AAEzB,mBAAO,KAAK,UAAL,GACH,8BAA6B,KAAK,eAAL,GAC9B,CAFI,CAFkB;;;;4BAOZ;AAEb,mBAAO,KAAK,UAAL,GACJ,IAAI,WAAA,QAAA,CAAS,KAAK,sBAAL,CADT,GAEJ,WAAA,QAAA,CAAS,IAAT,CAJU;;;;4BAOS;AAEtB,gBAAI,IAAI,IAAJ,CAFkB;AAGtB,gBAAI,cAAc,EAAE,QAAF,CAHI;AAKtB,gBAAG,EAAE,UAAF,EACF,eAAe,EAAE,sBAAF,CADhB;AAGA,mBAAO,WAAP,CARsB;;;;4BAWZ;AAEV,mBAAO,IAAI,WAAA,QAAA,CAAS,KAAK,mBAAL,CAApB,CAFU;;;;mDAxGoB;AAE9B,mBAAO,2BAAP,CAF8B;;;;mCAmBhB;AAEd,gBAAI,IAAI,IAAI,SAAJ,EAAJ,CAFU;AAGd,cAAE,KAAF,GAHc;AAId,mBAAO,CAAP,CAJc;;;;gCAOA,SAAgB;AAE9B,gBAAI,QAAQ,2BAAR,CAF0B;AAG9B,sBAH8B;AAI9B,mBAAO,IAAI,WAAA,QAAA,CAAS,8BAA6B,KAA7B,CAApB,CAJ8B;;;;WA9BhC;;;AAAA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADsEA,QAAQ,OAAR,GAAkB,SAAlB","file":"System/Diagnostics/Stopwatch.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst TimeSpan_1 = require(\"../Time/TimeSpan\");\nfunction getTimestampMilliseconds() {\n    return (new Date()).getTime();\n}\nclass Stopwatch {\n    constructor() {\n        this.reset();\n    }\n    static getTimestampMilliseconds() {\n        return getTimestampMilliseconds();\n    }\n    get isRunning() {\n        return this._isRunning;\n    }\n    static startNew() {\n        var s = new Stopwatch();\n        s.start();\n        return s;\n    }\n    static measure(closure) {\n        var start = getTimestampMilliseconds();\n        closure();\n        return new TimeSpan_1.TimeSpan(getTimestampMilliseconds() - start);\n    }\n    start() {\n        var _ = this;\n        if (!_._isRunning) {\n            _._startTimeStamp = getTimestampMilliseconds();\n            _._isRunning = true;\n        }\n    }\n    stop() {\n        var _ = this;\n        if (_._isRunning) {\n            _._elapsed += _.currentLapMilliseconds;\n            _._isRunning = false;\n        }\n    }\n    reset() {\n        var _ = this;\n        _._elapsed = 0;\n        _._isRunning = false;\n        _._startTimeStamp = NaN;\n    }\n    lap() {\n        var _ = this;\n        if (_._isRunning) {\n            var t = getTimestampMilliseconds();\n            var s = _._startTimeStamp;\n            var e = t - s;\n            _._startTimeStamp = t;\n            _._elapsed += e;\n            return new TimeSpan_1.TimeSpan(e);\n        }\n        else\n            return TimeSpan_1.TimeSpan.zero;\n    }\n    get currentLapMilliseconds() {\n        return this._isRunning\n            ? (getTimestampMilliseconds() - this._startTimeStamp)\n            : 0;\n    }\n    get currentLap() {\n        return this._isRunning\n            ? new TimeSpan_1.TimeSpan(this.currentLapMilliseconds)\n            : TimeSpan_1.TimeSpan.zero;\n    }\n    get elapsedMilliseconds() {\n        var _ = this;\n        var timeElapsed = _._elapsed;\n        if (_._isRunning)\n            timeElapsed += _.currentLapMilliseconds;\n        return timeElapsed;\n    }\n    get elapsed() {\n        return new TimeSpan_1.TimeSpan(this.elapsedMilliseconds);\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Stopwatch;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {TimeSpan} from \"../Time/TimeSpan\";\r\nimport {ITimer} from \"../Timers/ITimer\";\r\n\r\nfunction getTimestampMilliseconds():number\r\n{\r\n\treturn (new Date()).getTime();\r\n}\r\n\r\nexport default\r\nclass Stopwatch implements ITimer\r\n{\r\n\r\n\tstatic getTimestampMilliseconds():number\r\n\t{\r\n\t\treturn getTimestampMilliseconds();\r\n\t}\r\n\r\n\tprivate _elapsed:number;\r\n\tprivate _startTimeStamp:number;\r\n\r\n\tprivate _isRunning:boolean;\r\n\tget isRunning():boolean\r\n\t{\r\n\t\treturn this._isRunning;\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tstatic startNew():Stopwatch\r\n\t{\r\n\t\tvar s = new Stopwatch();\r\n\t\ts.start();\r\n\t\treturn s;\r\n\t}\r\n\r\n\tstatic measure(closure:()=>void):TimeSpan\r\n\t{\r\n\t\tvar start = getTimestampMilliseconds();\r\n\t\tclosure();\r\n\t\treturn new TimeSpan(getTimestampMilliseconds() - start);\r\n\t}\r\n\r\n\tstart():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!_._isRunning)\r\n\t\t{\r\n\t\t\t_._startTimeStamp = getTimestampMilliseconds();\r\n\t\t\t_._isRunning = true;\r\n\t\t}\r\n\t}\r\n\r\n\tstop():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._isRunning)\r\n\t\t{\r\n\t\t\t_._elapsed += _.currentLapMilliseconds;\r\n\t\t\t_._isRunning = false;\r\n\t\t}\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._elapsed = 0;\r\n\t\t_._isRunning = false;\r\n\t\t_._startTimeStamp = NaN;\r\n\t}\r\n\r\n\t// Effectively calls a stop start and continues timing...\r\n\t// Can also be called to effectively start a lap before calling it again to get the elapsed lap time.\r\n\tlap():TimeSpan\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._isRunning)\r\n\t\t{\r\n\t\t\tvar t = getTimestampMilliseconds();\r\n\t\t\tvar s = _._startTimeStamp;\r\n\t\t\tvar e = t - s;\r\n\t\t\t_._startTimeStamp = t;\r\n\t\t\t_._elapsed += e;\r\n\t\t\treturn new TimeSpan(e);\r\n\t\t}\r\n\t\telse\r\n\t\t\treturn TimeSpan.zero;\r\n\t}\r\n\r\n\tget currentLapMilliseconds():number\r\n\t{\r\n\t\treturn this._isRunning\r\n\t\t\t? (getTimestampMilliseconds() - this._startTimeStamp)\r\n\t\t\t: 0;\r\n\t}\r\n\r\n\tget currentLap():TimeSpan\r\n\t{\r\n\t\treturn this._isRunning\r\n\t\t\t? new TimeSpan(this.currentLapMilliseconds)\r\n\t\t\t: TimeSpan.zero;\r\n\t}\r\n\r\n\tget elapsedMilliseconds():number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar timeElapsed = _._elapsed;\r\n\r\n\t\tif(_._isRunning)\r\n\t\t\ttimeElapsed += _.currentLapMilliseconds;\r\n\r\n\t\treturn timeElapsed;\r\n\t}\r\n\r\n\tget elapsed():TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.elapsedMilliseconds);\r\n\t}\r\n\r\n}\r\n"]}