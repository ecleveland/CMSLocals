{"version":3,"sources":["System/Promises/Promise.js","System/Promises/Promise.ts"],"names":[],"mappings":"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","file":"System/Promises/Promise.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT\n * Although most of the following code is written from scratch, it is\n * heavily influenced by Q (https://github.com/kriskowal/q) and uses some of Q's spec.\n */\n\"use strict\";\nconst Types_1 = require(\"../Types\");\nconst deferImmediate_1 = require(\"../Threading/deferImmediate\");\nconst DisposableBase_1 = require(\"../Disposable/DisposableBase\");\nconst InvalidOperationException_1 = require(\"../Exceptions/InvalidOperationException\");\nconst ArgumentException_1 = require(\"../Exceptions/ArgumentException\");\nconst ArgumentNullException_1 = require(\"../Exceptions/ArgumentNullException\");\nconst ObjectPool_1 = require(\"../Disposable/ObjectPool\");\nconst Set_1 = require(\"../Collections/Set\");\nconst defer_1 = require(\"../Threading/defer\");\nconst ObjectDisposedException_1 = require(\"../Disposable/ObjectDisposedException\");\nconst VOID0 = void 0, PROMISE = \"Promise\", PROMISE_STATE = PROMISE + \"State\", THEN = \"then\", TARGET = \"target\";\nfunction isPromise(value) {\n    return Types_1.default.hasMemberOfType(value, THEN, Types_1.default.FUNCTION);\n}\nfunction resolve(value, resolver, promiseFactory) {\n    let nextValue = resolver\n        ? resolver(value)\n        : value;\n    return nextValue && isPromise(nextValue)\n        ? Promise.wrap(nextValue)\n        : promiseFactory(nextValue);\n}\nfunction handleResolution(p, value, resolver) {\n    try {\n        let v = resolver ? resolver(value) : value;\n        if (p)\n            p.resolve(v);\n    }\n    catch (ex) {\n        p.reject(ex);\n    }\n}\nfunction handleResolutionMethods(targetFulfill, targetReject, value, resolver) {\n    try {\n        let v = resolver ? resolver(value) : value;\n        if (targetFulfill)\n            targetFulfill(v);\n    }\n    catch (ex) {\n        if (targetReject)\n            targetReject(ex);\n    }\n}\nfunction handleDispatch(p, onFulfilled, onRejected) {\n    if (p instanceof PromiseBase)\n        p.thenThis(onFulfilled, onRejected);\n    else\n        p.then(onFulfilled, onRejected);\n}\nfunction newODE() {\n    return new ObjectDisposedException_1.ObjectDisposedException(\"Promise\", \"An underlying promise-result was disposed.\");\n}\nclass PromiseState extends DisposableBase_1.DisposableBase {\n    constructor(_state, _result, _error) {\n        super();\n        this._state = _state;\n        this._result = _result;\n        this._error = _error;\n        this._disposableObjectName = PROMISE_STATE;\n    }\n    _onDispose() {\n        this._state = VOID0;\n        this._result = VOID0;\n        this._error = VOID0;\n    }\n    getState() {\n        return this._state;\n    }\n    get state() {\n        return this._state;\n    }\n    get isPending() {\n        return this.getState() === Promise.State.Pending;\n    }\n    get isSettled() {\n        return this.getState() != Promise.State.Pending;\n    }\n    get isFulfilled() {\n        return this.getState() === Promise.State.Fulfilled;\n    }\n    get isRejected() {\n        return this.getState() === Promise.State.Rejected;\n    }\n    getResult() {\n        return this._result;\n    }\n    get result() {\n        this.throwIfDisposed();\n        return this.getResult();\n    }\n    getError() {\n        return this._error;\n    }\n    get error() {\n        this.throwIfDisposed();\n        return this.getError();\n    }\n}\nexports.PromiseState = PromiseState;\nclass PromiseBase extends PromiseState {\n    constructor() {\n        super(Promise.State.Pending);\n        this._disposableObjectName = PROMISE;\n    }\n    then(onFulfilled, onRejected) {\n        return new Promise((resolve, reject) => {\n            this.thenThis(result => handleResolutionMethods(resolve, reject, result, onFulfilled), error => onRejected\n                ? handleResolutionMethods(resolve, null, error, onRejected)\n                : reject(error));\n        });\n    }\n    done(onFulfilled, onRejected) {\n        defer_1.defer(() => this.thenThis(onFulfilled, onRejected));\n    }\n    delayFromNow(milliseconds = 0) {\n        this.throwIfDisposed();\n        return new Promise((resolve, reject) => {\n            defer_1.defer(() => {\n                this.thenThis(v => resolve(v), e => reject(e));\n            }, milliseconds);\n        }, true);\n    }\n    delayAfterResolve(milliseconds = 0) {\n        this.throwIfDisposed();\n        if (this.isSettled)\n            return this.delayFromNow(milliseconds);\n        return new Promise((resolve, reject) => {\n            this.thenThis(v => defer_1.defer(() => resolve(v), milliseconds), e => defer_1.defer(() => reject(e), milliseconds));\n        }, true);\n    }\n    'catch'(onRejected) {\n        this.throwIfDisposed();\n        return this.then(VOID0, onRejected);\n    }\n    'finally'(fin) {\n        this.throwIfDisposed();\n        return this.then(fin, fin);\n    }\n    finallyThis(fin) {\n        this.throwIfDisposed();\n        var f = () => deferImmediate_1.deferImmediate(fin);\n        this.thenThis(f, f);\n        return this;\n    }\n}\nexports.PromiseBase = PromiseBase;\nclass Resolvable extends PromiseBase {\n    thenSynchronous(onFulfilled, onRejected) {\n        this.throwIfDisposed();\n        try {\n            switch (this.state) {\n                case Promise.State.Fulfilled:\n                    return onFulfilled\n                        ? resolve(this._result, onFulfilled, Promise.resolve)\n                        : this;\n                case Promise.State.Rejected:\n                    return onRejected\n                        ? resolve(this._error, onRejected, Promise.resolve)\n                        : this;\n            }\n        }\n        catch (ex) {\n            return new Rejected(ex);\n        }\n        throw new Error(\"Invalid state for a resolved promise.\");\n    }\n    thenThis(onFulfilled, onRejected) {\n        this.throwIfDisposed();\n        switch (this.state) {\n            case Promise.State.Fulfilled:\n                if (onFulfilled)\n                    onFulfilled(this._result);\n                break;\n            case Promise.State.Rejected:\n                if (onRejected)\n                    onRejected(this._error);\n                break;\n        }\n        return this;\n    }\n}\nexports.Resolvable = Resolvable;\nclass Resolved extends Resolvable {\n    constructor(state, result, error) {\n        super();\n        this._result = result;\n        this._error = error;\n        this._state = state;\n    }\n}\nexports.Resolved = Resolved;\nclass Fulfilled extends Resolved {\n    constructor(value) {\n        super(Promise.State.Fulfilled, value);\n    }\n}\nclass Rejected extends Resolved {\n    constructor(error) {\n        super(Promise.State.Rejected, VOID0, error);\n    }\n}\nclass PromiseWrapper extends Resolvable {\n    constructor(_target) {\n        super();\n        this._target = _target;\n        if (!_target)\n            throw new ArgumentNullException_1.ArgumentNullException(TARGET);\n        if (!isPromise(_target))\n            throw new ArgumentException_1.ArgumentException(TARGET, \"Must be a promise-like object.\");\n        _target.then(v => {\n            this._state = Promise.State.Fulfilled;\n            this._result = v;\n            this._error = VOID0;\n            this._target = VOID0;\n        }, e => {\n            this._state = Promise.State.Rejected;\n            this._error = e;\n            this._target = VOID0;\n        });\n    }\n    thenSynchronous(onFulfilled, onRejected) {\n        this.throwIfDisposed();\n        var t = this._target;\n        if (!t)\n            return super.thenSynchronous(onFulfilled, onRejected);\n        return new Promise((resolve, reject) => {\n            handleDispatch(t, result => handleResolutionMethods(resolve, reject, result, onFulfilled), error => onRejected\n                ? handleResolutionMethods(resolve, null, error, onRejected)\n                : reject(error));\n        }, true);\n    }\n    thenThis(onFulfilled, onRejected) {\n        this.throwIfDisposed();\n        var t = this._target;\n        if (!t)\n            return super.thenThis(onFulfilled, onRejected);\n        handleDispatch(t, onFulfilled, onRejected);\n        return this;\n    }\n    _onDispose() {\n        super._onDispose();\n        this._target = VOID0;\n    }\n}\nclass Promise extends Resolvable {\n    constructor(resolver, forceSynchronous = false) {\n        super();\n        if (resolver)\n            this.resolveUsing(resolver, forceSynchronous);\n    }\n    thenSynchronous(onFulfilled, onRejected) {\n        this.throwIfDisposed();\n        if (this._state)\n            return super.thenSynchronous(onFulfilled, onRejected);\n        var p = new Promise();\n        (this._waiting || (this._waiting = []))\n            .push(pools.PromiseCallbacks.init(onFulfilled, onRejected, p));\n        return p;\n    }\n    thenThis(onFulfilled, onRejected) {\n        this.throwIfDisposed();\n        if (this._state)\n            return super.thenThis(onFulfilled, onRejected);\n        (this._waiting || (this._waiting = []))\n            .push(pools.PromiseCallbacks.init(onFulfilled, onRejected));\n        return this;\n    }\n    _onDispose() {\n        super._onDispose();\n        this._resolvedCalled = VOID0;\n    }\n    resolveUsing(resolver, forceSynchronous = false, throwIfSettled = false) {\n        if (!resolver)\n            throw new ArgumentNullException_1.ArgumentNullException(\"resolver\");\n        if (this._resolvedCalled)\n            throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n        if (this.state)\n            throw new InvalidOperationException_1.InvalidOperationException(\"Already resolved: \" + Promise.State[this.state]);\n        this._resolvedCalled = true;\n        var state = 0;\n        var rejectHandler = (reason) => {\n            if (state) {\n                console.warn(state == -1\n                    ? \"Rejection called multiple times\"\n                    : \"Rejection called after fulfilled.\");\n            }\n            else {\n                state = -1;\n                this._resolvedCalled = false;\n                this.reject(reason);\n            }\n        };\n        var fulfillHandler = (v) => {\n            if (state) {\n                console.warn(state == 1\n                    ? \"Fulfill called multiple times\"\n                    : \"Fulfill called after rejection.\");\n            }\n            else {\n                state = 1;\n                this._resolvedCalled = false;\n                this.resolve(v);\n            }\n        };\n        if (forceSynchronous)\n            resolver(fulfillHandler, rejectHandler);\n        else\n            deferImmediate_1.deferImmediate(() => resolver(fulfillHandler, rejectHandler));\n    }\n    _emitDisposalRejection(p) {\n        var d = p.wasDisposed;\n        if (d)\n            this._rejectInternal(newODE());\n        return d;\n    }\n    _resolveInternal(result) {\n        if (this.wasDisposed)\n            return;\n        while (result instanceof PromiseBase) {\n            let r = result;\n            if (this._emitDisposalRejection(r))\n                return;\n            switch (r.state) {\n                case Promise.State.Pending:\n                    r.thenSynchronous(v => this._resolveInternal(v), e => this._rejectInternal(e));\n                    return;\n                case Promise.State.Rejected:\n                    this._rejectInternal(r.error);\n                    return;\n                case Promise.State.Fulfilled:\n                    result = r.result;\n                    break;\n            }\n        }\n        if (isPromise(result)) {\n            result.then(v => this._resolveInternal(v), e => this._rejectInternal(e));\n        }\n        else {\n            this._state = Promise.State.Fulfilled;\n            this._result = result;\n            this._error = VOID0;\n            var o = this._waiting;\n            if (o) {\n                this._waiting = VOID0;\n                for (let c of o) {\n                    let { onFulfilled, promise } = c, p = promise;\n                    pools.PromiseCallbacks.recycle(c);\n                    handleResolution(p, result, onFulfilled);\n                }\n                o.length = 0;\n            }\n        }\n    }\n    _rejectInternal(error) {\n        if (this.wasDisposed)\n            return;\n        this._state = Promise.State.Rejected;\n        this._error = error;\n        var o = this._waiting;\n        if (o) {\n            this._waiting = null;\n            for (let c of o) {\n                let { onRejected, promise } = c, p = promise;\n                pools.PromiseCallbacks.recycle(c);\n                if (onRejected)\n                    handleResolution(p, error, onRejected);\n                else\n                    p.reject(error);\n            }\n            o.length = 0;\n        }\n    }\n    resolve(result, throwIfSettled = false) {\n        this.throwIfDisposed();\n        if (result == this)\n            throw new InvalidOperationException_1.InvalidOperationException(\"Cannot resolve a promise as itself.\");\n        if (this._state) {\n            if (!throwIfSettled || this._state == Promise.State.Fulfilled && this._result === result)\n                return;\n            throw new InvalidOperationException_1.InvalidOperationException(\"Changing the fulfilled state/value of a promise is not supported.\");\n        }\n        if (this._resolvedCalled) {\n            if (throwIfSettled)\n                throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n            return;\n        }\n        this._resolveInternal(result);\n    }\n    reject(error, throwIfSettled = false) {\n        this.throwIfDisposed();\n        if (this._state) {\n            if (!throwIfSettled || this._state == Promise.State.Rejected && this._error === error)\n                return;\n            throw new InvalidOperationException_1.InvalidOperationException(\"Changing the rejected state/value of a promise is not supported.\");\n        }\n        if (this._resolvedCalled) {\n            if (throwIfSettled)\n                throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n            return;\n        }\n        this._rejectInternal(error);\n    }\n}\nexports.Promise = Promise;\nvar pools;\n(function (pools) {\n    var PromiseCallbacks;\n    (function (PromiseCallbacks) {\n        var pool;\n        function getPool() {\n            return pool\n                || (pool = new ObjectPool_1.ObjectPool(40, factory, c => {\n                    c.onFulfilled = null;\n                    c.onRejected = null;\n                    c.promise = null;\n                }));\n        }\n        function factory() {\n            return {\n                onFulfilled: null,\n                onRejected: null,\n                promise: null\n            };\n        }\n        function init(onFulfilled, onRejected, promise) {\n            var c = getPool().take();\n            c.onFulfilled = onFulfilled;\n            c.onRejected = onRejected;\n            c.promise = promise;\n            return c;\n        }\n        PromiseCallbacks.init = init;\n        function recycle(c) {\n            getPool().add(c);\n        }\n        PromiseCallbacks.recycle = recycle;\n    })(PromiseCallbacks = pools.PromiseCallbacks || (pools.PromiseCallbacks = {}));\n})(pools || (pools = {}));\n(function (Promise) {\n    (function (State) {\n        State[State[\"Pending\"] = 0] = \"Pending\";\n        State[State[\"Fulfilled\"] = 1] = \"Fulfilled\";\n        State[State[\"Rejected\"] = -1] = \"Rejected\";\n    })(Promise.State || (Promise.State = {}));\n    var State = Promise.State;\n    Object.freeze(State);\n    function all(first, ...rest) {\n        if (!first && !rest.length)\n            throw new ArgumentNullException_1.ArgumentNullException(\"promises\");\n        var promises = (Array.isArray(first) ? first : [first]).concat(rest);\n        if (!promises.length || promises.every(v => !v))\n            return new Fulfilled(promises);\n        return new Promise((resolve, reject) => {\n            let checkedAll = false;\n            let result = [];\n            let len = promises.length;\n            result.length = len;\n            let remaining = new Set_1.Set(promises.map((v, i) => i));\n            let cleanup = () => {\n                reject = null;\n                resolve = null;\n                promises.length = 0;\n                promises = null;\n                remaining.dispose();\n                remaining = null;\n            };\n            let checkIfShouldResolve = () => {\n                let r = resolve;\n                if (r && !remaining.count) {\n                    cleanup();\n                    r(result);\n                }\n            };\n            let onFulfill = (v, i) => {\n                if (resolve) {\n                    result[i] = v;\n                    remaining.remove(i);\n                    checkIfShouldResolve();\n                }\n            };\n            let onReject = (e) => {\n                let r = reject;\n                if (r) {\n                    cleanup();\n                    r(e);\n                }\n            };\n            for (let i = 0; remaining && i < len; i++) {\n                let p = promises[i];\n                if (p)\n                    p.then(v => onFulfill(v, i), onReject);\n                else\n                    remaining.remove(i);\n                checkIfShouldResolve();\n            }\n        });\n    }\n    Promise.all = all;\n    function waitAll(first, ...rest) {\n        if (!first && !rest.length)\n            throw new ArgumentNullException_1.ArgumentNullException(\"promises\");\n        var promises = (Array.isArray(first) ? first : [first]).concat(rest);\n        if (!promises.length || promises.every(v => !v))\n            return new Fulfilled(promises);\n        return new Promise((resolve, reject) => {\n            let checkedAll = false;\n            let len = promises.length;\n            let remaining = new Set_1.Set(promises.map((v, i) => i));\n            let cleanup = () => {\n                reject = null;\n                resolve = null;\n                remaining.dispose();\n                remaining = null;\n            };\n            let checkIfShouldResolve = () => {\n                let r = resolve;\n                if (r && !remaining.count) {\n                    cleanup();\n                    r(promises);\n                }\n            };\n            let onResolved = (i) => {\n                if (remaining) {\n                    remaining.remove(i);\n                    checkIfShouldResolve();\n                }\n            };\n            for (let i = 0; remaining && i < len; i++) {\n                let p = promises[i];\n                if (p)\n                    p.then(v => onResolved(i), e => onResolved(i));\n                else\n                    onResolved(i);\n            }\n        });\n    }\n    Promise.waitAll = waitAll;\n    function race(first, ...rest) {\n        var promises = first && (Array.isArray(first) ? first : [first]).concat(rest);\n        if (!promises || !promises.length || !(promises = promises.filter(v => v != null)).length)\n            throw new ArgumentException_1.ArgumentException(\"Nothing to wait for.\");\n        var len = promises.length;\n        if (len == 1)\n            return wrap(promises[0]);\n        for (let i = 0; i < len; i++) {\n            var p = promises[i];\n            if (p instanceof PromiseBase && p.isSettled)\n                return p;\n        }\n        return new Promise((resolve, reject) => {\n            let cleanup = () => {\n                reject = null;\n                resolve = null;\n                promises.length = 0;\n                promises = null;\n            };\n            let onResolve = (r, v) => {\n                if (r) {\n                    cleanup();\n                    r(v);\n                }\n            };\n            let onFulfill = (v) => onResolve(resolve, v);\n            let onReject = (e) => onResolve(reject, e);\n            for (let p of promises) {\n                if (!resolve)\n                    break;\n                p.then(onFulfill, onReject);\n            }\n        });\n    }\n    Promise.race = race;\n    function resolve(value) {\n        return isPromise(value) ? wrap(value) : new Fulfilled(value);\n    }\n    Promise.resolve = resolve;\n    function reject(reason) {\n        return new Rejected(reason);\n    }\n    Promise.reject = reject;\n    function wrap(target) {\n        if (!target)\n            throw new ArgumentNullException_1.ArgumentNullException(TARGET);\n        return target instanceof PromiseBase ? target : new PromiseWrapper(target);\n    }\n    Promise.wrap = wrap;\n    function createFrom(then) {\n        if (!then)\n            throw new ArgumentNullException_1.ArgumentNullException(THEN);\n        return new PromiseWrapper({ then: then });\n    }\n    Promise.createFrom = createFrom;\n})(Promise = exports.Promise || (exports.Promise = {}));\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n * Although most of the following code is written from scratch, it is\r\n * heavily influenced by Q (https://github.com/kriskowal/q) and uses some of Q's spec.\r\n */\r\n\r\n/*\r\n * Resources:\r\n * https://promisesaplus.com/\r\n * https://github.com/kriskowal/q\r\n */\r\n\r\nimport Type from \"../Types\";\r\nimport {deferImmediate} from \"../Threading/deferImmediate\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {ObjectPool} from \"../Disposable/ObjectPool\";\r\nimport {Set} from \"../Collections/Set\";\r\nimport {defer} from \"../Threading/defer\";\r\nimport {ObjectDisposedException} from \"../Disposable/ObjectDisposedException\";\r\n\r\n\r\nconst VOID0:any = void 0, PROMISE = \"Promise\", PROMISE_STATE = PROMISE + \"State\", THEN = \"then\", TARGET = \"target\";\r\n\r\nfunction isPromise<T>(value:any):value is PromiseLike<T>\r\n{\r\n\treturn Type.hasMemberOfType(value, THEN, Type.FUNCTION);\r\n}\r\n\r\nfunction resolve<T>(\r\n\tvalue:Promise.Resolution<T>, resolver:(v:Promise.Resolution<T>)=>any,\r\n\tpromiseFactory:(v:any)=>PromiseBase<any>):PromiseBase<any>\r\n{\r\n\tlet nextValue = resolver\r\n\t\t? resolver(value)\r\n\t\t: value;\r\n\r\n\treturn nextValue && isPromise(nextValue)\r\n\t\t? Promise.wrap(nextValue)\r\n\t\t: promiseFactory(nextValue);\r\n}\r\n\r\nfunction handleResolution(\r\n\tp:Promise<any>,\r\n\tvalue:Promise.Resolution<any>,\r\n\tresolver?:(v:Promise.Resolution<any>)=>any):void\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(p) p.resolve(v);\r\n\t}\r\n\tcatch(ex)\r\n\t{ p.reject(ex); }\r\n}\r\n\r\nfunction handleResolutionMethods(\r\n\ttargetFulfill:Promise.Fulfill<any,any>,\r\n\ttargetReject:Promise.Reject<any>,\r\n\tvalue:Promise.Resolution<any>,\r\n\tresolver?:(v:Promise.Resolution<any>)=>any):void\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(targetFulfill) targetFulfill(v);\r\n\t}\r\n\tcatch(ex)\r\n\t{ if(targetReject) targetReject(ex); }\r\n}\r\n\r\nfunction handleDispatch<T,TResult>(\r\n\tp:PromiseLike<T>,\r\n\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\tonRejected?:Promise.Reject<TResult>):void\r\n{\r\n\tif(p instanceof PromiseBase)\r\n\t\tp.thenThis(onFulfilled, onRejected);\r\n\telse\r\n\t\tp.then(<any>onFulfilled, onRejected);\r\n}\r\n\r\nfunction newODE()\r\n{\r\n\treturn new ObjectDisposedException(\"Promise\", \"An underlying promise-result was disposed.\");\r\n}\r\n\r\nexport class PromiseState<T>\r\nextends DisposableBase\r\n{\r\n\r\n\tconstructor(\r\n\t\tprotected _state:Promise.State,\r\n\t\tprotected _result?:T,\r\n\t\tprotected _error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = PROMISE_STATE;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis._state = VOID0;\r\n\t\tthis._result = VOID0;\r\n\t\tthis._error = VOID0;\r\n\t}\r\n\r\n\tprotected getState():Promise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget state():Promise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget isPending():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Pending;\r\n\t}\r\n\r\n\tget isSettled():boolean\r\n\t{\r\n\t\treturn this.getState()!=Promise.State.Pending; // Will also include undefined==0 aka disposed!=resolved.\r\n\t}\r\n\r\n\tget isFulfilled():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Fulfilled;\r\n\t}\r\n\r\n\tget isRejected():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Rejected;\r\n\t}\r\n\r\n\t/*\r\n\t * Providing overrides allows for special defer or lazy sub classes.\r\n\t */\r\n\tprotected getResult():T\r\n\t{\r\n\t\treturn this._result;\r\n\t}\r\n\r\n\tget result():T\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tprotected getError():any\r\n\t{\r\n\t\treturn this._error;\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getError();\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class PromiseBase<T>\r\nextends PromiseState<T> implements PromiseLike<T>\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(Promise.State.Pending);\r\n\t\tthis._disposableObjectName = PROMISE;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calls the respective handlers once the promise is resolved.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract thenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>;\r\n\r\n\t/**\r\n\t * Same as 'thenSynchronous' but does not return the result.  Returns the current promise instead.\r\n\t * You may not need an additional promise result, and this will not create a new one.\r\n\t * Errors are not trapped.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract thenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>;\r\n\r\n\r\n\t/**\r\n\t * Standard .then method that defers execution until resolved.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t * @returns {Promise}\r\n\t */\r\n\tthen<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn new Promise<TResult>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tthis.thenThis(\r\n\t\t\t\tresult=>handleResolutionMethods(resolve, reject, result, onFulfilled),\r\n\t\t\t\terror=>onRejected\r\n\t\t\t\t\t? handleResolutionMethods(resolve, null, error, onRejected)\r\n\t\t\t\t\t: reject(error)\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * .done is provided as a non-standard means that maps to similar functionality in other promise libraries.\r\n\t * As stated by promisejs.org: 'then' is to 'done' as 'map' is to 'forEach'.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tdone(\r\n\t\tonFulfilled:Promise.Fulfill<T,any>,\r\n\t\tonRejected?:Promise.Reject<any>):void\r\n\t{\r\n\t\tdefer(()=>this.thenThis(onFulfilled, onRejected));\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from the time called before continuing.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayFromNow(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new Promise<T>(\r\n\t\t\t(resolve, reject)=>\r\n\t\t\t{\r\n\t\t\t\tdefer(()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.thenThis(\r\n\t\t\t\t\t\tv=> resolve(v),\r\n\t\t\t\t\t\te=> reject(e));\r\n\t\t\t\t}, milliseconds)\r\n\t\t\t},\r\n\t\t\ttrue // Since the resolve/reject is deferred.\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from after this promise resolves.\r\n\t * If the promise is already resolved, the delay will start from now.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayAfterResolve(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(this.isSettled) return this.delayFromNow(milliseconds);\r\n\r\n\t\treturn new Promise<T>(\r\n\t\t\t(resolve, reject)=>\r\n\t\t\t{\r\n\t\t\t\tthis.thenThis(\r\n\t\t\t\t\tv=>defer(()=>resolve(v), milliseconds),\r\n\t\t\t\t\te=>defer(()=>reject(e), milliseconds))\r\n\t\t\t},\r\n\t\t\ttrue // Since the resolve/reject is deferred.\r\n\t\t);\r\n\t}\r\n\r\n\t'catch'<TResult>(onRejected:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.then(VOID0, onRejected)\r\n\t}\r\n\r\n\t'finally'<TResult>(fin:()=>Promise.Resolution<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.then(fin, fin);\r\n\t}\r\n\r\n\tfinallyThis(fin:()=>void):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tvar f = ()=>deferImmediate(fin);\r\n\t\tthis.thenThis(f, f);\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class Resolvable<T> extends PromiseBase<T>\r\n{\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tswitch(this.state)\r\n\t\t\t{\r\n\t\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\t\treturn onFulfilled\r\n\t\t\t\t\t\t? resolve(this._result, onFulfilled, Promise.resolve)\r\n\t\t\t\t\t\t: <any>this; // Provided for catch cases.\r\n\t\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\t\treturn onRejected\r\n\t\t\t\t\t\t? resolve(this._error, onRejected, Promise.resolve)\r\n\t\t\t\t\t\t: <any>this;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn new Rejected<any>(ex);\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"Invalid state for a resolved promise.\");\r\n\t}\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tswitch(this.state)\r\n\t\t{\r\n\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\tif(onFulfilled) onFulfilled(this._result);\r\n\t\t\t\tbreak;\r\n\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\tif(onRejected) onRejected(this._error);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * The simplest usable version of a promise which returns synchronously the resolved state provided.\r\n */\r\nexport abstract class Resolved<T> extends Resolvable<T>\r\n{\r\n\tconstructor(state:Promise.State, result:T, error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._result = result;\r\n\t\tthis._error = error;\r\n\t\tthis._state = state;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * A fulfilled Resolved<T>.  Provided for readability.\r\n */\r\nclass Fulfilled<T> extends Resolved<T>\r\n{\r\n\tconstructor(value?:T)\r\n\t{\r\n\t\tsuper(Promise.State.Fulfilled, value);\r\n\t}\r\n}\r\n\r\n/**\r\n * A rejected Resolved<T>.  Provided for readability.\r\n */\r\nclass Rejected<T> extends Resolved<T>\r\n{\r\n\tconstructor(error:any)\r\n\t{\r\n\t\tsuper(Promise.State.Rejected, VOID0, error);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Provided as a means for extending the interface of other PromiseLike<T> objects.\r\n */\r\nclass PromiseWrapper<T> extends Resolvable<T>\r\n{\r\n\tconstructor(private _target:PromiseLike<T>)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(!_target)\r\n\t\t\tthrow new ArgumentNullException(TARGET);\r\n\r\n\t\tif(!isPromise(_target))\r\n\t\t\tthrow new ArgumentException(TARGET, \"Must be a promise-like object.\");\r\n\r\n\t\t_target.then(\r\n\t\t\tv=>\r\n\t\t\t{\r\n\t\t\t\tthis._state = Promise.State.Fulfilled;\r\n\t\t\t\tthis._result = v;\r\n\t\t\t\tthis._error = VOID0;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t},\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tthis._state = Promise.State.Rejected;\r\n\t\t\t\tthis._error = e;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t})\r\n\t}\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar t = this._target;\r\n\t\tif(!t) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\treturn new Promise<TResult>((resolve, reject)=>\r\n\t\t{\r\n\t\t\thandleDispatch(t,\r\n\t\t\t\tresult=>handleResolutionMethods(resolve, reject, result, onFulfilled),\r\n\t\t\t\terror=>onRejected\r\n\t\t\t\t\t? handleResolutionMethods(resolve, null, error, onRejected)\r\n\t\t\t\t\t: reject(error)\r\n\t\t\t);\r\n\t\t}, true);\r\n\t}\r\n\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar t = this._target;\r\n\t\tif(!t) return super.thenThis(onFulfilled, onRejected);\r\n\t\thandleDispatch(t, onFulfilled, onRejected);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._target = VOID0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * This promise class that facilitates pending resolution.\r\n */\r\nexport class Promise<T> extends Resolvable<T>\r\n{\r\n\r\n\tprivate _waiting:IPromiseCallbacks<any>[];\r\n\r\n\t/*\r\n\t * A note about deferring:\r\n\t * The caller can set resolveImmediate to true if they intend to initialize code that will end up being deferred itself.\r\n\t * This eliminates the extra defer that will occur internally.\r\n\t * But for the most part, resolveImmediate = false (the default) will ensure the constructor will not block.\r\n\t *\r\n\t * resolveUsing allows for the same ability but does not defer by default: allowing the caller to take on the work load.\r\n\t * If calling resolve or reject and a deferred response is desired, then use deferImmediate with a closure to do so.\r\n\t */\r\n\r\n\tconstructor(\r\n\t\tresolver?:Promise.Executor<T>, forceSynchronous:boolean = false)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(resolver) this.resolveUsing(resolver, forceSynchronous);\r\n\t}\r\n\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\tvar p = new Promise<TResult>();\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected, p));\r\n\t\treturn p;\r\n\t}\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state) return super.thenThis(onFulfilled, onRejected);\r\n\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected));\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._resolvedCalled = VOID0;\r\n\t}\r\n\r\n\t// Protects against double calling.\r\n\tprotected _resolvedCalled:boolean;\r\n\r\n\tresolveUsing(\r\n\t\tresolver:Promise.Executor<T>,\r\n\t\tforceSynchronous:boolean = false,\r\n\t\tthrowIfSettled:boolean = false)\r\n\t{\r\n\t\tif(!resolver)\r\n\t\t\tthrow new ArgumentNullException(\"resolver\");\r\n\t\tif(this._resolvedCalled)\r\n\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\tif(this.state)\r\n\t\t\tthrow new InvalidOperationException(\"Already resolved: \" + Promise.State[this.state]);\r\n\r\n\t\tthis._resolvedCalled = true;\r\n\r\n\t\tvar state = 0;\r\n\t\tvar rejectHandler = (reason:any)=>\r\n\t\t{\r\n\t\t\tif(state)\r\n\t\t\t{\r\n\t\t\t\t// Someone else's promise handling down stream could double call this. :\\\r\n\t\t\t\tconsole.warn(state== -1\r\n\t\t\t\t\t? \"Rejection called multiple times\"\r\n\t\t\t\t\t: \"Rejection called after fulfilled.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstate = -1;\r\n\t\t\t\tthis._resolvedCalled = false;\r\n\t\t\t\tthis.reject(reason);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar fulfillHandler = (v:any)=>\r\n\t\t{\r\n\t\t\tif(state)\r\n\t\t\t{\r\n\t\t\t\t// Someone else's promise handling down stream could double call this. :\\\r\n\t\t\t\tconsole.warn(state==1\r\n\t\t\t\t\t? \"Fulfill called multiple times\"\r\n\t\t\t\t\t: \"Fulfill called after rejection.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstate = 1;\r\n\t\t\t\tthis._resolvedCalled = false;\r\n\t\t\t\tthis.resolve(v);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// There are some performance edge cases where there caller is not blocking upstream and does not need to defer.\r\n\t\tif(forceSynchronous)\r\n\t\t\tresolver(fulfillHandler, rejectHandler);\r\n\t\telse\r\n\t\t\tdeferImmediate(()=>resolver(fulfillHandler, rejectHandler));\r\n\r\n\t}\r\n\r\n\r\n\tprivate _emitDisposalRejection(p:PromiseBase<any>):boolean\r\n\t{\r\n\t\tvar d = p.wasDisposed;\r\n\t\tif(d) this._rejectInternal(newODE());\r\n\t\treturn d;\r\n\t}\r\n\r\n\tprivate _resolveInternal(result?:T|PromiseLike<T>):void\r\n\t{\r\n\t\tif(this.wasDisposed) return;\r\n\r\n\t\t// Note: Avoid recursion if possible.\r\n\r\n\t\t// Check ahead of time for resolution and resolve appropriately\r\n\t\twhile(result instanceof PromiseBase)\r\n\t\t{\r\n\t\t\tlet r:PromiseBase<T> = <any>result;\r\n\t\t\tif(this._emitDisposalRejection(r)) return;\r\n\t\t\tswitch(r.state)\r\n\t\t\t{\r\n\t\t\t\tcase Promise.State.Pending:\r\n\t\t\t\t\tr.thenSynchronous(\r\n\t\t\t\t\t\tv=>this._resolveInternal(v),\r\n\t\t\t\t\t\te=>this._rejectInternal(e)\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\t\tthis._rejectInternal(r.error);\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\t\tresult = r.result;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(isPromise(result))\r\n\t\t{\r\n\t\t\tresult.then(\r\n\t\t\t\tv=>this._resolveInternal(v),\r\n\t\t\t\te=>this._rejectInternal(e)\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._state = Promise.State.Fulfilled;\r\n\r\n\t\t\tthis._result = result;\r\n\t\t\tthis._error = VOID0;\r\n\t\t\tvar o = this._waiting;\r\n\t\t\tif(o)\r\n\t\t\t{\r\n\t\t\t\tthis._waiting = VOID0;\r\n\t\t\t\tfor(let c of o)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet {onFulfilled, promise} = c, p = (<Promise<T>>promise);\r\n\t\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\t\thandleResolution(p, result, onFulfilled);\r\n\t\t\t\t}\r\n\t\t\t\to.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _rejectInternal(error:any):void\r\n\t{\r\n\r\n\t\tif(this.wasDisposed) return;\r\n\r\n\t\tthis._state = Promise.State.Rejected;\r\n\r\n\t\tthis._error = error;\r\n\t\tvar o = this._waiting;\r\n\t\tif(o)\r\n\t\t{\r\n\t\t\tthis._waiting = null; // null = finished. undefined = hasn't started.\r\n\t\t\tfor(let c of o)\r\n\t\t\t{\r\n\t\t\t\tlet {onRejected, promise} = c, p = (<Promise<T>>promise);\r\n\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\tif(onRejected) handleResolution(p, error, onRejected);\r\n\t\t\t\telse p.reject(error);\r\n\t\t\t}\r\n\t\t\to.length = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tresolve(result?:T | PromiseLike<T>, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(<any>result==this)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot resolve a promise as itself.\");\r\n\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==Promise.State.Fulfilled && this._result===result) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the fulfilled state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._resolveInternal(result);\r\n\t}\r\n\r\n\r\n\treject(error:any, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==Promise.State.Rejected && this._error===error) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the rejected state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._rejectInternal(error);\r\n\t}\r\n}\r\n\r\n\r\nmodule pools\r\n{\r\n\r\n\t// export module pending\r\n\t// {\r\n\t//\r\n\t//\r\n\t// \tvar pool:ObjectPool<Promise<any>>;\r\n\t//\r\n\t// \tfunction getPool()\r\n\t// \t{\r\n\t// \t\treturn pool || (pool = new ObjectPool<Promise<any>>(40, factory, c=>c.dispose()));\r\n\t// \t}\r\n\t//\r\n\t// \tfunction factory():Promise<any>\r\n\t// \t{\r\n\t// \t\treturn new Promise();\r\n\t// \t}\r\n\t//\r\n\t// \texport function get():Promise<any>\r\n\t// \t{\r\n\t// \t\tvar p:any = getPool().take();\r\n\t// \t\tp.__wasDisposed = false;\r\n\t// \t\tp._state = Promise.State.Pending;\r\n\t// \t\treturn p;\r\n\t// \t}\r\n\t//\r\n\t// \texport function recycle<T>(c:Promise<T>):void\r\n\t// \t{\r\n\t// \t\tif(c) getPool().add(c);\r\n\t// \t}\r\n\t//\r\n\t// }\r\n\t//\r\n\t// export function recycle<T>(c:PromiseBase<T>):void\r\n\t// {\r\n\t// \tif(!c) return;\r\n\t// \tif(c instanceof Promise && c.constructor==Promise) pending.recycle(c);\r\n\t// \telse c.dispose();\r\n\t// }\r\n\r\n\r\n\texport module PromiseCallbacks\r\n\t{\r\n\r\n\t\tvar pool:ObjectPool<IPromiseCallbacks<any>>;\r\n\r\n\t\tfunction getPool()\r\n\t\t{\r\n\t\t\treturn pool\r\n\t\t\t\t|| (pool = new ObjectPool<IPromiseCallbacks<any>>(40, factory, c=>\r\n\t\t\t\t{\r\n\t\t\t\t\tc.onFulfilled = null;\r\n\t\t\t\t\tc.onRejected = null;\r\n\t\t\t\t\tc.promise = null;\r\n\t\t\t\t}));\r\n\t\t}\r\n\r\n\t\tfunction factory():IPromiseCallbacks<any>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tonFulfilled: null,\r\n\t\t\t\tonRejected: null,\r\n\t\t\t\tpromise: null\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\texport function init<T>(\r\n\t\t\tonFulfilled:Promise.Fulfill<T,any>,\r\n\t\t\tonRejected?:Promise.Reject<any>,\r\n\t\t\tpromise?:PromiseLike<any>):IPromiseCallbacks<T>\r\n\t\t{\r\n\r\n\t\t\tvar c = getPool().take();\r\n\t\t\tc.onFulfilled = onFulfilled;\r\n\t\t\tc.onRejected = onRejected;\r\n\t\t\tc.promise = promise;\r\n\t\t\treturn c;\r\n\t\t}\r\n\r\n\t\texport function recycle<T>(c:IPromiseCallbacks<T>):void\r\n\t\t{\r\n\t\t\tgetPool().add(c);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\nexport module Promise\r\n{\r\n\r\n\t/**\r\n\t * The state of a promise.\r\n\t * https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md\r\n\t * If a promise is disposed the value will be undefined which will also evaluate (promise.state)==false.\r\n\t */\r\n\texport enum State {\r\n\t\tPending   = 0,\r\n\t\tFulfilled = 1,\r\n\t\tRejected  = -1\r\n\t}\r\n\tObject.freeze(State);\r\n\r\n\texport type Resolution<TResult> = PromiseLike<TResult>|TResult|void;\r\n\r\n\texport interface Fulfill<T, TResult>\r\n\t{\r\n\t\t(value:T):Resolution<TResult>\r\n\t}\r\n\r\n\texport interface Reject<TResult>\r\n\t{\r\n\t\t(err?:any):Resolution<TResult>\r\n\t}\r\n\r\n\texport interface Then<T,TResult>\r\n\t{\r\n\t\t(\r\n\t\t\tonFulfilled:Fulfill<T,TResult>,\r\n\t\t\tonRejected?:Reject<TResult>):PromiseBase<TResult>\r\n\t}\r\n\r\n\texport interface Executor<T>\r\n\t{\r\n\t\t(\r\n\t\t\tresolve:(value?:T | PromiseLike<T>) => void,\r\n\t\t\treject:(reason?:any) => void):void;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, or is rejected with the same rejection reason as the first promise to be rejected.\r\n\t */\r\n\texport function all<T>(promises:PromiseLike<T>[]):PromiseBase<T[]>\r\n\texport function all<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):PromiseBase<T[]>\r\n\texport function all(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<any[]>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tvar promises = (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v=>!v)) return new Fulfilled<any[]>(promises); // it's a new empty, reuse it. :|\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\treturn new Promise<any[]>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet checkedAll = false;\r\n\t\t\tlet result:any[] = [];\r\n\t\t\tlet len = promises.length;\r\n\t\t\tresult.length = len;\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i)=>i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = null;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = ()=>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(result);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any, i:number)=>\r\n\t\t\t{\r\n\t\t\t\tif(resolve)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = v;\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onReject = (e?:any)=>\r\n\t\t\t{\r\n\t\t\t\tlet r = reject;\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(e);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v=>onFulfill(v, i), onReject);\r\n\t\t\t\telse remaining.remove(i);\r\n\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with array of provided promises when all provided promises have resolved (fulfill or reject).\r\n\t * Unlike .all this method waits for all rejections as well as fulfillment.\r\n\t */\r\n\texport function waitAll<T>(promises:PromiseLike<T>[]):PromiseBase<PromiseLike<T>[]>\r\n\texport function waitAll<T>(\r\n\t\tpromise:PromiseLike<T>,\r\n\t\t...rest:PromiseLike<T>[]):PromiseBase<PromiseLike<T>[]>\r\n\texport function waitAll(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<PromiseLike<any>[]>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tvar promises = (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v=>!v)) return new Fulfilled<any[]>(promises); // it's a new empty, reuse it. :|\r\n\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\treturn new Promise<any[]>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet checkedAll = false;\r\n\t\t\tlet len = promises.length;\r\n\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i)=>i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = ()=>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(promises);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolved = (i:number)=>\r\n\t\t\t{\r\n\t\t\t\tif(remaining)\r\n\t\t\t\t{\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v=>onResolved(i), e=>onResolved(i));\r\n\t\t\t\telse onResolved(i);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n\t * or rejected.\r\n\t * @param promises An array of Promises.\r\n\t * @returns A new Promise.\r\n\t */\r\n\texport function race<T>(promises:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<any>\r\n\t{\r\n\t\tvar promises = first && (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy?\r\n\t\tif(!promises || !promises.length || !(promises = promises.filter(v=>v!=null)).length)\r\n\t\t\tthrow new ArgumentException(\"Nothing to wait for.\");\r\n\r\n\t\tvar len = promises.length;\r\n\r\n\t\t// Only one?  Nothing to race.\r\n\t\tif(len==1) return wrap(promises[0]);\r\n\r\n\t\t// Look for already resolved promises and the first one wins.\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tvar p:any = promises[i];\r\n\t\t\tif(p instanceof PromiseBase && p.isSettled) return p;\r\n\t\t}\r\n\r\n\t\treturn new Promise((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolve = (r:(x:any)=>void, v:any)=>\r\n\t\t\t{\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(v);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any)=> onResolve(resolve, v);\r\n\t\t\tlet onReject = (e?:any)=> onResolve(reject, e);\r\n\r\n\t\t\tfor(let p of promises)\r\n\t\t\t{\r\n\t\t\t\tif(!resolve) break;\r\n\t\t\t\tp.then(onFulfill, onReject);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// // race<T>(values: Iterable<T | PromiseLike<T>>): Promise<T>;\r\n\r\n\t/**\r\n\t * Creates a new resolved promise .\r\n\t * @returns A resolved promise.\r\n\t */\r\n\texport function resolve():PromiseBase<void>\r\n\r\n\t/**\r\n\t * Creates a new resolved promise for the provided value.\r\n\t * @param value A value or promise.\r\n\t * @returns A promise whose internal state matches the provided promise.\r\n\t */\r\n\texport function resolve<T>(value:T | PromiseLike<T>):PromiseBase<T>;\r\n\texport function resolve(value?:any):PromiseBase<any>\r\n\t{\r\n\r\n\t\treturn isPromise(value) ? wrap(value) : new Fulfilled(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new rejected promise for the provided reason.\r\n\t * @param reason The reason the promise was rejected.\r\n\t * @returns A new rejected Promise.\r\n\t */\r\n\texport function reject<T>(reason:T):PromiseBase<T>\r\n\t{\r\n\t\treturn new Rejected<T>(reason);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes any Promise-Like object and ensures an extended version of it from this module.\r\n\t * @param target The Promise-Like object\r\n\t * @returns A new target that simply extends the target.\r\n\t */\r\n\texport function wrap<T>(target:PromiseLike<T>):PromiseBase<T>\r\n\t{\r\n\t\tif(!target) throw new ArgumentNullException(TARGET);\r\n\t\treturn target instanceof PromiseBase ? target : new PromiseWrapper(target);\r\n\t}\r\n\r\n\t/**\r\n\t * A function that acts like a 'then' method (aka then-able) can be extended by providing a function that takes an onFulfill and onReject.\r\n\t * @param then\r\n\t * @returns {PromiseWrapper<T>}\r\n\t */\r\n\texport function createFrom<T,TResult>(then:Then<T,TResult>):PromiseBase<T>\r\n\t{\r\n\t\tif(!then) throw new ArgumentNullException(THEN);\r\n\t\treturn new PromiseWrapper({then: then});\r\n\t}\r\n\r\n}\r\n\r\n\r\ninterface IPromiseCallbacks<T>\r\n{\r\n\tonFulfilled:Promise.Fulfill<T,any>;\r\n\tonRejected:Promise.Reject<any>;\r\n\tpromise?:PromiseLike<any>;\r\n}\r\n"]}