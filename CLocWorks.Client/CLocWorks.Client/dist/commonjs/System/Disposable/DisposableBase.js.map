{"version":3,"sources":["System/Disposable/DisposableBase.js","System/Disposable/DisposableBase.ts"],"names":[],"mappings":";;;;AAIA;;;;;;ACCA,IAAA,4BAAA,QAAsC,2BAAtC,CAAA;;IAGA;AAGC,aAHD,cAGC,CAAoB,WAApB,EAA2C;8BAH5C,gBAG4C;;AAAvB,aAAA,WAAA,GAAA,WAAA,CAAuB;AAInC,aAAA,aAAA,GAAwB,KAAxB,CAJmC;KAA3C;;iBAHD;;wCAkBE,SAC8C;gBAA9C,mEAAoB,KAAK,qBAAL,gBAA0B;;AAE9C,gBAAG,KAAK,aAAL,EACF,MAAM,IAAI,0BAAA,uBAAA,CAAwB,UAA5B,EAAwC,OAAxC,CAAN,CADD;AAEA,mBAAO,IAAP,CAJ8C;;;;kCAQxC;AAEN,gBAAI,IAAI,IAAJ,CAFE;AAGN,gBAAG,CAAC,EAAE,aAAF,EACJ;AAGC,kBAAE,aAAF,GAAkB,IAAlB,CAHD;AAIC,oBACA;AACC,sBAAE,UAAF,GADD;iBADA,SAKA;AACC,wBAAG,EAAE,WAAF,EACH;AACC,0BAAE,WAAF,GADD;AAEC,0BAAE,WAAF,GAAgB,KAAK,CAAL,CAFjB;qBADA;iBAND;aALD;;;;qCAqBmB;;;4BA1CL;AAEd,mBAAO,KAAK,aAAL,CAFO;;;;WAThB;;;AAAsB,QAAA,cAAA,GAAc,cAAd;AAuDtB,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADzBA,QAAQ,OAAR,GCyBe,cDzBf","file":"System/Disposable/DisposableBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst ObjectDisposedException_1 = require(\"./ObjectDisposedException\");\nclass DisposableBase {\n    constructor(__finalizer) {\n        this.__finalizer = __finalizer;\n        this.__wasDisposed = false;\n    }\n    get wasDisposed() {\n        return this.__wasDisposed;\n    }\n    throwIfDisposed(message, objectName = this._disposableObjectName) {\n        if (this.__wasDisposed)\n            throw new ObjectDisposedException_1.ObjectDisposedException(objectName, message);\n        return true;\n    }\n    dispose() {\n        var _ = this;\n        if (!_.__wasDisposed) {\n            _.__wasDisposed = true;\n            try {\n                _._onDispose();\n            }\n            finally {\n                if (_.__finalizer) {\n                    _.__finalizer();\n                    _.__finalizer = void 0;\n                }\n            }\n        }\n    }\n    _onDispose() { }\n}\nexports.DisposableBase = DisposableBase;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = DisposableBase;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ObjectDisposedException} from \"./ObjectDisposedException\";\r\nimport {IDisposableAware} from \"./IDisposableAware\";\r\n\r\nexport abstract class DisposableBase implements IDisposableAware\r\n{\r\n\r\n\tconstructor(private __finalizer?:() => void)\r\n\t{\r\n\t}\r\n\r\n\tprivate __wasDisposed:boolean = false;\r\n\r\n\tget wasDisposed():boolean\r\n\t{\r\n\t\treturn this.__wasDisposed;\r\n\t}\r\n\r\n\t// Allow for simple override of name.\r\n\tprotected _disposableObjectName:string;\r\n\r\n\tprotected throwIfDisposed(\r\n\t\tmessage?:string,\r\n\t\tobjectName:string = this._disposableObjectName):boolean\r\n\t{\r\n\t\tif(this.__wasDisposed)\r\n\t\t\tthrow new ObjectDisposedException(objectName, message);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!_.__wasDisposed)\r\n\t\t{\r\n\t\t\t// Preemptively set wasDisposed in order to prevent repeated disposing.\r\n\t\t\t// NOTE: in true multi-threaded scenarios, this needs to be synchronized.\r\n\t\t\t_.__wasDisposed = true;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_._onDispose(); // Protected override.\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tif(_.__finalizer) // Private finalizer...\r\n\t\t\t\t{\r\n\t\t\t\t\t_.__finalizer();\r\n\t\t\t\t\t_.__finalizer = void 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Placeholder for overrides.\r\n\tprotected _onDispose():void { }\r\n\r\n}\r\n\r\nexport default DisposableBase;"]}