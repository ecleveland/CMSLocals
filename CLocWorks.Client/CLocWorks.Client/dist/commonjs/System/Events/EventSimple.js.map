{"version":3,"sources":["System/Events/EventSimple.js","System/Events/EventSimple.ts"],"names":[],"mappings":";;;;;AAKA;;;;;;ICQA;AAAA,aAAA,WAAA,GAAA;8BAAA,aAAA;;AAES,aAAA,UAAA,GAAiB,EAAjB,CAFT;KAAA;;iBAAA;;4BAIK,UAAU;AAEb,iBAAK,UAAL,CAAgB,IAAhB,CAAqB,QAArB,EAFa;;;;+BAKP,UAAU;AAEhB,gBAAI,QAAQ,KAAK,UAAL,CAAgB,OAAhB,CAAwB,QAAxB,CAAR,CAFY;AAGhB,gBAAG,QAAM,CAAN,EAAS,OAAZ;AACA,iBAAK,UAAL,CAAgB,MAAhB,CAAuB,KAAvB,EAA8B,CAA9B,EAJgB;;;;mCAOO;AAEvB,gBAAI,YAAY,KAAK,UAAL,CAFO;;8CAAZ;;aAAY;;;;;;;AAGvB,qCAAa,mCAAb,oGACA;wBADQ,gBACR;;AACC,sBAAE,IAAF,CAAO,MAAP,EADD;iBADA;;;;;;;;;;;;;;aAHuB;;;;8CASL;AAElB,gBAAI,YAAY,KAAK,UAAL,CAFE;AAGlB,mBAAO,YAAA;;;;;;AAEN,0CAAa,oCAAb,wGACA;4BADQ,iBACR;;AACC,0BAAE,IAAF,CAAO,SAAP,EADD;qBADA;;;;;;;;;;;;;;iBAFM;aAAA,CAHW;;;;kCAYZ;AAEN,iBAAK,UAAL,CAAgB,MAAhB,GAAyB,CAAzB,CAFM;;;;WArCR;;;AAAA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADyBA,QAAQ,OAAR,GAAkB,WAAlB","file":"System/Events/EventSimple.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based on Netjs mscorlib.ts\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nclass EventSimple {\n    constructor() {\n        this._listeners = [];\n    }\n    add(listener) {\n        this._listeners.push(listener);\n    }\n    remove(listener) {\n        var index = this._listeners.indexOf(listener);\n        if (index < 0)\n            return;\n        this._listeners.splice(index, 1);\n    }\n    dispatch(...params) {\n        var listeners = this._listeners;\n        for (var f of listeners) {\n            f.call(params);\n        }\n    }\n    toMulticastFunction() {\n        var listeners = this._listeners;\n        return function () {\n            for (var f of listeners) {\n                f.call(arguments);\n            }\n        };\n    }\n    dispose() {\n        this._listeners.length = 0;\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = EventSimple;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based on Netjs mscorlib.ts\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\n\r\n/**\r\n * A simple event dispatcher provided as an alternative to built-in event.\r\n * If just dispatching a payload to a uniform set of functions, it may be better to just use the utilities in System/Collections/Array/Dispatch.\r\n */\r\nexport default class EventSimple<T extends Function> implements IDisposable\r\n{\r\n\tprivate _listeners:T[] = [];\r\n\r\n\tadd(listener:T):void\r\n\t{\r\n\t\tthis._listeners.push(listener);\r\n\t}\r\n\r\n\tremove(listener:T):void\r\n\t{\r\n\t\tvar index = this._listeners.indexOf(listener);\r\n\t\tif(index<0) return;\r\n\t\tthis._listeners.splice(index, 1);\r\n\t}\r\n\r\n\tdispatch(...params:any[]):void\r\n\t{\r\n\t\tvar listeners = this._listeners;\r\n\t\tfor(var f of listeners)\r\n\t\t{\r\n\t\t\tf.call(params);\r\n\t\t}\r\n\t}\r\n\r\n\ttoMulticastFunction():Function\r\n\t{\r\n\t\tvar listeners = this._listeners;\r\n\t\treturn function()\r\n\t\t{\r\n\t\t\tfor(var f of listeners)\r\n\t\t\t{\r\n\t\t\t\tf.call(arguments);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis._listeners.length = 0;\r\n\t}\r\n}"]}