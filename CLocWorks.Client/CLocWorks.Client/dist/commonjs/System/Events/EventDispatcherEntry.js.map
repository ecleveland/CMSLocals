{"version":3,"sources":["System/Events/EventDispatcherEntry.js","System/Events/EventDispatcherEntry.ts"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;ACCA,IAAA,UAAA,QAAmB,UAAnB,CAAA;AACA,IAAA,mBAAA,QAA6B,8BAA7B,CAAA;AACA,IAAA,0BAAA,QAAoC,qCAApC,CAAA;AACA,IAAA,sBAAA,QAAgC,iCAAhC,CAAA;AACA,IAAA,YAAA,QAA4B,YAA5B,CAAA;;IAIA;;;AAIC,aAJD,oBAIC,CACQ,IADR,EAEQ,QAFR,EAIsB;YADd,+DAAiB,oBACH;YAArB,yBAAqB;;8BARvB,sBAQuB;;2EARvB,iCAUQ,YAFe;;AAHd,cAAA,IAAA,GAAA,IAAA,CAGc;AAFd,cAAA,QAAA,GAAA,QAAA,CAEc;AADd,cAAA,MAAA,GAAA,MAAA,CACc;AAIrB,YAAG,CAAC,QAAD,EACF,MAAM,IAAI,wBAAA,qBAAA,CAAsB,UAA1B,CAAN,CADD;AAEA,YAAG,QAAA,IAAA,CAAK,QAAL,CAAc,QAAd,KAA2B,CAAC,QAAA,IAAA,CAAK,eAAL,CAAqB,QAArB,EAA+B,aAA/B,EAA8C,QAAA,IAAA,CAAK,QAAL,CAA/C,EAC7B,MAAM,IAAI,oBAAA,iBAAA,CAAkB,UAAtB,EAAkC,uEAAlC,CAAN,CADD;AAGA,YAAI,SAAJ,CATqB;AAUrB,UAAE,IAAF,GAAS,IAAT,CAVqB;AAWrB,UAAE,QAAF,GAAa,QAAb,CAXqB;AAYrB,UAAE,MAAF,GAAW,MAAX,CAZqB;AAarB,UAAE,qBAAF,GAA0B,sBAA1B,CAbqB;;KAJtB;;iBAJD;;qCAwBqB;AAEnB,uCA1BF,+DA0BE,CAFmB;AAGnB,iBAAK,QAAL,GAAgB,IAAhB,CAHmB;;;;iCAWX,GAAO;AAEf,gBAAI,IAAI,IAAJ,CAFW;AAGf,gBAAG,EAAE,WAAF,EAAe,OAAO,KAAP,CAAlB;AAEA,gBAAI,IAAI,EAAE,QAAF;gBAAY,IAAI,KAAK,EAAE,IAAF,IAAQ,EAAE,IAAF,CALtB;AAMf,gBAAG,CAAH,EACA;AACC,oBAAG,QAAA,IAAA,CAAK,UAAL,CAAgB,CAAhB,CAAH,EACO,EAAG,QAAH,CAAY,CAAZ,EADP,KAGuB,EAAG,WAAH,CAAe,CAAf,EAHvB;aAFD;AAOA,mBAAO,CAAP,CAbe;;;;gCAsBR,MAAa,UAAuB;AAE3C,gBAAI,IAAI,IAAJ,CAFuC;AAG3C,mBAAO,EAAE,IAAF,IAAQ,IAAR,IACH,EAAE,QAAF,IAAY,QAAZ,CAJuC;;;;+BAYrC,OAAmC;AAEzC,gBAAI,IAAI,IAAJ,CAFqC;AAGzC,mBAAO,EAAE,OAAF,CAAU,MAAM,IAAN,EAAY,MAAM,QAAN,CAAtB,IACH,UAAA,aAAA,CAAc,EAAE,MAAF,EAAU,MAAM,MAAN,EAAc,KAAtC,CADG,CAHkC;;;;WArE3C;EACQ,iBAAA,cAAA;;AADK,QAAA,oBAAA,GAAoB,oBAApB;AA6Eb,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADlCA,QAAQ,OAAR,GCkCe,oBDlCf","file":"System/Events/EventDispatcherEntry.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst Types_1 = require(\"../Types\");\nconst DisposableBase_1 = require(\"../Disposable/DisposableBase\");\nconst ArgumentNullException_1 = require(\"../Exceptions/ArgumentNullException\");\nconst ArgumentException_1 = require(\"../Exceptions/ArgumentException\");\nconst Compare_1 = require(\"../Compare\");\nclass EventDispatcherEntry extends DisposableBase_1.DisposableBase {\n    constructor(type, listener, params = null, finalizer) {\n        super(finalizer);\n        this.type = type;\n        this.listener = listener;\n        this.params = params;\n        if (!listener)\n            throw new ArgumentNullException_1.ArgumentNullException('listener');\n        if (Types_1.Type.isObject(listener) && !Types_1.Type.hasMemberOfType(listener, \"handleEvent\", Types_1.Type.FUNCTION))\n            throw new ArgumentException_1.ArgumentException('listener', \"is invalid type.  Must be a function or an object with 'handleEvent'.\");\n        var _ = this;\n        _.type = type;\n        _.listener = listener;\n        _.params = params;\n        _._disposableObjectName = \"EventDispatcherEntry\";\n    }\n    _onDispose() {\n        super._onDispose();\n        this.listener = null;\n    }\n    dispatch(e) {\n        var _ = this;\n        if (_.wasDisposed)\n            return false;\n        var l = _.listener, d = l && e.type == _.type;\n        if (d) {\n            if (Types_1.Type.isFunction(l))\n                _.listener(e);\n            else\n                l.handleEvent(e);\n        }\n        return d;\n    }\n    matches(type, listener) {\n        var _ = this;\n        return _.type == type\n            && _.listener == listener;\n    }\n    equals(other) {\n        var _ = this;\n        return _.matches(other.type, other.listener)\n            && Compare_1.areEquivalent(_.params, other.params, false);\n    }\n}\nexports.EventDispatcherEntry = EventDispatcherEntry;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = EventDispatcherEntry;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {areEquivalent} from \"../Compare\";\r\nimport {IEventListener} from \"./IEventListener\";\r\nimport {IEquatable} from \"../IEquatable\";\r\n\r\nexport class EventDispatcherEntry<TParams>\r\nextends DisposableBase implements IEquatable<EventDispatcherEntry<TParams>>\r\n{\r\n\r\n\tconstructor(\r\n\t\tpublic type:string,\r\n\t\tpublic listener:IEventListener,\r\n\t\tpublic params:TParams = null,\r\n\t\tfinalizer?:() => void)//, useWeakReference: boolean = false)\r\n\t{\r\n\t\tsuper(finalizer);\r\n\r\n\t\tif(!listener)\r\n\t\t\tthrow new ArgumentNullException('listener');\r\n\t\tif(Type.isObject(listener) && !Type.hasMemberOfType(listener, \"handleEvent\", Type.FUNCTION))\r\n\t\t\tthrow new ArgumentException('listener', \"is invalid type.  Must be a function or an object with 'handleEvent'.\");\r\n\r\n\t\tvar _ = this;\r\n\t\t_.type = type;\r\n\t\t_.listener = listener;\r\n\t\t_.params = params;\r\n\t\t_._disposableObjectName = \"EventDispatcherEntry\";\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.listener = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Safely dispatches an event if entry is not disposed and type matches.\r\n\t * @param e\r\n\t * @returns {IEventListener|boolean}\r\n\t */\r\n\tdispatch(e:Event):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_.wasDisposed) return false;\r\n\r\n\t\tvar l = _.listener, d = l && e.type==_.type;\r\n\t\tif(d)\r\n\t\t{\r\n\t\t\tif(Type.isFunction(l))\r\n\t\t\t\t(<any>_).listener(e); // Use 'this' to ensure call reference.\r\n\t\t\telse\r\n\t\t\t\t(<EventListenerObject>l).handleEvent(e);\r\n\t\t}\r\n\t\treturn d;\r\n\t}\r\n\r\n\t/**\r\n\t * Compares type and listener object only.\r\n\t * @param type\r\n\t * @param listener\r\n\t * @returns {boolean}\r\n\t */\r\n\tmatches(type:string, listener:IEventListener):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.type==type\r\n\t\t\t&& _.listener==listener;\r\n\t}\r\n\r\n\t/**\r\n\t * Compares type, listener, and priority.\r\n\t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:EventDispatcherEntry<TParams>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.matches(other.type, other.listener)\r\n\t\t\t&& areEquivalent(_.params, other.params, false);\r\n\t}\r\n}\r\n\r\nexport default EventDispatcherEntry;"]}