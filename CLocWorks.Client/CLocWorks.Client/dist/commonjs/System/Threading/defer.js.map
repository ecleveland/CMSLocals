{"version":3,"sources":["System/Threading/defer.js","System/Threading/defer.ts"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;ICIA;;;;;;;kCAOQ;AAEN,iBAAK,MAAL,GAFM;;;;WAPR;;;IAaA;;;AAIC,aAJD,KAIC,CAAY,IAAZ,EAA2B,KAA3B,EAA0C,OAA1C,EAAsD;8BAJvD,OAIuD;;2EAJvD,mBAIuD;;AAGrD,YAAG,EAAE,QAAM,CAAN,CAAF,EAAY,QAAQ,CAAR,CAAf;AACA,cAAK,GAAL,GAAW,WAAW,MAAM,OAAN,EAAe,KAA1B,EAAiC,IAAjC,SAA6C,OAA7C,CAAX,CAJqD;;KAAtD;;iBAJD;;iCAWO;AAEL,gBAAI,KAAK,KAAK,GAAL,CAFJ;AAGL,gBAAG,EAAH,EACA;AACC,6BAAa,EAAb,EADD;AAEC,qBAAK,GAAL,GAAW,IAAX,CAFD;AAGC,uBAAO,IAAP,CAHD;aADA;AAMA,mBAAO,KAAP,CATK;;;;gCAaiB,MAAe,GAAS,SAAY;AAE1D,cAAE,MAAF,GAF0D;AAG1D,iBAAK,OAAL,EAH0D;;;;WAxB5D;EAAoB;;IAgCpB;;;AAIC,aAJD,aAIC,CACC,IADD,EAEC,QAFD,EAGqC;YAA5B,mEAAoB,wBAAQ;;8BAPtC,eAOsC;;4EAPtC,2BAOsC;;AAA5B,eAAA,UAAA,GAAA,UAAA,CAA4B;AAGpC,YAAG,aAAW,IAAX,IAAmB,aAAY,KAAK,CAAL,EACjC,MAAM,oCAAN,CADD;AAEA,YAAG,WAAS,CAAT,EACF,MAAM,gCAAN,CADD;AAGA,eAAK,GAAL,GAAW,YAAY,cAAc,OAAd,EAAuB,QAAnC,EAA6C,IAA7C,SAAX,CARoC;;KAHrC;;iBAJD;;iCAkBO;AAEL,gBAAI,KAAK,KAAK,GAAL,CAFJ;AAGL,gBAAG,EAAH,EACA;AACC,8BAAc,EAAd,EADD;AAEC,qBAAK,GAAL,GAAW,IAAX,CAFD;AAGC,uBAAO,IAAP,CAHD;aADA;AAMA,mBAAO,KAAP,CATK;;;;gCAYiB,MAAe,GAAe;AAEpD,gBAAG,EAAE,EAAE,EAAE,UAAF,EAAe,EAAE,MAAF,GAAtB;AACA,mBAHoD;;;;WA9BtD;EAA4B;;AAgD5B,SAAA,KAAA,CACC,IADD,EAEC,KAFD,EAGC,OAHD,EAGa;AAEZ,WAAO,IAAI,KAAJ,CAAU,IAAV,EAAgB,KAAhB,EAAuB,OAAvB,CAAP,CAFY;CAHb;AAAgB,QAAA,KAAA,GAAK,KAAL;AAQhB,SAAA,QAAA,CACC,IADD,EAEC,QAFD,EAGwB;QAAvB,8DAAe,wBAAQ;;AAEvB,WAAO,IAAI,aAAJ,CAAkB,IAAlB,EAAwB,QAAxB,EAAkC,KAAlC,CAAP,CAFuB;CAHxB;AAAgB,QAAA,QAAA,GAAQ,QAAR;AAQhB,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADpDA,QAAQ,OAAR,GCoDe,KDpDf","file":"System/Threading/defer.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nclass DeferBase {\n    dispose() {\n        this.cancel();\n    }\n}\nclass Defer extends DeferBase {\n    constructor(task, delay, payload) {\n        super();\n        if (!(delay > 0))\n            delay = 0;\n        this._id = setTimeout(Defer.handler, delay, task, this, payload);\n    }\n    cancel() {\n        var id = this._id;\n        if (id) {\n            clearTimeout(id);\n            this._id = null;\n            return true;\n        }\n        return false;\n    }\n    static handler(task, d, payload) {\n        d.cancel();\n        task(payload);\n    }\n}\nclass DeferInterval extends DeferBase {\n    constructor(task, interval, _remaining = Infinity) {\n        super();\n        this._remaining = _remaining;\n        if (interval === null || interval === void (0))\n            throw \"'interval' must be a valid number.\";\n        if (interval < 0)\n            throw \"'interval' cannot be negative.\";\n        this._id = setInterval(DeferInterval.handler, interval, task, this);\n    }\n    cancel() {\n        var id = this._id;\n        if (id) {\n            clearInterval(id);\n            this._id = null;\n            return true;\n        }\n        return false;\n    }\n    static handler(task, d) {\n        if (!(--d._remaining))\n            d.cancel();\n        task();\n    }\n}\nfunction defer(task, delay, payload) {\n    return new Defer(task, delay, payload);\n}\nexports.defer = defer;\nfunction interval(task, interval, count = Infinity) {\n    return new DeferInterval(task, interval, count);\n}\nexports.interval = interval;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = defer;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {ICancellable} from \"./ICancellable\";\r\nimport {Closure, Func} from \"../FunctionTypes\";\r\nabstract class DeferBase implements ICancellable\r\n{\r\n\t// It may be a Timer in node, should not be restricted to number.\r\n\tprotected _id:any;\r\n\r\n\tabstract cancel():boolean;\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t}\r\n}\r\n\r\nclass Defer extends DeferBase\r\n{\r\n\r\n\r\n\tconstructor(task:Function, delay?:number, payload?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!(delay>0)) delay = 0; // covers undefined and null.\r\n\t\tthis._id = setTimeout(Defer.handler, delay, task, this, payload);\r\n\t}\r\n\r\n\tcancel():boolean\r\n\t{\r\n\t\tvar id = this._id;\r\n\t\tif(id)\r\n\t\t{\r\n\t\t\tclearTimeout(id);\r\n\t\t\tthis._id = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Use a static function here to avoid recreating a new function every time.\r\n\tprivate static handler(task:Function, d:Defer, payload?:any):void\r\n\t{\r\n\t\td.cancel();\r\n\t\ttask(payload);\r\n\t}\r\n\r\n}\r\n\r\nclass DeferInterval extends DeferBase\r\n{\r\n\r\n\r\n\tconstructor(\r\n\t\ttask:Function,\r\n\t\tinterval:number,\r\n\t\tprivate _remaining:number = Infinity)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(interval===null || interval=== void(0))\r\n\t\t\tthrow \"'interval' must be a valid number.\";\r\n\t\tif(interval<0)\r\n\t\t\tthrow \"'interval' cannot be negative.\";\r\n\r\n\t\tthis._id = setInterval(DeferInterval.handler, interval, task, this);\r\n\t}\r\n\r\n\tcancel():boolean\r\n\t{\r\n\t\tvar id = this._id;\r\n\t\tif(id)\r\n\t\t{\r\n\t\t\tclearInterval(id);\r\n\t\t\tthis._id = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate static handler(task:Function, d:DeferInterval):void\r\n\t{\r\n\t\tif(!(--d._remaining)) d.cancel();\r\n\t\ttask();\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport function defer(\r\n\ttask:Closure,\r\n\tdelay?:number):ICancellable;\r\n\r\nexport function defer<T>(\r\n\ttask:Func<T>,\r\n\tdelay?:number,\r\n\tpayload?:T):ICancellable\r\n\r\nexport function defer<T>(\r\n\ttask:Function,\r\n\tdelay?:number,\r\n\tpayload?:any):ICancellable\r\n{\r\n\treturn new Defer(task, delay, payload);\r\n}\r\n\r\nexport function interval(\r\n\ttask:Function,\r\n\tinterval:number,\r\n\tcount:number = Infinity):ICancellable\r\n{\r\n\treturn new DeferInterval(task, interval, count);\r\n}\r\n\r\nexport default defer;"]}