{"version":3,"sources":["System/Uri/QueryBuilder.js","System/Uri/QueryBuilder.ts"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;ACEA,IAAA,UAAA,QAAmB,UAAnB,CAAA;AACA,IAAA,+BAAA,QAAyC,wDAAzC,CAAA;AACA,IAAA,eAAA,QAAsC,uCAAtC,CAAA;AAGA,IAAY,cAAW,QAAM,eAAN,CAAX;;IAQZ;;;AAGC,aAHD,YAGC,CACC,KADD,EAE4B;YAA3B,qEAAuB,oBAAI;;8BAL7B,cAK6B;;2EAL7B,0BAK6B;;AAI3B,cAAK,WAAL,CAAiB,KAAjB,EAAwB,YAAxB,EAJ2B;;KAF5B;;iBAHD;;oCAqBE,OAC2B;gBAA3B,qEAAuB,oBAAI;;AAG3B,gBAAG,QAAA,IAAA,CAAK,QAAL,CAAc,KAAd,CAAH,EACA;AACC,qBAAK,gBAAL,CAA8B,KAA9B,EAAqC,YAArC,EADD;aADA,MAIK,IAAG,aAAA,uBAAA,CAAwB,KAAxB,CAAH,EACL;AACC,qBAAK,aAAL,CAAmB,KAAnB,EADD;aADK,MAKL;AACC,qBAAK,SAAL,CAAiC,KAAjC,EADD;aALK;AASL,mBAAO,IAAP,CAhB2B;;;;yCA2B3B,QAE2B;gBAD3B,oEAAsB,oBACK;gBAA3B,qEAAuB,oBAAI;;AAE3B,gBAAI,IAAI,IAAJ,CAFuB;AAG3B,wBAAY,KAAZ,CAAkB,MAAlB,EACC,UAAC,GAAD,EAAM,KAAN,EAAW;AAEV,oBAAG,EAAE,WAAF,CAAc,GAAd,CAAH,EACA;AACC,wBAAI,OAAO,EAAE,QAAF,CAAW,GAAX,CAAP,CADL;AAEC,wBAAG,MAAM,OAAN,CAAc,IAAd,CAAH,EACC,KAAK,IAAL,CAAU,KAAV,EADD,KAGC,EAAE,QAAF,CAAW,GAAX,EAAgB,CAAqB,IAArB,EAA2B,KAA3B,CAAhB,EAHD;iBAHD,MASC,EAAE,QAAF,CAAW,GAAX,EAAgB,KAAhB,EATD;aAFD,EAaA,WAdD,EAeC,YAfD,EAH2B;AAoB3B,mBAAO,IAAP,CApB2B;;;;+BA2BrB,kBAAyB;AAE/B,mBAAO,YAAY,MAAZ,CAAmB,IAAnB,EAAyB,gBAAzB,CAAP,CAF+B;;;;mCAKxB;AAEP,mBAAO,KAAK,MAAL,EAAP,CAFO;;;;6BArEP,OAC2B;gBAA3B,qEAAuB,oBAAI;;AAE3B,mBAAO,IAAI,YAAJ,CAAiB,KAAjB,EAAwB,YAAxB,CAAP,CAF2B;;;;WAf7B;EAAkC,6BAAA,0BAAA;;AAArB,QAAA,YAAA,GAAY,YAAZ;AAyFb,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADvDA,QAAQ,OAAR,GCuDe,YDvDf","file":"System/Uri/QueryBuilder.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst Types_1 = require(\"../Types\");\nconst OrderedStringKeyDictionary_1 = require(\"../Collections/Dictionaries/OrderedStringKeyDictionary\");\nconst Enumerator_1 = require(\"../Collections/Enumeration/Enumerator\");\nconst QueryParams = require(\"./QueryParams\");\nclass QueryBuilder extends OrderedStringKeyDictionary_1.OrderedStringKeyDictionary {\n    constructor(query, decodeValues = true) {\n        super();\n        this.importQuery(query, decodeValues);\n    }\n    static init(query, decodeValues = true) {\n        return new QueryBuilder(query, decodeValues);\n    }\n    importQuery(query, decodeValues = true) {\n        if (Types_1.Type.isString(query)) {\n            this.importFromString(query, decodeValues);\n        }\n        else if (Enumerator_1.isEnumerableOrArrayLike(query)) {\n            this.importEntries(query);\n        }\n        else {\n            this.importMap(query);\n        }\n        return this;\n    }\n    importFromString(values, deserialize = true, decodeValues = true) {\n        var _ = this;\n        QueryParams.parse(values, (key, value) => {\n            if (_.containsKey(key)) {\n                var prev = _.getValue(key);\n                if (Array.isArray(prev))\n                    prev.push(value);\n                else\n                    _.setValue(key, [prev, value]);\n            }\n            else\n                _.setValue(key, value);\n        }, deserialize, decodeValues);\n        return this;\n    }\n    encode(prefixIfNotEmpty) {\n        return QueryParams.encode(this, prefixIfNotEmpty);\n    }\n    toString() {\n        return this.encode();\n    }\n}\nexports.QueryBuilder = QueryBuilder;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = QueryBuilder;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {Type} from \"../Types\";\r\nimport {OrderedStringKeyDictionary} from \"../Collections/Dictionaries/OrderedStringKeyDictionary\";\r\nimport {isEnumerableOrArrayLike} from \"../Collections/Enumeration/Enumerator\";\r\nimport * as UriComponent from \"./UriComponent\";\r\nimport * as QueryParam from \"./QueryParam\";\r\nimport * as QueryParams from \"./QueryParams\";\r\n\r\n\r\n/**\r\n * Provides a means for parsing and building a set of parameters.\r\n *\r\n * In other languages, dictionaries are not reliable for retaining the order of stored values. So for certainty and flexibility we use an ordered dictionary as a base class.\r\n */\r\nexport class QueryBuilder extends OrderedStringKeyDictionary<UriComponent.Value|UriComponent.Value[]>\r\n{\r\n\r\n\tconstructor(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.importQuery(query, decodeValues);\r\n\t}\r\n\r\n\r\n\tstatic init(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\treturn new QueryBuilder(query, decodeValues);\r\n\t}\r\n\r\n\timportQuery(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\r\n\t\tif(Type.isString(query))\r\n\t\t{\r\n\t\t\tthis.importFromString(<string>query, decodeValues);\r\n\t\t}\r\n\t\telse if(isEnumerableOrArrayLike(query))\r\n\t\t{\r\n\t\t\tthis.importEntries(query);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.importMap(<UriComponent.Map>query);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Property parses the components of an URI into their values or array of values.\r\n\t * @param values\r\n\t * @param deserialize\r\n\t * @param decodeValues\r\n\t * @returns {QueryBuilder}\r\n\t */\r\n\timportFromString(\r\n\t\tvalues:string,\r\n\t\tdeserialize:boolean = true,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tQueryParams.parse(values,\r\n\t\t\t(key, value)=>\r\n\t\t\t{\r\n\t\t\t\tif(_.containsKey(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tvar prev = _.getValue(key);\r\n\t\t\t\t\tif(Array.isArray(prev))\r\n\t\t\t\t\t\tprev.push(value);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_.setValue(key, [<UriComponent.Value>prev, value]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\t_.setValue(key, value);\r\n\t\t\t},\r\n\t\t\tdeserialize,\r\n\t\t\tdecodeValues);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the encoded URI string\r\n\t */\r\n\tencode(prefixIfNotEmpty?:boolean):string\r\n\t{\r\n\t\treturn QueryParams.encode(this, prefixIfNotEmpty);\r\n\t}\r\n\r\n\ttoString():string\r\n\t{\r\n\t\treturn this.encode();\r\n\t}\r\n}\r\n\r\nexport default QueryBuilder;\r\n"]}