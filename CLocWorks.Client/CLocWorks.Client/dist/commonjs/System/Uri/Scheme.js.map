{"version":3,"sources":["System/Uri/Scheme.js","System/Uri/Scheme.ts"],"names":[],"mappings":";;;;;AAKA;;ACQa,QAAA,IAAA,GAAmB,MAAnB;AAMA,QAAA,GAAA,GAAiB,KAAjB;AAMA,QAAA,MAAA,GAAuB,QAAvB;AAMA,QAAA,IAAA,GAAmB,MAAnB;AAMA,QAAA,KAAA,GAAqB,OAArB;AAMA,QAAA,IAAA,GAAmB,MAAnB;AAMA,QAAA,MAAA,GAAuB,QAAvB;AAMA,QAAA,IAAA,GAAmB,UAAnB;AAMA,QAAA,GAAA,GAAiB,SAAjB;AAMA,QAAA,IAAA,GAAmB,MAAnB;AAMA,QAAA,IAAA,GAAmB,MAAnB;AAMA,QAAA,MAAA,GAAuB,QAAvB;AAKA,QAAA,IAAA,GAAmB,MAAnB;AAMA,QAAA,GAAA,GAAoB,OAAO,MAAP,CAAc,CAC9C,QAAA,IAAA,EAAM,QAAA,GAAA,EAAK,QAAA,MAAA,EAAQ,QAAA,IAAA,EAAM,QAAA,KAAA,EAAO,QAAA,IAAA,EAAM,QAAA,MAAA,EAAQ,QAAA,IAAA,EAAM,QAAA,GAAA,EAAK,QAAA,IAAA,EAAM,QAAA,IAAA,EAAM,QAAA,MAAA,EAAQ,QAAA,IAAA,CAD7C,CAApB;AAIb,SAAA,OAAA,CAAwB,MAAxB,EAAqC;AACpC,WAAO,QAAA,GAAA,CAAI,OAAJ,CAAiB,MAAjB,KAA0B,CAAC,CAAD,CADG;CAArC;AAAgB,QAAA,OAAA,GAAO,OAAP","file":"System/Uri/Scheme.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based on: https://msdn.microsoft.com/en-us/library/system.uri.scheme%28v=vs.110%29.aspx\n */\n\"use strict\";\nexports.File = \"file\";\nexports.FTP = \"ftp\";\nexports.GOPHER = \"gopher\";\nexports.HTTP = \"http\";\nexports.HTTPS = \"https\";\nexports.LDAP = \"ldap\";\nexports.MAILTO = \"mailto\";\nexports.PIPE = \"net.pipe\";\nexports.TCP = \"net.tcp\";\nexports.NEWS = \"news\";\nexports.NNTP = \"nntp\";\nexports.TELNET = \"telnet\";\nexports.UUID = \"uuid\";\nexports.All = Object.freeze([\n    exports.File, exports.FTP, exports.GOPHER, exports.HTTP, exports.HTTPS, exports.LDAP, exports.MAILTO, exports.PIPE, exports.TCP, exports.NEWS, exports.NNTP, exports.TELNET, exports.UUID\n]);\nfunction isValid(scheme) {\n    return exports.All.indexOf(scheme) != -1;\n}\nexports.isValid = isValid;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based on: https://msdn.microsoft.com/en-us/library/system.uri.scheme%28v=vs.110%29.aspx\r\n */\r\n\r\nimport * as Scheme from \"./SchemeValue\";\r\nimport {SchemeValue} from \"./SchemeValue\";\r\n\r\n\r\n/**\r\n * The resource is a file on the local computer.\r\n */\r\nexport const File:Scheme.File = \"file\";\r\n\r\n\r\n/**\r\n * The resource is accessed through FTP.\r\n */\r\nexport const FTP:Scheme.FTP = \"ftp\";\r\n\r\n\r\n/**\r\n * The resource is accessed through the Gopher protocol.\r\n */\r\nexport const GOPHER:Scheme.Gopher = \"gopher\";\r\n\r\n\r\n/**\r\n * The resource is accessed through HTTP.\r\n */\r\nexport const HTTP:Scheme.HTTP = \"http\";\r\n\r\n\r\n/**\r\n * The resource is accessed through SSL-encrypted HTTP.\r\n */\r\nexport const HTTPS:Scheme.HTTPS = \"https\";\r\n\r\n\r\n/**\r\n * The resource is accessed through the LDAP protocol.\r\n */\r\nexport const LDAP:Scheme.LDAP = \"ldap\";\r\n\r\n\r\n/**\r\n * The resource is an e-mail address and accessed through the SMTP protocol.\r\n */\r\nexport const MAILTO:Scheme.MailTo = \"mailto\";\r\n\r\n\r\n/**\r\n * The resource is accessed through a named pipe.\r\n */\r\nexport const PIPE:Scheme.Pipe = \"net.pipe\";\r\n\r\n\r\n/**\r\n * The resource is accessed from TCP endpoint.\r\n */\r\nexport const TCP:Scheme.TCP = \"net.tcp\";\r\n\r\n\r\n/**\r\n * The resource is accessed through the NNTP protocol.\r\n */\r\nexport const NEWS:Scheme.NNTP = \"news\";\r\n\r\n\r\n/**\r\n * The resource is accessed through the NNTP protocol.\r\n */\r\nexport const NNTP:Scheme.NNTP = \"nntp\";\r\n\r\n\r\n/**\r\n * The resource is accessed through the TELNET protocol.\r\n */\r\nexport const TELNET:Scheme.Telnet = \"telnet\";\r\n\r\n/**\r\n * The resource is accessed through a unique UUID endpoint name for communicating with a service.\r\n */\r\nexport const UUID:Scheme.UUID = \"uuid\";\r\n\r\n/**\r\n * An index of possible values to validate against.\r\n * @type {Array}\r\n */\r\nexport const All:SchemeValue[] = Object.freeze([\r\n\tFile, FTP, GOPHER, HTTP, HTTPS, LDAP, MAILTO, PIPE, TCP, NEWS, NNTP, TELNET, UUID\r\n]);\r\n\r\nexport function isValid(scheme:string):scheme is SchemeValue {\r\n\treturn All.indexOf(<any>scheme)!=-1;\r\n}\r\n"]}