{"version":3,"sources":["System/Text/Padding.js","System/Text/Padding.ts"],"names":[],"mappings":"AAAA;;ACAA,IAAA,UAAA,QAAmB,UAAnB,CAAA;AACA,IAAA,YAAA,QAA4B,WAA5B,CAAA;AAEA,IAAM,QAAQ,GAAR;AACN,IAAM,OAAO,GAAP;AAEN,SAAA,aAAA,CAA8B,MAA9B,EAA6C,SAA7C,EAAiF;QAAlB,4DAAa,qBAAK;;AAEhF,WAAO,OAAO,YAAU,CAAV,GACV,UAAA,MAAA,CAAO,GAAP,EAAY,YAAY,OAAO,MAAP,CAAxB,GAAyC,MAAzC,GACD,MAFI,CAFyE;CAAjF;AAAgB,QAAA,aAAA,GAAa,aAAb;AAOhB,SAAA,cAAA,CAA+B,MAA/B,EAA8C,SAA9C,EAAkF;QAAlB,4DAAa,qBAAK;;AAEjF,WAAO,OAAO,YAAU,CAAV,GACV,SAAS,UAAA,MAAA,CAAO,GAAP,EAAY,YAAY,OAAO,MAAP,CAAjC,GACD,MAFI,CAF0E;CAAlF;AAAgB,QAAA,cAAA,GAAc,cAAd;AAOhB,SAAA,aAAA,CAA8B,MAA9B,EAA6C,SAA7C,EAAuF;QAAxB,4DAAoB,oBAAI;;AAEtF,QAAG,CAAC,QAAA,IAAA,CAAK,QAAL,CAAc,MAAd,CAAD,EACF,MAAM,IAAI,KAAJ,CAAU,wBAAV,CAAN,CADD;AAGA,QAAG,CAAC,MAAD,EAAS,SAAS,CAAT,CAAZ;AAEA,WAAO,cAAc,SAAS,UAAA,KAAA,EAAO,SAA9B,EAAyC,MAAM,UAAA,KAAA,CAAtD,CAPsF;CAAvF;AAAgB,QAAA,aAAA,GAAa,aAAb;AAWhB,SAAA,cAAA,CAA+B,MAA/B,EAA8C,SAA9C,EAAwF;QAAxB,4DAAoB,oBAAI;;AAEvF,QAAG,CAAC,QAAA,IAAA,CAAK,QAAL,CAAc,MAAd,CAAD,EACF,MAAM,IAAI,KAAJ,CAAU,wBAAV,CAAN,CADD;AAGA,QAAG,CAAC,MAAD,EAAS,SAAS,CAAT,CAAZ;AAEA,WAAO,eAAe,SAAS,UAAA,KAAA,EAAO,SAA/B,EAA0C,MAAM,UAAA,KAAA,CAAvD,CAPuF;CAAxF;AAAgB,QAAA,cAAA,GAAc,cAAd;AAYhB,SAAA,OAAA,CAAwB,MAAxB,EAA8C,SAA9C,EAAgE,GAAhE,EAAwE;AAEvE,QAAG,QAAA,IAAA,CAAK,QAAL,CAAc,MAAd,CAAH,EAA0B,OAAO,cAAc,MAAd,EAAsB,SAAtB,EAAiC,GAAjC,CAAP,CAA1B;AACA,QAAG,QAAA,IAAA,CAAK,QAAL,CAAc,MAAd,CAAH,EAA0B,OAAO,cAAc,MAAd,EAAsB,SAAtB,EAAiC,GAAjC,CAAP,CAA1B;AACA,UAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN,CAJuE;CAAxE;AAAgB,QAAA,OAAA,GAAO,OAAP;AAShB,SAAA,QAAA,CAAyB,MAAzB,EAA+C,SAA/C,EAAiE,GAAjE,EAAyE;AAExE,QAAG,QAAA,IAAA,CAAK,QAAL,CAAc,MAAd,CAAH,EAA0B,OAAO,eAAe,MAAf,EAAuB,SAAvB,EAAkC,GAAlC,CAAP,CAA1B;AACA,QAAG,QAAA,IAAA,CAAK,QAAL,CAAc,MAAd,CAAH,EAA0B,OAAO,eAAe,MAAf,EAAuB,SAAvB,EAAkC,GAAlC,CAAP,CAA1B;AACA,UAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN,CAJwE;CAAzE;AAAgB,QAAA,QAAA,GAAQ,QAAR","file":"System/Text/Padding.js","sourcesContent":["\"use strict\";\nconst Types_1 = require(\"../Types\");\nconst Utility_1 = require(\"./Utility\");\nconst SPACE = ' ';\nconst ZERO = '0';\nfunction padStringLeft(source, minLength, pad = SPACE) {\n    return pad && minLength > 0\n        ? (Utility_1.repeat(pad, minLength - source.length) + source)\n        : source;\n}\nexports.padStringLeft = padStringLeft;\nfunction padStringRight(source, minLength, pad = SPACE) {\n    return pad && minLength > 0\n        ? (source + Utility_1.repeat(pad, minLength - source.length))\n        : source;\n}\nexports.padStringRight = padStringRight;\nfunction padNumberLeft(source, minLength, pad = ZERO) {\n    if (!Types_1.Type.isNumber(source))\n        throw new Error(\"Cannot pad non-number.\");\n    if (!source)\n        source = 0;\n    return padStringLeft(source + Utility_1.EMPTY, minLength, pad + Utility_1.EMPTY);\n}\nexports.padNumberLeft = padNumberLeft;\nfunction padNumberRight(source, minLength, pad = ZERO) {\n    if (!Types_1.Type.isNumber(source))\n        throw new Error(\"Cannot pad non-number.\");\n    if (!source)\n        source = 0;\n    return padStringRight(source + Utility_1.EMPTY, minLength, pad + Utility_1.EMPTY);\n}\nexports.padNumberRight = padNumberRight;\nfunction padLeft(source, minLength, pad) {\n    if (Types_1.Type.isString(source))\n        return padStringLeft(source, minLength, pad);\n    if (Types_1.Type.isNumber(source))\n        return padNumberLeft(source, minLength, pad);\n    throw new Error(\"Invalid source type.\");\n}\nexports.padLeft = padLeft;\nfunction padRight(source, minLength, pad) {\n    if (Types_1.Type.isString(source))\n        return padStringRight(source, minLength, pad);\n    if (Types_1.Type.isNumber(source))\n        return padNumberRight(source, minLength, pad);\n    throw new Error(\"Invalid source type.\");\n}\nexports.padRight = padRight;\n","import {Type} from \"../Types\";\r\nimport {repeat, EMPTY} from \"./Utility\";\r\n\r\nconst SPACE = ' ';\r\nconst ZERO = '0';\r\n\r\nexport function padStringLeft(source:string, minLength:number, pad:string = SPACE):string\r\n{\r\n\treturn pad && minLength>0\r\n\t\t? (repeat(pad, minLength - source.length) + source)\r\n\t\t: source;\r\n}\r\n\r\nexport function padStringRight(source:string, minLength:number, pad:string = SPACE):string\r\n{\r\n\treturn pad && minLength>0\r\n\t\t? (source + repeat(pad, minLength - source.length))\r\n\t\t: source;\r\n}\r\n\r\nexport function padNumberLeft(source:number, minLength:number, pad:string|number = ZERO):string\r\n{\r\n\tif(!Type.isNumber(source))\r\n\t\tthrow new Error(\"Cannot pad non-number.\");\r\n\r\n\tif(!source) source = 0;\r\n\r\n\treturn padStringLeft(source + EMPTY, minLength, pad + EMPTY);\r\n}\r\n\r\n\r\nexport function padNumberRight(source:number, minLength:number, pad:string|number = ZERO):string\r\n{\r\n\tif(!Type.isNumber(source))\r\n\t\tthrow new Error(\"Cannot pad non-number.\");\r\n\r\n\tif(!source) source = 0;\r\n\r\n\treturn padStringRight(source + EMPTY, minLength, pad + EMPTY);\r\n}\r\n\r\nexport function padLeft(source:string, minLength:number, pad?:string):string\r\nexport function padLeft(source:number, minLength:number, pad?:string|number):string\r\nexport function padLeft(source:string|number, minLength:number, pad?:any):string\r\n{\r\n\tif(Type.isString(source)) return padStringLeft(source, minLength, pad);\r\n\tif(Type.isNumber(source)) return padNumberLeft(source, minLength, pad);\r\n\tthrow new Error(\"Invalid source type.\");\r\n}\r\n\r\nexport function padRight(source:string, minLength:number, pad?:string):string\r\nexport function padRight(source:number, minLength:number, pad?:string|number):string\r\nexport function padRight(source:string|number, minLength:number, pad?:any):string\r\n{\r\n\tif(Type.isString(source)) return padStringRight(source, minLength, pad);\r\n\tif(Type.isNumber(source)) return padNumberRight(source, minLength, pad);\r\n\tthrow new Error(\"Invalid source type.\");\r\n}"]}