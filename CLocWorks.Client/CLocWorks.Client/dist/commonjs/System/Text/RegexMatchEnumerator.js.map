{"version":3,"sources":["System/Text/RegexMatchEnumerator.js","System/Text/RegexMatchEnumerator.ts"],"names":[],"mappings":";;;;AAIA;;;;;;ACCA,IAAA,uBAAA,QAA2B,sBAA3B,CAAA;AACA,IAAA,oBAAA,QAA8B,4CAA9B,CAAA;AACA,IAAA,mBAAA,QAA6B,2CAA7B,CAAA;;IAGA;AAIC,aAJD,oBAIC,CAAY,OAAZ,EAAuC;8BAJxC,sBAIwC;;AAEtC,YAAG,mBAAmB,qBAAA,KAAA,EACtB;AACC,iBAAK,QAAL,GAAgB,OAAhB,CADD;SADA,MAKA;AACC,iBAAK,QAAL,GAAgB,IAAI,qBAAA,KAAA,CAAM,OAAV,CAAhB,CADD;SALA;KAFD;;iBAJD;;gCAgBS,OAAY;;;AAEnB,gBAAI,CAAJ,CAFmB;AAGnB,mBAAO,IAAI,iBAAA,cAAA,CACV,YAAA;AAEC,oBAAI,CAAJ,CAFD;aAAA,EAIA,mBAAO;AAEN,oBAAI,QAAc,MAAK,QAAL,CAAc,KAAd,CAAoB,KAApB,EAA2B,CAA3B,CAAd,CAFE;AAGN,oBAAG,MAAM,OAAN,EACH;AACC,wBAAI,MAAM,KAAN,GAAc,MAAM,MAAN,CADnB;AAEC,2BAAO,QAAQ,WAAR,CAAoB,KAApB,CAAP,CAFD;iBADA;AAMA,uBAAO,QAAQ,UAAR,EAAP,CATM;aAAP,CALD,CAHmB;;;;gCAqBL,OAAc,SAA2B;AAEvD,mBAAO,SAAS,OAAT,GACJ,IAAK,oBAAJ,CAAyB,OAAzB,CAAD,CAAoC,OAApC,CAA4C,KAA5C,CADI,GAEJ,kBAAA,eAAA,CAJoD;;;;WArCzD;;;AAAa,QAAA,oBAAA,GAAoB,oBAApB;AA8Cb,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADlBA,QAAQ,OAAR,GCkBe,qBAAqB,OAArB","file":"System/Text/RegexMatchEnumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst RegularExpressions_1 = require(\"./RegularExpressions\");\nconst EmptyEnumerator_1 = require(\"../Collections/Enumeration/EmptyEnumerator\");\nconst EnumeratorBase_1 = require(\"../Collections/Enumeration/EnumeratorBase\");\nclass RegexMatchEnumerator {\n    constructor(pattern) {\n        if (pattern instanceof RegularExpressions_1.Regex) {\n            this._pattern = pattern;\n        }\n        else {\n            this._pattern = new RegularExpressions_1.Regex(pattern);\n        }\n    }\n    matches(input) {\n        var p;\n        return new EnumeratorBase_1.EnumeratorBase(() => {\n            p = 0;\n        }, yielder => {\n            let match = this._pattern.match(input, p);\n            if (match.success) {\n                p = match.index + match.length;\n                return yielder.yieldReturn(match);\n            }\n            return yielder.yieldBreak();\n        });\n    }\n    static matches(input, pattern) {\n        return input && pattern\n            ? (new RegexMatchEnumerator(pattern)).matches(input)\n            : EmptyEnumerator_1.EmptyEnumerator;\n    }\n}\nexports.RegexMatchEnumerator = RegexMatchEnumerator;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = RegexMatchEnumerator.matches;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Regex, Match} from \"./RegularExpressions\";\r\nimport {EmptyEnumerator} from \"../Collections/Enumeration/EmptyEnumerator\";\r\nimport {EnumeratorBase} from \"../Collections/Enumeration/EnumeratorBase\";\r\nimport {IEnumerator} from \"../Collections/Enumeration/IEnumerator\";\r\n\r\nexport class RegexMatchEnumerator\r\n{\r\n\tprivate _pattern:Regex;\r\n\r\n\tconstructor(pattern:string|RegExp|Regex)\r\n\t{\r\n\t\tif(pattern instanceof Regex)\r\n\t\t{\r\n\t\t\tthis._pattern = pattern;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._pattern = new Regex(pattern);\r\n\t\t}\r\n\t}\r\n\r\n\tmatches(input:string):IEnumerator<Match>\r\n\t{\r\n\t\tvar p:number; // pointer\r\n\t\treturn new EnumeratorBase<Match>(\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tp = 0;\r\n\t\t\t},\r\n\t\t\tyielder=>\r\n\t\t\t{\r\n\t\t\t\tlet match:Match = this._pattern.match(input, p);\r\n\t\t\t\tif(match.success)\r\n\t\t\t\t{\r\n\t\t\t\t\tp = match.index + match.length;\r\n\t\t\t\t\treturn yielder.yieldReturn(match);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic matches(input:string, pattern:string|RegExp|Regex):IEnumerator<Match>\r\n\t{\r\n\t\treturn input && pattern\r\n\t\t\t? (new RegexMatchEnumerator(pattern)).matches(input)\r\n\t\t\t: EmptyEnumerator;\r\n\t}\r\n\r\n}\r\n\r\nexport default RegexMatchEnumerator.matches;"]}