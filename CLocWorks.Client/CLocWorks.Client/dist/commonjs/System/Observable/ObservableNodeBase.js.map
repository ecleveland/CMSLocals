{"version":3,"sources":["System/Observable/ObservableNodeBase.js","System/Observable/ObservableNodeBase.ts"],"names":[],"mappings":";;;;;;AAMA;;;;;;;;;;ACEA,IAAA,mBAAA,QAA2B,kBAA3B,CAAA;;IAGA;;;;;;;;;;;+BAKQ,OAAO;AAEb,iBAAK,OAAL,CAAa,KAAb,EAFa;;;;gCAKN,OAAW;AAElB,iBAAK,QAAL,CAAc,KAAd,EAFkB;;;;sCAKR;AAEV,iBAAK,YAAL,GAFU;;;;WAfZ;EACQ,iBAAA,OAAA;;AADK,QAAA,kBAAA,GAAkB,kBAAlB;AAqBb,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADXA,QAAQ,OAAR,GCWe,kBDXf","file":"System/Observable/ObservableNodeBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based upon .NET source.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\n */\n\"use strict\";\nconst ObservableBase_1 = require(\"./ObservableBase\");\nclass ObservableNodeBase extends ObservableBase_1.default {\n    onNext(value) {\n        this._onNext(value);\n    }\n    onError(error) {\n        this._onError(error);\n    }\n    onCompleted() {\n        this._onCompleted();\n    }\n}\nexports.ObservableNodeBase = ObservableNodeBase;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = ObservableNodeBase;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n// Can be used as a base class, mixin, or simply reference on how to implement the pattern.\r\nimport ObservableBase from \"./ObservableBase\";\r\nimport {IObserver} from \"./IObserver\";\r\n\r\nexport class ObservableNodeBase<T>\r\nextends ObservableBase<T>\r\nimplements IObserver<T>\r\n{\r\n\r\n\tonNext(value:T):void\r\n\t{\r\n\t\tthis._onNext(value);\r\n\t}\r\n\r\n\tonError(error:Error):void\r\n\t{\r\n\t\tthis._onError(error);\r\n\t}\r\n\r\n\tonCompleted():void\r\n\t{\r\n\t\tthis._onCompleted();\r\n\t}\r\n}\r\n\r\nexport default ObservableNodeBase;"]}