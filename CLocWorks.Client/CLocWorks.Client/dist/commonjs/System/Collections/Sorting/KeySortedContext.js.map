{"version":3,"sources":["System/Collections/Sorting/KeySortedContext.js","System/Collections/Sorting/KeySortedContext.ts"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;ACCA,IAAY,SAAM,QAAM,eAAN,CAAN;AACZ,IAAA,gBAAA,QAA0B,eAA1B,CAAA;AACA,IAAA,cAAA,QAAwB,iBAAxB,CAAA;;IAMA;;;AAEC,aAFD,gBAEC,CACC,IADD,EAEW,YAFX,EAIwC;YADvC,8DAAc,iBACyB;YAAvC,iEAAyB,OAAO,OAAP,gBAAc;;8BANzC,kBAMyC;;2EANzC,6BAQQ,MAAM,UAAU,QAFiB;;AAF7B,cAAA,YAAA,GAAA,YAAA,CAE6B;;KAJxC;;iBAFD;;gCAWS,GAAK,GAAG;AAEf,gBAAI,IAAI,IAAJ;gBAAU,KAAK,EAAE,YAAF,CAFJ;AAGf,gBAAG,CAAC,EAAD,IAAO,MAAI,YAAA,SAAA,CAAU,QAAV,EAAoB,kCAdpC,yDAcyD,GAAG,EAAxB,CAAlC;AAEA,gBAAI,IAAI,OAAO,OAAP,CAAoB,GAAG,CAAH,CAApB,EAAgC,GAAG,CAAH,CAAhC,CAAJ,CALW;AAMf,gBAAG,KAAG,CAAH,IAAQ,EAAE,KAAF,EAAS,OAAO,EAAE,KAAF,CAAQ,OAAR,CAAgB,CAAhB,EAAmB,CAAnB,CAAP,CAApB;AACA,mBAAO,EAAE,MAAF,GAAS,CAAT,CAPQ;;;;WAXjB;EAAkE,cAAA,WAAA;;AAArD,QAAA,gBAAA,GAAgB,gBAAhB;AAsBb,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADVA,QAAQ,OAAR,GCUe,gBDVf","file":"System/Collections/Sorting/KeySortedContext.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst Values = require(\"../../Compare\");\nconst SortContext_1 = require(\"./SortContext\");\nconst Functions_1 = require(\"../../Functions\");\nclass KeySortedContext extends SortContext_1.SortContext {\n    constructor(next, _keySelector, order = 1, comparer = Values.compare) {\n        super(next, comparer, order);\n        this._keySelector = _keySelector;\n    }\n    compare(a, b) {\n        var _ = this, ks = _._keySelector;\n        if (!ks || ks == Functions_1.Functions.Identity)\n            return super.compare(a, b);\n        var d = Values.compare(ks(a), ks(b));\n        if (d == 0 && _._next)\n            return _._next.compare(a, b);\n        return _._order * d;\n    }\n}\nexports.KeySortedContext = KeySortedContext;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = KeySortedContext;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport * as Values from \"../../Compare\";\r\nimport {SortContext} from \"./SortContext\";\r\nimport {Functions} from \"../../Functions\";\r\nimport {Comparison, Selector} from \"../../FunctionTypes\";\r\nimport {Comparable} from \"../../IComparable\";\r\nimport {IComparer} from \"../../IComparer\";\r\nimport {Order} from \"./Order\";\r\n\r\nexport class KeySortedContext<T, TKey extends Comparable> extends SortContext<T>\r\n{\r\n\tconstructor(\r\n\t\tnext:IComparer<T>,\r\n\t\tprotected _keySelector:Selector<T,TKey>,\r\n\t\torder:Order = Order.Ascending,\r\n\t\tcomparer:Comparison<T> = Values.compare)\r\n\t{\r\n\t\tsuper(next, comparer, order);\r\n\t}\r\n\r\n\tcompare(a:T, b:T):number\r\n\t{\r\n\t\tvar _ = this, ks = _._keySelector;\r\n\t\tif(!ks || ks==Functions.Identity) return super.compare(a, b);\r\n\t\t// We force <any> here since it can be a Primitive or IComparable<any>\r\n\t\tvar d = Values.compare(<any>ks(a), <any>ks(b));\r\n\t\tif(d==0 && _._next) return _._next.compare(a, b);\r\n\t\treturn _._order*d;\r\n\t}\r\n}\r\n\r\nexport default KeySortedContext;"]}