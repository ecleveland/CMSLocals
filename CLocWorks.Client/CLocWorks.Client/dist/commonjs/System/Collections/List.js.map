{"version":3,"sources":["System/Collections/List.js","System/Collections/List.ts"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;ACEA,IAAA,YAAA,QAAuB,YAAvB,CAAA;AACA,IAAA,YAAA,QAA6D,iBAA7D,CAAA;AACA,IAAA,eAAA,QAAsB,0BAAtB,CAAA;AACA,IAAA,UAAA,QAAmB,UAAnB,CAAA;AACA,IAAA,oBAAA,QAA8B,+BAA9B,CAAA;AACA,IAAA,mBAAA,QAA6B,kBAA7B,CAAA;;IAQA;;;AAMC,aAND,IAMC,CACC,MADD,EAEkD;YAAjD,yEAAyC,UAAA,QAAA,gBAAQ;;8BARnD,MAQmD;;2EARnD,iBAUQ,MAAM,mBAFqC;;AAGjD,YAAI,SAAJ,CAHiD;AAIjD,YAAG,MAAM,OAAN,CAAc,MAAd,CAAH,EACA;AACC,cAAE,OAAF,GAAY,OAAO,KAAP,EAAZ,CADD;SADA,MAKA;AACC,cAAE,OAAF,GAAY,EAAZ,CADD;AAEC,cAAE,cAAF,CAAiB,MAAjB,EAFD;SALA;qBAJiD;KAFlD;;iBAND;;mCAuBmB;AAEjB,mBAAO,KAAK,OAAL,CAAa,MAAb,CAFU;;;;qCAKK,OAAO;AAE7B,iBAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB,EAF6B;AAG7B,mBAAO,IAAP,CAH6B;;;;wCAMJ,OAA8B;gBAArB,4DAAa,wBAAQ;;AAEvD,mBAAO,UAAA,MAAA,CACN,KAAK,OAAL,EAAc,KADR,EACe,GADf,EAEN,KAAK,iBAAL,CAFD,CAFuD;;;;yCAOhC;AAEvB,gBAAI,MAAM,KAAK,OAAL,CAAa,MAAb,CAFa;AAGvB,iBAAK,OAAL,CAAa,MAAb,GAAsB,CAAtB,CAHuB;AAIvB,mBAAO,GAAP,CAJuB;;;;uCAOC,SAA6B;AAErD,gBAAG,QAAA,IAAA,CAAK,WAAL,CAAiB,OAAjB,CAAH,EACA;AACC,oBAAI,MAAM,QAAQ,MAAR,CADX;AAEC,oBAAG,CAAC,GAAD,EAAM,OAAO,CAAP,CAAT;AACA,oBAAI,IAAI,KAAK,OAAL,CAHT;AAKC,oBAAI,QAAQ,EAAE,MAAF,CALb;AAMC,kBAAE,MAAF,IAAY,GAAZ,CAND;AAOC,qBAAI,IAAI,IAAI,CAAJ,EAAO,IAAE,GAAF,EAAO,GAAtB,EACA;AACC,sBAAE,IAAI,KAAJ,CAAF,GAAe,QAAQ,CAAR,CAAf,CADD;iBADA;AAKA,uBAAO,GAAP,CAZD;aADA,MAgBA;AACC,kDAnEH,oDAmE+B,QAA5B,CADD;aAhBA;;;;4BAqBG,OAAY;AAEf,mBAAO,KAAK,OAAL,CAAa,KAAb,CAAP,CAFe;;;;4BAKZ,OAAc,OAAO;AAExB,gBAAI,IAAI,KAAK,OAAL,CAFgB;AAGxB,gBAAG,QAAM,EAAE,MAAF,IAAY,UAAA,QAAA,CAAS,KAAT,EAAgB,EAAE,KAAF,CAAhB,CAAlB,EACF,OAAO,KAAP,CADD;AAGA,cAAE,KAAF,IAAW,KAAX,CANwB;AAOxB,iBAAK,WAAL,GAPwB;AAQxB,mBAAO,IAAP,CARwB;;;;gCAWjB,MAAM;AAEb,mBAAO,UAAA,OAAA,CACN,KAAK,OAAL,EAAc,IADR,EAEN,KAAK,iBAAL,CAFD,CAFa;;;;+BAOP,OAAc,OAAO;AAE3B,gBAAI,IAAI,KAAK,OAAL,CAFmB;AAG3B,gBAAG,QAAM,EAAE,MAAF,EACT;AACC,qBAAK,OAAL,CAAa,MAAb,CAAoB,KAApB,EAA2B,CAA3B,EAA8B,KAA9B,EADD;aADA,MAKA;AACC,qBAAK,OAAL,CAAa,KAAb,IAAsB,KAAtB,CADD;aALA;AAQA,iBAAK,WAAL,GAX2B;;;;iCAcnB,OAAY;AAEpB,gBAAG,UAAA,WAAA,CAAY,KAAK,OAAL,EAAc,KAA1B,CAAH,EACA;AACC,qBAAK,WAAL,GADD;AAEC,uBAAO,IAAP,CAFD;aADA;AAKA,mBAAO,KAAP,CAPoB;;;;iCAUZ,MAAM;AAEd,mBAAO,UAAA,QAAA,CACN,KAAK,OAAL,EAAc,IADR,EAEN,KAAK,iBAAL,CAFD,CAFc;;;;+BAOqB,QAAgB,OAAa;AAEhE,mBAAO,UAAA,MAAA,CAAO,KAAK,OAAL,EAAc,MAArB,EAA6B,CAA7B,EAAgC,KAAhC,CAAP,CAFgE;;;;wCAKpD;AAEZ,mBAAO,IAAI,kBAAA,eAAA,CAAgB,KAAK,OAAL,CAA3B,CAFY;;;;gCAKL,QAA+B,SAAgB;AAEtD,gBAAI,IAAI,KAAK,OAAL,CAF8C;AAGtD,mBAAO,aAAA,OAAA,CAAQ,UAAU,EAAE,KAAF,EAAV,GAAsB,CAAtB,EAAyB,MAAjC,CAAP,CAHsD;;;;WAvIxD;EACQ,iBAAA,cAAA;;AADK,QAAA,IAAA,GAAI,IAAJ;AA+Ib,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;AD5DA,QAAQ,OAAR,GC4De,ID5Df","file":"System/Collections/List.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst Compare_1 = require(\"../Compare\");\nconst Utility_1 = require(\"./Array/Utility\");\nconst Enumerator_1 = require(\"./Enumeration/Enumerator\");\nconst Types_1 = require(\"../Types\");\nconst ArrayEnumerator_1 = require(\"./Enumeration/ArrayEnumerator\");\nconst CollectionBase_1 = require(\"./CollectionBase\");\nclass List extends CollectionBase_1.CollectionBase {\n    constructor(source, equalityComparer = Compare_1.areEqual) {\n        super(null, equalityComparer);\n        var _ = this;\n        if (Array.isArray(source)) {\n            _._source = source.slice();\n        }\n        else {\n            _._source = [];\n            _._importEntries(source);\n        }\n    }\n    getCount() {\n        return this._source.length;\n    }\n    _addInternal(entry) {\n        this._source.push(entry);\n        return true;\n    }\n    _removeInternal(entry, max = Infinity) {\n        return Utility_1.remove(this._source, entry, max, this._equalityComparer);\n    }\n    _clearInternal() {\n        var len = this._source.length;\n        this._source.length = 0;\n        return len;\n    }\n    _importEntries(entries) {\n        if (Types_1.Type.isArrayLike(entries)) {\n            var len = entries.length;\n            if (!len)\n                return 0;\n            var s = this._source;\n            var first = s.length;\n            s.length += len;\n            for (let i = 0; i < len; i++) {\n                s[i + first] = entries[i];\n            }\n            return len;\n        }\n        else {\n            return super._importEntries(entries);\n        }\n    }\n    get(index) {\n        return this._source[index];\n    }\n    set(index, value) {\n        var s = this._source;\n        if (index < s.length && Compare_1.areEqual(value, s[index]))\n            return false;\n        s[index] = value;\n        this._onModified();\n        return true;\n    }\n    indexOf(item) {\n        return Utility_1.indexOf(this._source, item, this._equalityComparer);\n    }\n    insert(index, value) {\n        var s = this._source;\n        if (index < s.length) {\n            this._source.splice(index, 0, value);\n        }\n        else {\n            this._source[index] = value;\n        }\n        this._onModified();\n    }\n    removeAt(index) {\n        if (Utility_1.removeIndex(this._source, index)) {\n            this._onModified();\n            return true;\n        }\n        return false;\n    }\n    contains(item) {\n        return Utility_1.contains(this._source, item, this._equalityComparer);\n    }\n    copyTo(target, index) {\n        return Utility_1.copyTo(this._source, target, 0, index);\n    }\n    getEnumerator() {\n        return new ArrayEnumerator_1.ArrayEnumerator(this._source);\n    }\n    forEach(action, useCopy) {\n        var s = this._source;\n        return Enumerator_1.forEach(useCopy ? s.slice() : s, action);\n    }\n}\nexports.List = List;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = List;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport {remove, indexOf, contains, copyTo, removeIndex} from \"./Array/Utility\";\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {Type} from \"../Types\";\r\nimport {ArrayEnumerator} from \"./Enumeration/ArrayEnumerator\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {Predicate, Action, EqualityComparison} from \"../FunctionTypes\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IList} from \"./IList\";\r\nimport {IEnumerateEach} from \"./Enumeration/IEnumerateEach\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {IArray} from \"./Array/IArray\";\r\n\r\nexport class List<T>\r\nextends CollectionBase<T> implements IList<T>, IEnumerateEach<T>\r\n{\r\n\r\n\tprotected _source:T[];\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(null, equalityComparer);\r\n\t\tvar _ = this;\r\n\t\tif(Array.isArray(source))\r\n\t\t{\r\n\t\t\t_._source = source.slice();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_._source = [];\r\n\t\t\t_._importEntries(source);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._source.length;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\tthis._source.push(entry);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\treturn remove(\r\n\t\t\tthis._source, entry, max,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar len = this._source.length;\r\n\t\tthis._source.length = 0;\r\n\t\treturn len;\r\n\t}\r\n\r\n\tprotected _importEntries(entries:IEnumerableOrArray<T>):number\r\n\t{\r\n\t\tif(Type.isArrayLike(entries))\r\n\t\t{\r\n\t\t\tvar len = entries.length;\r\n\t\t\tif(!len) return 0;\r\n\t\t\tvar s = this._source;\r\n\r\n\t\t\tvar first = s.length;\r\n\t\t\ts.length += len;\r\n\t\t\tfor(let i = 0; i<len; i++)\r\n\t\t\t{\r\n\t\t\t\ts[i + first] = entries[i];\r\n\t\t\t}\r\n\r\n\t\t\treturn len;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn super._importEntries(entries);\r\n\t\t}\r\n\t}\r\n\r\n\tget(index:number):T\r\n\t{\r\n\t\treturn this._source[index];\r\n\t}\r\n\r\n\tset(index:number, value:T):boolean\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\tif(index<s.length && areEqual(value, s[index]))\r\n\t\t\treturn false;\r\n\r\n\t\ts[index] = value;\r\n\t\tthis._onModified();\r\n\t\treturn true;\r\n\t}\r\n\r\n\tindexOf(item:T):number\r\n\t{\r\n\t\treturn indexOf(\r\n\t\t\tthis._source, item,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tinsert(index:number, value:T):void\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\tif(index<s.length)\r\n\t\t{\r\n\t\t\tthis._source.splice(index, 0, value);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._source[index] = value;\r\n\t\t}\r\n\t\tthis._onModified();\r\n\t}\r\n\r\n\tremoveAt(index:number):boolean\r\n\t{\r\n\t\tif(removeIndex(this._source, index))\r\n\t\t{\r\n\t\t\tthis._onModified();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tcontains(item:T):boolean\r\n\t{\r\n\t\treturn contains(\r\n\t\t\tthis._source, item,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tcopyTo<TTarget extends IArray<any>>(target:TTarget, index?:number):TTarget\r\n\t{\r\n\t\treturn copyTo(this._source, target, 0, index);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\treturn new ArrayEnumerator(this._source);\r\n\t}\r\n\r\n\tforEach(action:Predicate<T>|Action<T>, useCopy?:boolean):number\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\treturn forEach(useCopy ? s.slice() : s, action);\r\n\t}\r\n\r\n}\r\n\r\nexport default List;"]}