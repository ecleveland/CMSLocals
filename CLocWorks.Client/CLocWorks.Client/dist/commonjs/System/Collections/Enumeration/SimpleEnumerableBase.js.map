{"version":3,"sources":["System/Collections/Enumeration/SimpleEnumerableBase.js","System/Collections/Enumeration/SimpleEnumerableBase.ts"],"names":[],"mappings":";;;;AAIA;;;;;;ACQA,IAAA,mBAAA,QAA6B,kBAA7B,CAAA;AAGA,IAAM,QAAY,KAAK,CAAL;;IAElB;AAMC,aAND,oBAMC,GAAA;8BAND,sBAMC;;AAEC,aAAK,KAAL,GAFD;KAAA;;iBAND;;yCAmByB;AACvB,gBAAI,IAAI,KAAK,MAAL,CADe;AAEvB,iBAAK,MAAL,GAAc,IAAI,MAAI,KAAJ,GAAY,CAAZ,GAAiB,IAAE,CAAF,CAFZ;AAGvB,mBAAO,CAAP,CAHuB;;;;oCAMf;AAER,iBAAK,QAAL,GAFQ;AAGR,mBAAO,KAAK,QAAL,CAHC;;;;+BAML;AAEH,mBAAO,KAAK,QAAL,KACJ,IAAI,iBAAA,cAAA,CAAe,KAAK,QAAL,EAAc,KAAK,MAAL,CAD7B,GAEJ,iBAAA,cAAA,CAAe,IAAf,CAJA;;;aASJ;gCAAS,OAAU;AAElB,gBACA;AACC,uBAAO,UAAQ,KAAR,IAAiB,KAAK,WAAL,EAAjB,GACJ,IAAI,iBAAA,cAAA,CAAe,KAAnB,EAAyB,KAAzB,EAA+B,IAA/B,CADI,GAEJ,iBAAA,cAAA,CAAe,IAAf,CAHJ;aADA,SAOA;AACC,qBAAK,OAAL,GADD;aAPA;;;;gCAYI;AAEJ,iBAAK,QAAL,GAAgB,KAAhB,CAFI;AAGJ,iBAAK,MAAL,GAAc,KAAd,CAHI;;;;kCAME;AAEN,iBAAK,KAAL,GAFM;;;;uCAKe;AACrB,mBAAO,KAAK,WAAL,EAAP,CADqB;;;;4BAtDX;AAEV,mBAAO,KAAK,QAAL,CAFG;;;;4BA0DE;AAEZ,mBAAO,KAAK,YAAL,EAAP,CAFY;;;;WArEd;;;AAAsB,QAAA,oBAAA,GAAoB,oBAApB;AA2EtB,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADtCA,QAAQ,OAAR,GCsCe,oBDtCf","file":"System/Collections/Enumeration/SimpleEnumerableBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst IteratorResult_1 = require(\"./IteratorResult\");\nconst VOID0 = void 0;\nclass SimpleEnumerableBase {\n    constructor() {\n        this.reset();\n    }\n    get current() {\n        return this._current;\n    }\n    incrementIndex() {\n        let i = this._index;\n        this._index = i = i === VOID0 ? 0 : (i + 1);\n        return i;\n    }\n    nextValue() {\n        this.moveNext();\n        return this._current;\n    }\n    next() {\n        return this.moveNext()\n            ? new IteratorResult_1.IteratorResult(this._current, this._index)\n            : IteratorResult_1.IteratorResult.Done;\n    }\n    'return'(value) {\n        try {\n            return value !== VOID0 && this.canMoveNext()\n                ? new IteratorResult_1.IteratorResult(value, VOID0, true)\n                : IteratorResult_1.IteratorResult.Done;\n        }\n        finally {\n            this.dispose();\n        }\n    }\n    reset() {\n        this._current = VOID0;\n        this._index = VOID0;\n    }\n    dispose() {\n        this.reset();\n    }\n    getIsEndless() {\n        return this.canMoveNext();\n    }\n    get isEndless() {\n        return this.getIsEndless();\n    }\n}\nexports.SimpleEnumerableBase = SimpleEnumerableBase;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = SimpleEnumerableBase;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {IIteratorResult} from \"./IIterator\";\r\nimport {IteratorResult} from \"./IteratorResult\";\r\nimport {IEnumerator} from \"./IEnumerator\";\r\n\r\nconst VOID0:any = void 0;\r\n\r\nexport abstract class SimpleEnumerableBase<T> implements IEnumerator<T>\r\n{\r\n\r\n\tprotected _current:T;\r\n\tprotected _index:number;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tget current():T\r\n\t{\r\n\t\treturn this._current;\r\n\t}\r\n\r\n\tprotected abstract canMoveNext():boolean;\r\n\tabstract moveNext():boolean;\r\n\r\n\tprotected incrementIndex():number {\r\n\t\tlet i = this._index;\r\n\t\tthis._index = i = i===VOID0 ? 0 : (i+1);\r\n\t\treturn i;\r\n\t}\r\n\r\n\tnextValue():T\r\n\t{\r\n\t\tthis.moveNext();\r\n\t\treturn this._current;\r\n\t}\r\n\r\n\tnext():IIteratorResult<T>\r\n\t{\r\n\t\treturn this.moveNext()\r\n\t\t\t? new IteratorResult(this._current,this._index)\r\n\t\t\t: IteratorResult.Done;\r\n\t}\r\n\r\n\t'return'():IIteratorResult<void>\r\n\t'return'<TReturn>(value:TReturn):IIteratorResult<TReturn>\r\n\t'return'(value?:any):IIteratorResult<any>\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\treturn value!==VOID0 && this.canMoveNext()\r\n\t\t\t\t? new IteratorResult(value,VOID0,true)\r\n\t\t\t\t: IteratorResult.Done;\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tthis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tthis._current = VOID0;\r\n\t\tthis._index = VOID0;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean {\r\n\t\treturn this.canMoveNext();\r\n\t}\r\n\r\n\tget isEndless():boolean\r\n\t{\r\n\t\treturn this.getIsEndless();\r\n\t}\r\n}\r\n\r\nexport default SimpleEnumerableBase;\r\n"]}