{"version":3,"sources":["System/Collections/Enumeration/InfiniteEnumerator.js","System/Collections/Enumeration/InfiniteEnumerator.ts"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;ACEA,IAAA,yBAAA,QAAmC,wBAAnC,CAAA;AAEA,IAAM,QAAY,KAAK,CAAL;;IAclB;;;AAMC,aAND,kBAMC,CAAoB,QAApB,EAAoD;8BANrD,oBAMqD;;2EANrD,gCAMqD;;AAAhC,cAAA,QAAA,GAAA,QAAA,CAAgC;;KAApD;;iBAND;;sCAWsB;AAEpB,mBAAO,KAAK,QAAL,IAAe,IAAf,CAFa;;;;mCAKb;AAEP,gBAAI,IAAI,IAAJ,CAFG;AAGP,gBAAI,IAAI,EAAE,QAAF,CAHD;AAIP,gBAAG,CAAH,EAAM,EAAE,QAAF,GAAa,EAAE,EAAE,QAAF,EAAY,EAAE,cAAF,EAAd,CAAb,CAAN;AACA,mBAAO,KAAG,KAAH,CALA;;;;kCAQD;AAEN,uCA1BF,0DA0BE,CAFM;AAGN,iBAAK,QAAL,GAAgB,KAAhB,CAHM;;;;WAxBR;EAA2C,uBAAA,oBAAA;;AAA9B,QAAA,kBAAA,GAAkB,kBAAlB;AAgCb,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADzBA,QAAQ,OAAR,GCyBe,kBDzBf","file":"System/Collections/Enumeration/InfiniteEnumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst SimpleEnumerableBase_1 = require(\"./SimpleEnumerableBase\");\nconst VOID0 = void 0;\nclass InfiniteEnumerator extends SimpleEnumerableBase_1.SimpleEnumerableBase {\n    constructor(_factory) {\n        super();\n        this._factory = _factory;\n    }\n    canMoveNext() {\n        return this._factory != null;\n    }\n    moveNext() {\n        var _ = this;\n        var f = _._factory;\n        if (f)\n            _._current = f(_._current, _.incrementIndex());\n        return f != VOID0;\n    }\n    dispose() {\n        super.dispose();\n        this._factory = VOID0;\n    }\n}\nexports.InfiniteEnumerator = InfiniteEnumerator;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = InfiniteEnumerator;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/**\r\n * An aggregate/reduce style factory function that expects a previous value and the current index of the enumeration.\r\n */\r\nexport interface InfiniteValueFactory<T>\r\n{\r\n\t(previous?:T, index?:number):T;\r\n}\r\n\r\n/**\r\n * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\r\n * This is analogous to a 'generator' and has a compatible interface.\r\n */\r\nexport class InfiniteEnumerator<T> extends SimpleEnumerableBase<T>\r\n{\r\n\t/**\r\n\t * See InfiniteValueFactory\r\n\t * @param _factory\r\n\t */\r\n\tconstructor(private _factory:InfiniteValueFactory<T>)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprotected canMoveNext():boolean\r\n\t{\r\n\t\treturn this._factory!=null;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar f = _._factory;\r\n\t\tif(f) _._current = f(_._current, _.incrementIndex());\r\n\t\treturn f!=VOID0;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.dispose();\r\n\t\tthis._factory = VOID0;\r\n\t}\r\n\r\n}\r\n\r\nexport default InfiniteEnumerator;"]}