{"version":3,"sources":["System/Collections/Enumeration/IndexEnumerator.js","System/Collections/Enumeration/IndexEnumerator.ts"],"names":[],"mappings":";;;;AAIA;;;;;;;;ACCA,IAAA,mBAAA,QAA6B,kBAA7B,CAAA;;IAEA;;;AAGC,aAHD,eAGC,CACC,aADD,EACwG;8BAJzG,iBAIyG;;AAGvG,YAAI,MAAJ,CAHuG;;2EAJzG,4BASG,YAAA;AAEC,qBAAS,eAAT,CAFD;AAGC,gBAAG,UAAU,OAAO,MAAP,EACb;AACC,oBAAI,MAAM,OAAO,MAAP,CADX;AAEC,oBAAG,MAAI,CAAJ,EACF,MAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN,CADD;AAGA,oBAAG,CAAC,SAAS,GAAT,CAAD,EACF,MAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN,CADD;AAGA,oBAAG,OAAO,OAAO,IAAP,KAAc,CAAd,EACT,MAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN,CADD;AAEA,oBAAI,UAAU,OAAO,OAAP,CAVf;AAWC,oBAAG,CAAC,OAAD,EACF,UAAU,CAAV,CADD,KAEK,IAAG,WAAS,KAAK,KAAL,CAAW,OAAX,CAAT,EACP,MAAM,IAAI,KAAJ,CAAU,4CAA4C,OAA5C,GAAsD,gBAAtD,CAAhB,CADI;AAEL,uBAAO,OAAP,GAAiB,OAAjB,CAfD;AAiBC,oBAAI,OAAO,OAAO,IAAP,CAjBZ;AAkBC,oBAAG,CAAC,IAAD,EACF,OAAO,CAAP,CADD,KAEK,IAAG,QAAM,KAAK,KAAL,CAAW,IAAX,CAAN,EACP,MAAM,IAAI,KAAJ,CAAU,yCAAyC,IAAzC,GAAgD,gBAAhD,CAAhB,CADI;AAEL,uBAAO,IAAP,GAAc,IAAd,CAtBD;aADA;SAHD,EA8BA,UAAC,OAAD,EAAQ;AAEP,gBAAI,MAAM,MAAC,IAAU,OAAO,MAAP,GAAiB,OAAO,MAAP,GAAgB,CAA5C,CAFH;AAGP,gBAAG,CAAC,GAAD,IAAQ,MAAM,GAAN,CAAR,EACF,OAAO,QAAQ,UAAR,EAAP,CADD;AAEA,gBAAI,UAAU,OAAO,OAAP,CALP;AAMP,mBAAO,OAAP,IAAkB,OAAO,IAAP,CANX;AAOP,mBAAO,OAAC,GAAQ,GAAR,IAAe,WAAS,CAAT,GACpB,QAAQ,WAAR,CAAoB,OAAO,MAAP,CAAc,OAAd,CAApB,CADI,GAEJ,QAAQ,UAAR,EAFI,CAPA;SAAR,EAYA,YAAA;AAEC,gBAAG,MAAH,EACA;AACC,uBAAO,MAAP,GAAgB,IAAhB,CADD;aADA;SAFD,GA/CsG;;AAuDvG,cAAK,UAAL,GAAkB,KAAlB,CAvDuG;;KADxG;;WAHD;EAAwC,iBAAA,cAAA;;AAA3B,QAAA,eAAA,GAAe,eAAf;AA+Db,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADnBA,QAAQ,OAAR,GCmBe,eDnBf","file":"System/Collections/Enumeration/IndexEnumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst EnumeratorBase_1 = require(\"./EnumeratorBase\");\nclass IndexEnumerator extends EnumeratorBase_1.EnumeratorBase {\n    constructor(sourceFactory) {\n        var source;\n        super(() => {\n            source = sourceFactory();\n            if (source && source.source) {\n                var len = source.length;\n                if (len < 0)\n                    throw new Error(\"length must be zero or greater\");\n                if (!isFinite(len))\n                    throw new Error(\"length must finite number\");\n                if (len && source.step === 0)\n                    throw new Error(\"Invalid IndexEnumerator step value (0).\");\n                var pointer = source.pointer;\n                if (!pointer)\n                    pointer = 0;\n                else if (pointer != Math.floor(pointer))\n                    throw new Error(\"Invalid IndexEnumerator pointer value (\" + pointer + \") has decimal.\");\n                source.pointer = pointer;\n                var step = source.step;\n                if (!step)\n                    step = 1;\n                else if (step != Math.floor(step))\n                    throw new Error(\"Invalid IndexEnumerator step value (\" + step + \") has decimal.\");\n                source.step = step;\n            }\n        }, (yielder) => {\n            var len = (source && source.source) ? source.length : 0;\n            if (!len || isNaN(len))\n                return yielder.yieldBreak();\n            var current = source.pointer;\n            source.pointer += source.step;\n            return (current < len && current >= 0)\n                ? yielder.yieldReturn(source.source[current])\n                : yielder.yieldBreak();\n        }, () => {\n            if (source) {\n                source.source = null;\n            }\n        });\n        this._isEndless = false;\n    }\n}\nexports.IndexEnumerator = IndexEnumerator;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = IndexEnumerator;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {EnumeratorBase} from \"./EnumeratorBase\";\r\n\r\nexport class IndexEnumerator<T> extends EnumeratorBase<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tsourceFactory:() => { source: { [index: number]: T }; pointer?: number; length: number; step?: number })\r\n\t{\r\n\r\n\t\tvar source:{ source: { [index: number]: T }; pointer?: number; length: number; step?: number };\r\n\t\tsuper(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tsource = sourceFactory();\r\n\t\t\t\tif(source && source.source)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar len = source.length;\r\n\t\t\t\t\tif(len<0) // Null is allowed but will exit immediately.\r\n\t\t\t\t\t\tthrow new Error(\"length must be zero or greater\");\r\n\r\n\t\t\t\t\tif(!isFinite(len))\r\n\t\t\t\t\t\tthrow new Error(\"length must finite number\");\r\n\r\n\t\t\t\t\tif(len && source.step===0)\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator step value (0).\");\r\n\t\t\t\t\tvar pointer = source.pointer;\r\n\t\t\t\t\tif(!pointer)\r\n\t\t\t\t\t\tpointer = 0;\r\n\t\t\t\t\telse if(pointer!=Math.floor(pointer))\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator pointer value (\" + pointer + \") has decimal.\");\r\n\t\t\t\t\tsource.pointer = pointer;\r\n\r\n\t\t\t\t\tvar step = source.step;\r\n\t\t\t\t\tif(!step)\r\n\t\t\t\t\t\tstep = 1;\r\n\t\t\t\t\telse if(step!=Math.floor(step))\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator step value (\" + step + \") has decimal.\");\r\n\t\t\t\t\tsource.step = step;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\tvar len = (source && source.source) ? source.length : 0;\r\n\t\t\t\tif(!len || isNaN(len))\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\tvar current = source.pointer;\r\n\t\t\t\tsource.pointer += source.step;\r\n\t\t\t\treturn (current<len && current>=0)\r\n\t\t\t\t\t? yielder.yieldReturn(source.source[current])\r\n\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(source)\r\n\t\t\t\t{\r\n\t\t\t\t\tsource.source = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\tthis._isEndless = false;\r\n\t}\r\n}\r\n\r\nexport default IndexEnumerator;"]}