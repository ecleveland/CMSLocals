{"version":3,"sources":["System/Collections/Enumeration/IteratorEnumerator.js","System/Collections/Enumeration/IteratorEnumerator.ts"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;ACGA,IAAA,yBAAA,QAAmC,wBAAnC,CAAA;AAEA,IAAM,QAAY,KAAK,CAAL;;IAQlB;;;AAMC,aAND,kBAMC,CAAoB,SAApB,EAAoD,UAApD,EAAuE;8BANxE,oBAMwE;;2EANxE,gCAMwE;;AAAnD,cAAA,SAAA,GAAA,SAAA,CAAmD;AAAnB,cAAA,UAAA,GAAA,UAAA,CAAmB;;KAAvE;;iBAND;;sCAWsB;AAEpB,mBAAO,KAAK,SAAL,IAAgB,IAAhB,CAFa;;;;iCAKZ,OAAU;AAElB,gBAAI,IAAI,IAAJ,CAFc;AAGlB,gBAAI,IAAI,EAAE,SAAF,CAHU;AAIlB,gBAAG,CAAH,EACA;AACC,oBAAI,IAAI,UAAU,MAAV,GAAmB,EAAE,IAAF,CAAO,KAAP,CAAnB,GAAmC,EAAE,IAAF,EAAnC,CADT;AAEC,kBAAE,QAAF,GAAa,EAAE,KAAF,CAFd;AAGC,oBAAG,EAAE,IAAF,EAAQ,EAAE,OAAF,GAAX,KACK,OAAO,IAAP,CADL;aAJD;AAOA,mBAAO,KAAP,CAXkB;;;;kCAcZ;AAEN,uCAhCF,0DAgCE,CAFM;AAGN,iBAAK,SAAL,GAAiB,KAAjB,CAHM;;;;uCAMe;AAErB,mBAAO,KAAK,UAAL,+BAtCT,+DAsCS,CAFc;;;;WApCvB;EAA2C,uBAAA,oBAAA;;AAA9B,QAAA,kBAAA,GAAkB,kBAAlB;AA0Cb,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADpBA,QAAQ,OAAR,GCoBe,kBDpBf","file":"System/Collections/Enumeration/IteratorEnumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst SimpleEnumerableBase_1 = require(\"./SimpleEnumerableBase\");\nconst VOID0 = void 0;\nclass IteratorEnumerator extends SimpleEnumerableBase_1.SimpleEnumerableBase {\n    constructor(_iterator, _isEndless) {\n        super();\n        this._iterator = _iterator;\n        this._isEndless = _isEndless;\n    }\n    canMoveNext() {\n        return this._iterator != null;\n    }\n    moveNext(value) {\n        var _ = this;\n        var i = _._iterator;\n        if (i) {\n            var r = arguments.length ? i.next(value) : i.next();\n            _._current = r.value;\n            if (r.done)\n                _.dispose();\n            else\n                return true;\n        }\n        return false;\n    }\n    dispose() {\n        super.dispose();\n        this._iterator = VOID0;\n    }\n    getIsEndless() {\n        return this._isEndless && super.getIsEndless();\n    }\n}\nexports.IteratorEnumerator = IteratorEnumerator;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = IteratorEnumerator;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {IIterator} from \"./IIterator\";\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/**\r\n * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\r\n * This is analogous to a 'generator' and has a compatible interface.\r\n *\r\n *\r\n */\r\nexport class IteratorEnumerator<T> extends SimpleEnumerableBase<T>\r\n{\r\n\t/**\r\n\t * @param _iterator\r\n\t * @param _isEndless true and false are explicit where as undefined means 'unknown'.\r\n\t */\r\n\tconstructor(private _iterator:IIterator<T>, private _isEndless?:boolean)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprotected canMoveNext():boolean\r\n\t{\r\n\t\treturn this._iterator!=null;\r\n\t}\r\n\r\n\tmoveNext(value?:any):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar i = _._iterator;\r\n\t\tif(i)\r\n\t\t{\r\n\t\t\tvar r = arguments.length ? i.next(value) : i.next();\r\n\t\t\t_._current = r.value;\r\n\t\t\tif(r.done) _.dispose();\r\n\t\t\telse return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.dispose();\r\n\t\tthis._iterator = VOID0;\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean\r\n\t{\r\n\t\treturn this._isEndless && super.getIsEndless();\r\n\t}\r\n}\r\n\r\nexport default IteratorEnumerator;"]}