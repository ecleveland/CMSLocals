{"version":3,"sources":["System/Collections/Enumeration/IteratorResult.js","System/Collections/Enumeration/IteratorResult.ts"],"names":[],"mappings":";;;;AAIA;;;;ACGA,IAAM,QAAY,KAAK,CAAL;;IAElB,iBAEC,SAFD,cAEC,CACQ,KADR,EAEQ,KAFR,EAG4B;QAApB,6DAAe,qBAAK;;0BAL7B,gBAK6B;;AAFpB,SAAA,KAAA,GAAA,KAAA,CAEoB;AADpB,SAAA,KAAA,GAAA,KAAA,CACoB;AAApB,SAAA,IAAA,GAAA,IAAA,CAAoB;AAE3B,WAAO,MAAP,CAAc,IAAd,EAF2B;CAH5B;;AAFY,QAAA,cAAA,GAAc,cAAd;AAWb,CAAA,UAAc,cAAd,EAA6B;AACf,mBAAA,IAAA,GAA2B,IAAI,cAAJ,CAAwB,KAAxB,EAA+B,KAA/B,EAAsC,IAAtC,CAA3B,CADe;AAE5B,aAAA,OAAA,CAAwB,KAAxB,EAAkC;AAAwB,eAAO,eAAA,IAAA,CAA/B;KAAlC;AAAgB,mBAAA,OAAA,GAAO,OAAP,CAFY;CAA7B,CAAA,CAAc,iBAAA,QAAA,cAAA,KAAA,QAAA,cAAA,GAAc,EAAd,CAAA,CAAd;AAKA,OAAO,MAAP,CAAc,cAAd;AAEA,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADLA,QAAQ,OAAR,GCKe,cDLf","file":"System/Collections/Enumeration/IteratorResult.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst VOID0 = void (0);\nclass IteratorResult {\n    constructor(value, index, done = false) {\n        this.value = value;\n        this.index = index;\n        this.done = done;\n        Object.freeze(this);\n    }\n}\nexports.IteratorResult = IteratorResult;\n(function (IteratorResult) {\n    IteratorResult.Done = new IteratorResult(VOID0, VOID0, true);\n    function GetDone(value) { return IteratorResult.Done; }\n    IteratorResult.GetDone = GetDone;\n})(IteratorResult = exports.IteratorResult || (exports.IteratorResult = {}));\nObject.freeze(IteratorResult);\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = IteratorResult;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {IIteratorResult} from \"./IIterator\";\r\n\r\nconst VOID0:any = void(0);\r\n\r\nexport class IteratorResult<T> implements IIteratorResult<T>\r\n{\r\n\tconstructor(\r\n\t\tpublic value:T,\r\n\t\tpublic index?:number,\r\n\t\tpublic done:boolean = false)\r\n\t{\r\n\t\tObject.freeze(this);\r\n\t}\r\n}\r\n\r\nexport module IteratorResult {\r\n\texport const Done:IteratorResult<any> = new IteratorResult<any>(VOID0, VOID0, true);\r\n\texport function GetDone(value?:any):IteratorResult<any> { return Done; }\r\n}\r\n\r\nObject.freeze(IteratorResult);\r\n\r\nexport default IteratorResult;"]}