{"version":3,"sources":["System/Collections/Enumeration/ArrayEnumerator.js","System/Collections/Enumeration/ArrayEnumerator.ts"],"names":[],"mappings":";;;;AAIA;;;;;;;;ACEA,IAAA,oBAAA,QAA8B,mBAA9B,CAAA;AACA,IAAA,UAAA,QAAmB,aAAnB,CAAA;;IAGA;;;AAIC,aAJD,eAIC,CAAY,cAAZ,EAAiE;YAAjC,8DAAe,iBAAkB;YAAf,6DAAc,iBAAC;;8BAJlE,iBAIkE;;sEAJlE,4BAOG,YAAA;AAEC,gBAAI,QAAQ,QAAA,IAAA,CAAK,UAAL,CAAgB,cAAhB,IAAkC,gBAAlC,GAAqD,cAArD,CAFb;AAGC,mBAAO;AACN,wBAAQ,KAAR;AACA,yBAAS,KAAT;AACA,wBAAQ,QAAQ,MAAM,MAAN,GAAe,CAAvB;AACR,sBAAM,IAAN;aAJD,CAHD;SAAA,GAH+D;KAAjE;;WAJD;EAAwC,kBAAA,eAAA;;AAA3B,QAAA,eAAA,GAAe,eAAf;AAqBb,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADTA,QAAQ,OAAR,GCSe,eDTf","file":"System/Collections/Enumeration/ArrayEnumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst IndexEnumerator_1 = require(\"./IndexEnumerator\");\nconst Types_1 = require(\"../../Types\");\nclass ArrayEnumerator extends IndexEnumerator_1.IndexEnumerator {\n    constructor(arrayOrFactory, start = 0, step = 1) {\n        super(() => {\n            var array = Types_1.Type.isFunction(arrayOrFactory) ? arrayOrFactory() : arrayOrFactory;\n            return {\n                source: array,\n                pointer: start,\n                length: array ? array.length : 0,\n                step: step\n            };\n        });\n    }\n}\nexports.ArrayEnumerator = ArrayEnumerator;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = ArrayEnumerator;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {IndexEnumerator} from \"./IndexEnumerator\";\r\nimport {Type} from \"../../Types\";\r\nimport {IArray} from \"../Array/IArray\";\r\n\r\nexport class ArrayEnumerator<T> extends IndexEnumerator<T>\r\n{\r\n\tconstructor(arrayFactory:() => IArray<T>, start?:number, step?:number);\r\n\tconstructor(array:IArray<T>, start?:number, step?:number);\r\n\tconstructor(arrayOrFactory:any, start:number = 0, step:number = 1)\r\n\t{\r\n\t\tsuper(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar array = Type.isFunction(arrayOrFactory) ? arrayOrFactory() : arrayOrFactory;\r\n\t\t\t\treturn {\r\n\t\t\t\t\tsource: array,\r\n\t\t\t\t\tpointer: start,\r\n\t\t\t\t\tlength: array ? array.length : 0,\r\n\t\t\t\t\tstep: step\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ArrayEnumerator;"]}