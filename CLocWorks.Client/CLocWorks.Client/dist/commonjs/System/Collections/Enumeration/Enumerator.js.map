{"version":3,"sources":["System/Collections/Enumeration/Enumerator.js","System/Collections/Enumeration/Enumerator.ts"],"names":[],"mappings":"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","file":"System/Collections/Enumeration/Enumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst dispose_1 = require(\"../../Disposable/dispose\");\nconst Types_1 = require(\"../../Types\");\nconst ArrayEnumerator_1 = require(\"./ArrayEnumerator\");\nconst IndexEnumerator_1 = require(\"./IndexEnumerator\");\nconst UnsupportedEnumerableException_1 = require(\"./UnsupportedEnumerableException\");\nconst InfiniteEnumerator_1 = require(\"./InfiniteEnumerator\");\nconst EmptyEnumerator_1 = require(\"./EmptyEnumerator\");\nconst IteratorEnumerator_1 = require(\"./IteratorEnumerator\");\nconst VOID0 = void (0), STRING_EMPTY = \"\", ENDLESS_EXCEPTION_MESSAGE = 'Cannot call forEach on an endless enumerable. ' +\n    'Would result in an infinite loop that could hang the current process.';\nfunction throwIfEndless(isEndless) {\n    if (isEndless)\n        throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException(ENDLESS_EXCEPTION_MESSAGE);\n}\nexports.throwIfEndless = throwIfEndless;\nfunction initArrayFrom(source, max = Infinity) {\n    if (Array.isArray(source) || Types_1.Type.isString(source)) {\n        var len = Math.min(source.length, max);\n        if (isFinite(len)) {\n            if (len > 65535)\n                return new Array(len);\n            var result = [];\n            result.length = len;\n            return result;\n        }\n    }\n    return [];\n}\nfunction from(source) {\n    if (!source)\n        return EmptyEnumerator_1.EmptyEnumerator;\n    if (Array.isArray(source))\n        return new ArrayEnumerator_1.ArrayEnumerator(source);\n    if (Types_1.Type.isArrayLike(source)) {\n        return new IndexEnumerator_1.IndexEnumerator(() => {\n            return {\n                source: source,\n                length: source.length,\n                pointer: 0,\n                step: 1\n            };\n        });\n    }\n    if (!Types_1.Type.isPrimitive(source)) {\n        if (isEnumerable(source))\n            return source.getEnumerator();\n        if (Types_1.Type.isFunction(source))\n            return new InfiniteEnumerator_1.InfiniteEnumerator(source);\n        if (isIterator(source))\n            return new IteratorEnumerator_1.IteratorEnumerator(source);\n    }\n    throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException();\n}\nexports.from = from;\nfunction isEnumerable(instance) {\n    return Types_1.Type.hasMemberOfType(instance, \"getEnumerator\", Types_1.Type.FUNCTION);\n}\nexports.isEnumerable = isEnumerable;\nfunction isEnumerableOrArrayLike(instance) {\n    return Types_1.Type.isArrayLike(instance) || isEnumerable(instance);\n}\nexports.isEnumerableOrArrayLike = isEnumerableOrArrayLike;\nfunction isEnumerator(instance) {\n    return Types_1.Type.hasMemberOfType(instance, \"moveNext\", Types_1.Type.FUNCTION);\n}\nexports.isEnumerator = isEnumerator;\nfunction isIterator(instance) {\n    return Types_1.Type.hasMemberOfType(instance, \"next\", Types_1.Type.FUNCTION);\n}\nexports.isIterator = isIterator;\nfunction forEach(e, action, max = Infinity) {\n    if (e === STRING_EMPTY)\n        return 0;\n    if (e && max > 0) {\n        if (Types_1.Type.isArrayLike(e)) {\n            throwIfEndless(!isFinite(max) && !isFinite(e.length));\n            let i = 0;\n            for (; i < Math.min(e.length, max); i++) {\n                if (action(e[i], i) === false)\n                    break;\n            }\n            return i;\n        }\n        if (isEnumerator(e)) {\n            throwIfEndless(!isFinite(max) && e.isEndless);\n            let i = 0;\n            while (max > i && e.moveNext()) {\n                if (action(e.current, i++) === false)\n                    break;\n            }\n            return i;\n        }\n        if (isEnumerable(e)) {\n            throwIfEndless(!isFinite(max) && e.isEndless);\n            return dispose_1.using(e.getEnumerator(), f => forEach(f, action, max));\n        }\n        if (isIterator(e)) {\n            throwIfEndless(!isFinite(max));\n            let i = 0, r;\n            while (max > i && !(r = e.next()).done) {\n                if (action(r.value, i++) === false)\n                    break;\n            }\n            return i;\n        }\n    }\n    return -1;\n}\nexports.forEach = forEach;\nfunction toArray(source, max = Infinity) {\n    if (source === STRING_EMPTY)\n        return [];\n    if (!isFinite(max) && Array.isArray(source))\n        return source.slice();\n    var result = initArrayFrom(source, max);\n    if (-1 === forEach(source, (e, i) => { result[i] = e; }, max))\n        throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException();\n    return result;\n}\nexports.toArray = toArray;\nfunction map(source, selector, max = Infinity) {\n    if (source === STRING_EMPTY)\n        return [];\n    if (!isFinite(max) && Array.isArray(source))\n        return source.map(selector);\n    var result = initArrayFrom(source, max);\n    if (-1 === forEach(source, (e, i) => { result[i] = selector(e); }, max))\n        throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException();\n    return result;\n}\nexports.map = map;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {using} from \"../../Disposable/dispose\";\r\nimport {Type} from \"../../Types\";\r\nimport {ArrayEnumerator} from \"./ArrayEnumerator\";\r\nimport {IndexEnumerator} from \"./IndexEnumerator\";\r\nimport {UnsupportedEnumerableException} from \"./UnsupportedEnumerableException\";\r\nimport {Selector} from \"../../FunctionTypes\";\r\nimport {IEnumerator} from \"./IEnumerator\";\r\nimport {IEnumerable} from \"./IEnumerable\";\r\nimport {IEnumerableOrArray} from \"../IEnumerableOrArray\";\r\nimport {InfiniteValueFactory, InfiniteEnumerator} from \"./InfiniteEnumerator\";\r\nimport {EmptyEnumerator as Empty} from \"./EmptyEnumerator\";\r\nimport {IIterator, IIteratorResult} from \"./IIterator\";\r\nimport {IteratorEnumerator} from \"./IteratorEnumerator\";\r\n\r\nconst\r\n\tVOID0:any                 = void(0),\r\n\tSTRING_EMPTY:string       = \"\",\r\n\tENDLESS_EXCEPTION_MESSAGE =\r\n\t\t'Cannot call forEach on an endless enumerable. ' +\r\n\t\t'Would result in an infinite loop that could hang the current process.';\r\n\r\nexport function throwIfEndless(isEndless:boolean):void\r\n{\r\n\tif(isEndless) throw new UnsupportedEnumerableException(ENDLESS_EXCEPTION_MESSAGE);\r\n}\r\n\r\nfunction initArrayFrom(\r\n\tsource:IEnumerableOrArray<any>|IEnumerator<any>,\r\n\tmax:number = Infinity):any[]\r\n{\r\n\tif(Array.isArray(source) || Type.isString(source))\r\n\t{\r\n\t\tvar len = Math.min(source.length, max);\r\n\t\tif(isFinite(len))\r\n\t\t{\r\n\t\t\tif(len>65535) return new Array(len);\r\n\t\t\tvar result:any[] = [];\r\n\t\t\tresult.length = len;\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\treturn [];\r\n}\r\n\r\n\r\n// Could be array, or IEnumerable...\r\nexport function from<T>(source:IEnumerableOrArray<T>|InfiniteValueFactory<T>|IIterator<T>):IEnumerator<T>\r\n{\r\n\t// To simplify and prevent null reference exceptions:\r\n\tif(!source)\r\n\t\treturn Empty;\r\n\r\n\tif(Array.isArray(source))\r\n\t\treturn new ArrayEnumerator<T>(<T[]>source);\r\n\r\n\tif(Type.isArrayLike<T>(source))\r\n\t{\r\n\t\treturn new IndexEnumerator<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tsource: source,\r\n\t\t\t\t\tlength: source.length,\r\n\t\t\t\t\tpointer: 0,\r\n\t\t\t\t\tstep: 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tif(!Type.isPrimitive(source))\r\n\t{\r\n\t\tif(isEnumerable<T>(source))\r\n\t\t\treturn source.getEnumerator();\r\n\r\n\t\tif(Type.isFunction(source))\r\n\t\t\treturn new InfiniteEnumerator(source);\r\n\r\n\t\tif(isIterator(source))\r\n\t\t\treturn new IteratorEnumerator(source);\r\n\r\n\t}\r\n\r\n\tthrow new UnsupportedEnumerableException();\r\n}\r\n\r\nexport function isEnumerable<T>(instance:any):instance is IEnumerable<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerable<T>>(instance, \"getEnumerator\", Type.FUNCTION);\r\n}\r\n\r\nexport function isEnumerableOrArrayLike<T>(instance:any):instance is IEnumerableOrArray<T>\r\n{\r\n\treturn Type.isArrayLike(instance) || isEnumerable(instance);\r\n}\r\n\r\nexport function isEnumerator<T>(instance:any):instance is IEnumerator<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerator<T>>(instance, \"moveNext\", Type.FUNCTION);\r\n}\r\n\r\nexport function isIterator<T>(instance:any):instance is IIterator<T>\r\n{\r\n\treturn Type.hasMemberOfType<IIterator<T>>(instance, \"next\", Type.FUNCTION);\r\n}\r\n\r\n/**\r\n * Flexible method for iterating any enumerable, enumerable, array, or array-like object.\r\n * @param e The enumeration to loop on.\r\n * @param action The action to take on each.\r\n * @param max Stops after max is reached.  Allows for forEach to be called on infinite enumerations.\r\n * @returns the total times iterated.  If the enumerable is unrecognized then -1.\r\n */\r\nexport function forEach<T>(\r\n\te:IEnumerableOrArray<T>|IEnumerator<T>|IIterator<T>,\r\n\taction:(element:T, index?:number) => any,\r\n\tmax:number = Infinity):number\r\n{\r\n\tif(<any>e===STRING_EMPTY) return 0;\r\n\r\n\tif(e && max>0)\r\n\t{\r\n\t\tif(Type.isArrayLike<T>(e))\r\n\t\t{\r\n\t\t\t// Assume e.length is constant or at least doesn't deviate to infinite or NaN.\r\n\t\t\tthrowIfEndless(!isFinite(max) && !isFinite(e.length));\r\n\t\t\tlet i = 0;\r\n\t\t\tfor(; i<Math.min(e.length, max); i++)\r\n\t\t\t{\r\n\t\t\t\tif(action(e[i], i)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn i;\r\n\t\t}\r\n\r\n\r\n\t\tif(isEnumerator<T>(e))\r\n\t\t{\r\n\t\t\tthrowIfEndless(!isFinite(max) && e.isEndless);\r\n\r\n\t\t\tlet i = 0;\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\twhile(max>i && e.moveNext())\r\n\t\t\t{\r\n\t\t\t\tif(action(e.current, i++)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn i;\r\n\t\t}\r\n\r\n\t\tif(isEnumerable<T>(e))\r\n\t\t{\r\n\t\t\tthrowIfEndless(!isFinite(max) && e.isEndless);\r\n\r\n\t\t\t// For enumerators that aren't EnumerableBase, ensure dispose is called.\r\n\t\t\treturn using(\r\n\t\t\t\t(<IEnumerable<T>>e).getEnumerator(),\r\n\t\t\t\tf=>forEach(f, action, max)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif(isIterator<T>(e)) {\r\n\t\t\t// For our purpose iterators are endless and a max must be specified before iterating.\r\n\t\t\tthrowIfEndless(!isFinite(max));\r\n\r\n\t\t\tlet i = 0, r:IIteratorResult<T>;\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\twhile(max>i && !(r = e.next()).done)\r\n\t\t\t{\r\n\t\t\t\tif(action(r.value, i++)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n\r\n}\r\n\r\n/**\r\n * Converts any enumerable to an array.\r\n * @param source\r\n * @param max Stops after max is reached.  Allows for forEach to be called on infinite enumerations.\r\n * @returns {any}\r\n */\r\nexport function toArray<T>(\r\n\tsource:IEnumerableOrArray<T>|IEnumerator<T>,\r\n\tmax:number = Infinity):T[]\r\n{\r\n\tif(<any>source===STRING_EMPTY) return [];\r\n\r\n\tif(!isFinite(max) && Array.isArray(source))\r\n\t\treturn source.slice();\r\n\r\n\tvar result:T[] = initArrayFrom(source, max);\r\n\tif(-1===forEach(source, (e, i) => { result[i] = e; }, max))\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Converts any enumerable to an array of selected values.\r\n * @param source\r\n * @param selector\r\n * @param max Stops after max is reached.  Allows for forEach to be called on infinite enumerations.\r\n * @returns {TResult[]}\r\n */\r\nexport function map<T,TResult>(\r\n\tsource:IEnumerableOrArray<T>|IEnumerator<T>,\r\n\tselector:Selector<T,TResult>,\r\n\tmax:number = Infinity):TResult[]\r\n{\r\n\tif(<any>source===STRING_EMPTY) return [];\r\n\r\n\tif(!isFinite(max) && Array.isArray(source))\r\n\t\treturn source.map(selector);\r\n\r\n\tvar result:TResult[] = initArrayFrom(source, max);\r\n\tif(-1===forEach(source, (e, i) => { result[i] = selector(e); }, max))\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\r\n\treturn result;\r\n}"]}