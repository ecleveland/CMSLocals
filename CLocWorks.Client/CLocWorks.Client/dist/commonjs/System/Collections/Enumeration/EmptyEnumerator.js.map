{"version":3,"sources":["System/Collections/Enumeration/EmptyEnumerator.js","System/Collections/Enumeration/EmptyEnumerator.ts"],"names":[],"mappings":";;;;AAIA;;ACGA,IAAA,mBAAA,QAA6B,kBAA7B,CAAA;AACA,IAAA,cAAA,QAAwB,iBAAxB,CAAA;AAEA,IAAM,QAAY,KAAK,CAAL;AAQL,QAAA,eAAA,GAAmC,OAAO,MAAP,CAAc;AAC7D,aAAS,KAAT;AACA,cAAU,YAAA,SAAA,CAAU,KAAV;AACV,eAAW,YAAA,SAAA,CAAU,KAAV;AACX,UAAM,iBAAA,cAAA,CAAe,OAAf;AACN,cAAU,iBAAA,cAAA,CAAe,OAAf;AACV,WAAO,YAAA,SAAA,CAAU,KAAV;AACP,aAAS,YAAA,SAAA,CAAU,KAAV;AACT,eAAW,KAAX;CAR+C,CAAnC;AAUb,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADTA,QAAQ,OAAR,GCSe,QAAA,eAAA","file":"System/Collections/Enumeration/EmptyEnumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst IteratorResult_1 = require(\"./IteratorResult\");\nconst Functions_1 = require(\"../../Functions\");\nconst VOID0 = void 0;\nexports.EmptyEnumerator = Object.freeze({\n    current: VOID0,\n    moveNext: Functions_1.Functions.False,\n    nextValue: Functions_1.Functions.Blank,\n    next: IteratorResult_1.IteratorResult.GetDone,\n    \"return\": IteratorResult_1.IteratorResult.GetDone,\n    reset: Functions_1.Functions.Blank,\n    dispose: Functions_1.Functions.Blank,\n    isEndless: false\n});\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = exports.EmptyEnumerator;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {IEnumerator} from \"./IEnumerator\";\r\nimport {IteratorResult} from \"./IteratorResult\";\r\nimport {Functions} from \"../../Functions\";\r\n\r\nconst VOID0:any = void 0;\r\n\r\n\r\n/**\r\n * A simplified stripped down enumerable that is always complete and has no results.\r\n * Frozen and exported as 'empty' to allow for reuse.\r\n */\r\n\r\nexport const EmptyEnumerator:IEnumerator<any> = Object.freeze({\r\n\tcurrent: VOID0,\r\n\tmoveNext: Functions.False,\r\n\tnextValue: Functions.Blank,\r\n\tnext: IteratorResult.GetDone,\r\n\t\"return\": IteratorResult.GetDone,\r\n\treset: Functions.Blank,\r\n\tdispose: Functions.Blank,\r\n\tisEndless: false\r\n});\r\nexport default EmptyEnumerator;"]}