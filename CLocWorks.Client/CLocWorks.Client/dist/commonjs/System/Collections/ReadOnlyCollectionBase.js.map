{"version":3,"sources":["System/Collections/ReadOnlyCollectionBase.js","System/Collections/ReadOnlyCollectionBase.ts"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;ACCA,IAAA,mBAAA,QAA6B,kBAA7B,CAAA;;IAGA;;;;;;;;;;;mCAMmB;AAEjB,mBAAO,KAAK,SAAL,EAAP,CAFiB;;;;wCAKK;AAEtB,mBAAO,IAAP,CAFsB;;;;qCAKA,OAAO;AAE7B,mBAAO,KAAP,CAF6B;;;;wCAKJ,OAAS,KAAW;AAE7C,mBAAO,CAAP,CAF6C;;;;yCAKtB;AAEvB,mBAAO,CAAP,CAFuB;;;;wCAOX;AAEZ,mBAAO,KAAK,cAAL,EAAP,CAFY;;;;WAjCd;EACQ,iBAAA,cAAA;;AADc,QAAA,sBAAA,GAAsB,sBAAtB;AAwCtB,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ADpBA,QAAQ,OAAR,GCoBe,sBDpBf","file":"System/Collections/ReadOnlyCollectionBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst CollectionBase_1 = require(\"./CollectionBase\");\nclass ReadOnlyCollectionBase extends CollectionBase_1.CollectionBase {\n    getCount() {\n        return this._getCount();\n    }\n    getIsReadOnly() {\n        return true;\n    }\n    _addInternal(entry) {\n        return false;\n    }\n    _removeInternal(entry, max) {\n        return 0;\n    }\n    _clearInternal() {\n        return 0;\n    }\n    getEnumerator() {\n        return this._getEnumerator();\n    }\n}\nexports.ReadOnlyCollectionBase = ReadOnlyCollectionBase;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = ReadOnlyCollectionBase;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\n\r\nexport abstract class ReadOnlyCollectionBase<T>\r\nextends CollectionBase<T>\r\n{\r\n\r\n\tprotected _getCount:()=>number;\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._getCount();\r\n\t}\r\n\r\n\tprotected getIsReadOnly():boolean\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max?:number):number\r\n\t{\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tprotected _getEnumerator:()=>IEnumerator<T>;\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\treturn this._getEnumerator();\r\n\t}\r\n\r\n}\r\n\r\nexport default ReadOnlyCollectionBase;"]}