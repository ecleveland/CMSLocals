{"version":3,"sources":["System/Collections/Queue.js","System/Collections/Queue.ts"],"names":[],"mappings":"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","file":"System/Collections/Queue.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based Upon: http://referencesource.microsoft.com/#System/CompMod/system/collections/generic/queue.cs\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst Compare_1 = require(\"../Compare\");\nconst AU = require(\"./Array/Utility\");\nconst Types_1 = require(\"../Types\");\nconst Integer_1 = require(\"../Integer\");\nconst EnumeratorBase_1 = require(\"./Enumeration/EnumeratorBase\");\nconst NotImplementedException_1 = require(\"../Exceptions/NotImplementedException\");\nconst InvalidOperationException_1 = require(\"../Exceptions/InvalidOperationException\");\nconst ArgumentOutOfRangeException_1 = require(\"../Exceptions/ArgumentOutOfRangeException\");\nconst CollectionBase_1 = require(\"./CollectionBase\");\nconst MINIMUM_GROW = 4;\nconst SHRINK_THRESHOLD = 32;\nconst GROW_FACTOR_HALF = 100;\nconst DEFAULT_CAPACITY = MINIMUM_GROW;\nvar emptyArray = [];\nclass Queue extends CollectionBase_1.CollectionBase {\n    constructor(source, equalityComparer = Compare_1.areEqual) {\n        super(null, equalityComparer);\n        var _ = this;\n        _._head = 0;\n        _._tail = 0;\n        _._size = 0;\n        if (!source)\n            _._array = emptyArray;\n        else {\n            if (Types_1.Type.isNumber(source)) {\n                var capacity = source;\n                assertIntegerZeroOrGreater(capacity, \"capacity\");\n                _._array = capacity\n                    ? AU.initialize(capacity)\n                    : emptyArray;\n            }\n            else {\n                var se = source;\n                _._array = AU.initialize(Types_1.Type.isArrayLike(se)\n                    ? se.length\n                    : DEFAULT_CAPACITY);\n                _._importEntries(se);\n            }\n        }\n        _._capacity = _._array.length;\n    }\n    getCount() {\n        return this._size;\n    }\n    _addInternal(item) {\n        var _ = this, array = _._array, size = _._size, len = _._capacity;\n        if (size == len) {\n            var newCapacity = len * GROW_FACTOR_HALF;\n            if (newCapacity < len + MINIMUM_GROW)\n                newCapacity = len + MINIMUM_GROW;\n            _.setCapacity(newCapacity);\n            array = _._array;\n            len = _._capacity;\n        }\n        var tail = _._tail;\n        array[tail] = item;\n        _._tail = (tail + 1) % len;\n        _._size = size + 1;\n        return true;\n    }\n    _removeInternal(item, max) {\n        throw new NotImplementedException_1.NotImplementedException(\"ICollection\\<T\\>.remove is not implemented in Queue\\<T\\>\" +\n            \" since it would require destroying the underlying array to remove the item.\");\n    }\n    _clearInternal() {\n        var _ = this, array = _._array, head = _._head, tail = _._tail, size = _._size;\n        if (head < tail)\n            AU.clear(array, head, tail);\n        else {\n            AU.clear(array, head, array.length - head);\n            AU.clear(array, 0, tail);\n        }\n        _._head = 0;\n        _._tail = 0;\n        _._size = 0;\n        _.trimExcess();\n        return size;\n    }\n    _onDispose() {\n        super._onDispose();\n        var _ = this;\n        if (_._array != emptyArray) {\n            _._array.length = _._capacity = 0;\n            _._array = emptyArray;\n        }\n    }\n    dump(max = Infinity) {\n        var _ = this, result = [];\n        if (isFinite(max)) {\n            Integer_1.Integer.assertZeroOrGreater(max);\n            if (max !== 0) {\n                while (max-- && _._size) {\n                    result.push(_._dequeueInternal());\n                }\n            }\n        }\n        else {\n            while (_._size) {\n                result.push(_._dequeueInternal());\n            }\n        }\n        _.trimExcess();\n        _._signalModification();\n        return result;\n    }\n    forEach(action) {\n        return super.forEach(action, true);\n    }\n    setCapacity(capacity) {\n        assertIntegerZeroOrGreater(capacity, \"capacity\");\n        var _ = this, array = _._array, len = _._capacity;\n        if (capacity == len)\n            return;\n        var head = _._head, tail = _._tail, size = _._size;\n        if (array != emptyArray && capacity > len && head < tail) {\n            array.length = _._capacity = capacity;\n            _._version++;\n            return;\n        }\n        var newArray = AU.initialize(capacity);\n        if (size > 0) {\n            if (head < tail) {\n                AU.copyTo(array, newArray, head, 0, size);\n            }\n            else {\n                AU.copyTo(array, newArray, head, 0, len - head);\n                AU.copyTo(array, newArray, 0, len - head, tail);\n            }\n        }\n        _._array = newArray;\n        _._capacity = capacity;\n        _._head = 0;\n        _._tail = (size == capacity) ? 0 : size;\n        _._signalModification(true);\n    }\n    enqueue(item) {\n        this.add(item);\n    }\n    _dequeueInternal(throwIfEmpty = false) {\n        var _ = this;\n        if (_._size == 0) {\n            if (throwIfEmpty)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Cannot dequeue an empty queue.\");\n            return void 0;\n        }\n        var array = _._array, head = _._head;\n        var removed = _._array[head];\n        array[head] = null;\n        _._head = (head + 1) % _._capacity;\n        _._size--;\n        _._incrementModified();\n        return removed;\n    }\n    dequeue(throwIfEmpty = false) {\n        var _ = this;\n        _.assertModifiable();\n        var modified = !!_._size;\n        var v = this._dequeueInternal(throwIfEmpty);\n        if (modified && _._size < _._capacity / 2)\n            _.trimExcess(SHRINK_THRESHOLD);\n        _._signalModification();\n        return v;\n    }\n    tryDequeue(out) {\n        if (!this._size)\n            return false;\n        var d = this.dequeue();\n        if (out)\n            out(d);\n        return true;\n    }\n    _getElement(index) {\n        assertIntegerZeroOrGreater(index, \"index\");\n        var _ = this;\n        return _._array[(_._head + index) % _._capacity];\n    }\n    peek() {\n        if (this._size == 0)\n            throw new InvalidOperationException_1.InvalidOperationException(\"Cannot call peek on an empty queue.\");\n        return this._array[this._head];\n    }\n    trimExcess(threshold) {\n        var _ = this;\n        var size = _._size;\n        if (size < Math.floor(_._capacity * 0.9) && (isNaN(threshold) || threshold < size))\n            _.setCapacity(size);\n    }\n    getEnumerator() {\n        var _ = this;\n        var index;\n        var version;\n        return new EnumeratorBase_1.EnumeratorBase(() => {\n            version = _._version;\n            index = 0;\n        }, (yielder) => {\n            _.assertVersion(version);\n            if (index == _._size)\n                return yielder.yieldBreak();\n            return yielder.yieldReturn(_._getElement(index++));\n        });\n    }\n}\nexports.Queue = Queue;\nfunction assertZeroOrGreater(value, property) {\n    if (value < 0)\n        throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(property, value, \"Must be greater than zero\");\n}\nfunction assertIntegerZeroOrGreater(value, property) {\n    Integer_1.Integer.assert(value, property);\n    assertZeroOrGreater(value, property);\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Queue;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://referencesource.microsoft.com/#System/CompMod/system/collections/generic/queue.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport * as AU from \"./Array/Utility\";\r\nimport {Type} from \"../Types\";\r\nimport {Integer} from \"../Integer\";\r\nimport {EnumeratorBase} from \"./Enumeration/EnumeratorBase\";\r\nimport {NotImplementedException} from \"../Exceptions/NotImplementedException\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentOutOfRangeException} from \"../Exceptions/ArgumentOutOfRangeException\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {EqualityComparison, Predicate, Action} from \"../FunctionTypes\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\n\r\nconst MINIMUM_GROW:number = 4;\r\nconst SHRINK_THRESHOLD:number = 32; // Unused?\r\n// var GROW_FACTOR: number = 200;  // double each time\r\nconst GROW_FACTOR_HALF:number = 100;\r\nconst DEFAULT_CAPACITY:number = MINIMUM_GROW;\r\nvar emptyArray:any[] = [];\r\n\r\nexport class Queue<T>\r\nextends CollectionBase<T>\r\n{\r\n\r\n\tprivate _array:T[];\r\n\tprivate _head:number;       // First valid element in the queue\r\n\tprivate _tail:number;       // Last valid element in the queue\r\n\tprivate _size:number;       // Number of elements.\r\n\tprivate _capacity:number;   // Maps to _array.length;\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T> | number,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(null, equalityComparer);\r\n\t\tvar _ = this;\r\n\t\t_._head = 0;\r\n\t\t_._tail = 0;\r\n\t\t_._size = 0;\r\n\r\n\t\tif(!source)\r\n\t\t\t_._array = emptyArray;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(Type.isNumber(source))\r\n\t\t\t{\r\n\t\t\t\tvar capacity = <number>source;\r\n\t\t\t\tassertIntegerZeroOrGreater(capacity, \"capacity\");\r\n\r\n\t\t\t\t_._array = capacity\r\n\t\t\t\t\t? AU.initialize<T>(capacity)\r\n\t\t\t\t\t: emptyArray;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tvar se = <IEnumerableOrArray<T>> source;\r\n\t\t\t\t_._array = AU.initialize<T>(\r\n\t\t\t\t\tType.isArrayLike(se)\r\n\t\t\t\t\t\t? se.length\r\n\t\t\t\t\t\t: DEFAULT_CAPACITY\r\n\t\t\t\t);\r\n\r\n\t\t\t\t_._importEntries(se);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_._capacity = _._array.length;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._size;\r\n\t}\r\n\r\n\tprotected _addInternal(item:T):boolean\r\n\t{\r\n\t\tvar _ = this, array = _._array, size = _._size, len = _._capacity;\r\n\t\tif(size==len)\r\n\t\t{\r\n\t\t\tvar newCapacity = len*GROW_FACTOR_HALF;\r\n\t\t\tif(newCapacity<len + MINIMUM_GROW)\r\n\t\t\t\tnewCapacity = len + MINIMUM_GROW;\r\n\r\n\t\t\t_.setCapacity(newCapacity);\r\n\t\t\tarray = _._array;\r\n\t\t\tlen = _._capacity;\r\n\t\t}\r\n\r\n\t\tvar tail = _._tail;\r\n\t\tarray[tail] = item;\r\n\t\t_._tail = (tail + 1)%len;\r\n\t\t_._size = size + 1;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(item:T, max?:number):number\r\n\t{\r\n\t\tthrow new NotImplementedException(\r\n\t\t\t\"ICollection\\<T\\>.remove is not implemented in Queue\\<T\\>\" +\r\n\t\t\t\" since it would require destroying the underlying array to remove the item.\"\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar _ = this, array = _._array, head = _._head, tail = _._tail, size = _._size;\r\n\t\tif(head<tail)\r\n\t\t\tAU.clear(array, head, tail);\r\n\t\telse\r\n\t\t{\r\n\t\t\tAU.clear(array, head, array.length - head);\r\n\t\t\tAU.clear(array, 0, tail);\r\n\t\t}\r\n\r\n\t\t_._head = 0;\r\n\t\t_._tail = 0;\r\n\t\t_._size = 0;\r\n\r\n\t\t_.trimExcess();\r\n\r\n\t\treturn size;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tvar _ = this;\r\n\t\tif(_._array!=emptyArray)\r\n\t\t{\r\n\t\t\t_._array.length = _._capacity = 0;\r\n\t\t\t_._array = emptyArray;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Dequeues entries into an array.\r\n\t */\r\n\tdump(max:number = Infinity):T[]\r\n\t{\r\n\t\tvar _ = this, result:T[] = [];\r\n\r\n\t\tif(isFinite(max))\r\n\t\t{\r\n\t\t\tInteger.assertZeroOrGreater(max);\r\n\t\t\tif(max!==0)\r\n\t\t\t{\r\n\t\t\t\twhile(max-- && _._size)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.push(_._dequeueInternal());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\twhile(_._size)\r\n\t\t\t{\r\n\t\t\t\tresult.push(_._dequeueInternal());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_.trimExcess();\r\n\t\t_._signalModification();\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):number\r\n\t{\r\n\t\treturn super.forEach(action, true);\r\n\t}\r\n\r\n\tsetCapacity(capacity:number):void\r\n\t{\r\n\r\n\t\tassertIntegerZeroOrGreater(capacity, \"capacity\");\r\n\r\n\t\tvar _ = this, array = _._array, len = _._capacity;\r\n\r\n\t\tif(capacity==len)\r\n\t\t\treturn;\r\n\r\n\t\tvar head = _._head, tail = _._tail, size = _._size;\r\n\r\n\t\t// Special case where we can simply extend the length of the array. (JavaScript only)\r\n\t\tif(array!=emptyArray && capacity>len && head<tail)\r\n\t\t{\r\n\t\t\tarray.length = _._capacity = capacity;\r\n\t\t\t_._version++;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// We create a new array because modifying an existing one could be slow.\r\n\t\tvar newArray:T[] = AU.initialize<T>(capacity);\r\n\t\tif(size>0)\r\n\t\t{\r\n\t\t\tif(head<tail)\r\n\t\t\t{\r\n\t\t\t\tAU.copyTo(array, newArray, head, 0, size);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tAU.copyTo(array, newArray, head, 0, len - head);\r\n\t\t\t\tAU.copyTo(array, newArray, 0, len - head, tail);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_._array = newArray;\r\n\t\t_._capacity = capacity;\r\n\t\t_._head = 0;\r\n\t\t_._tail = (size==capacity) ? 0 : size;\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\tenqueue(item:T):void\r\n\t{\r\n\t\tthis.add(item);\r\n\t}\r\n\r\n\r\n\tprotected _dequeueInternal(throwIfEmpty:boolean = false):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._size==0)\r\n\t\t{\r\n\t\t\tif(throwIfEmpty)\r\n\t\t\t\tthrow new InvalidOperationException(\"Cannot dequeue an empty queue.\");\r\n\t\t\treturn void 0;\r\n\t\t}\r\n\r\n\t\tvar array = _._array, head = _._head;\r\n\r\n\t\tvar removed = _._array[head];\r\n\t\tarray[head] = null;\r\n\t\t_._head = (head + 1)%_._capacity;\r\n\r\n\t\t_._size--;\r\n\r\n\t\t_._incrementModified();\r\n\r\n\t\treturn removed;\r\n\t}\r\n\r\n\tdequeue(throwIfEmpty:boolean = false):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\r\n\t\t// A single dequeue shouldn't need update recursion tracking...\r\n\t\tvar modified = !!_._size;\r\n\t\tvar v = this._dequeueInternal(throwIfEmpty);\r\n\r\n\t\t// This may preemptively trigger the _onModified.\r\n\t\tif(modified && _._size<_._capacity/2)\r\n\t\t\t_.trimExcess(SHRINK_THRESHOLD);\r\n\r\n\t\t_._signalModification();\r\n\t\treturn v;\r\n\t}\r\n\r\n\r\n\ttryDequeue(out:(value:T)=>void):boolean\r\n\t{\r\n\t\tif(!this._size) return false;\r\n\t\tvar d = this.dequeue();\r\n\t\tif(out) out(d);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprivate _getElement(index:number):T\r\n\t{\r\n\t\tassertIntegerZeroOrGreater(index, \"index\");\r\n\r\n\t\tvar _ = this;\r\n\t\treturn _._array[(_._head + index)%_._capacity];\r\n\t}\r\n\r\n\tpeek():T\r\n\t{\r\n\t\tif(this._size==0)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot call peek on an empty queue.\");\r\n\r\n\t\treturn this._array[this._head];\r\n\t}\r\n\r\n\ttrimExcess(threshold?:number):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar size = _._size;\r\n\t\tif(size<Math.floor(_._capacity*0.9) && (isNaN(threshold) || threshold<size))\r\n\t\t\t_.setCapacity(size);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar index:number;\r\n\t\tvar version:number;\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tversion = _._version;\r\n\t\t\t\tindex = 0;\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\t_.assertVersion(version);\r\n\r\n\t\t\t\tif(index==_._size)\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\treturn yielder.yieldReturn(_._getElement(index++));\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction assertZeroOrGreater(value:number, property:string):void\r\n{\r\n\tif(value<0)\r\n\t\tthrow new ArgumentOutOfRangeException(property, value, \"Must be greater than zero\");\r\n\r\n}\r\n\r\nfunction assertIntegerZeroOrGreater(value:number, property:string):void\r\n{\r\n\tInteger.assert(value, property);\r\n\tassertZeroOrGreater(value, property);\r\n}\r\n\r\nexport default Queue;\r\n"]}