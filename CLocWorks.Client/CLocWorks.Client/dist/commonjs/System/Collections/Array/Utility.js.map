{"version":3,"sources":["System/Collections/Array/Utility.js","System/Collections/Array/Utility.ts"],"names":[],"mappings":";;;;AAIA;;ACCA,IAAA,UAAA,QAAmB,aAAnB,CAAA;AACA,IAAA,YAAA,QAAsB,eAAtB,CAAA;AACA,IAAA,YAAA,QAAuB,eAAvB,CAAA;AACA,IAAA,sBAAA,QAAgC,oCAAhC,CAAA;AACA,IAAA,0BAAA,QAAoC,wCAApC,CAAA;AACA,IAAA,gCAAA,QAA0C,8CAA1C,CAAA;AAUA,SAAA,UAAA,CAA8B,MAA9B,EAA2C;AAE1C,cAAA,OAAA,CAAQ,MAAR,CAAe,MAAf,EAAuB,QAAvB,EAF0C;AAI1C,QAAI,KAAJ,CAJ0C;AAK1C,QAAG,SAAO,KAAP,EACF,QAAQ,IAAI,KAAJ,CAAU,MAAV,CAAR,CADD,KAGA;AACC,gBAAQ,EAAR,CADD;AAEC,cAAM,MAAN,GAAe,MAAf,CAFD;KAHA;AAOA,WAAO,KAAP,CAZ0C;CAA3C;AAAgB,QAAA,UAAA,GAAU,UAAV;AAsBhB,SAAA,IAAA,CACC,MADD,EAGyB;QADxB,oEAAqB,iBACG;QAAxB,+DAAgB,wBAAQ;;AAExB,QAAG,CAAC,MAAD,EAAS,OAAY,MAAZ,CAAZ;AACA,WAAO,OACN,MADM,EAEN,WAAc,KAAK,GAAL,CAAS,MAAT,EAAiB,KAAK,GAAL,CAAS,OAAO,MAAP,GAAgB,WAAhB,EAA6B,CAAtC,CAAjB,CAAd,CAFM,EAGN,WAHM,EAGO,CAHP,EAGU,MAHV,CAAP,CAHwB;CAHzB;AAAgB,QAAA,IAAA,GAAI,IAAJ;AAYhB,IACC,MAAO,iBAAP;IACA,MAAO,iBAAP;IACA,OAAO,2BAAP;IACA,MAAO,+BAAP;AAWD,SAAA,MAAA,CACC,MADD,EAEC,WAFD,EAKyB;QAFxB,oEAAqB,iBAEG;QADxB,yEAA0B,iBACF;QAAxB,+DAAgB,wBAAQ;;AAExB,QAAG,CAAC,MAAD,EACF,MAAM,IAAI,wBAAA,qBAAA,CAAsB,QAA1B,EAAoC,GAApC,CAAN,CADD;AAGA,QAAG,CAAC,WAAD,EACF,MAAM,IAAI,wBAAA,qBAAA,CAAsB,aAA1B,EAAyC,GAAzC,CAAN,CADD;AAGA,QAAG,cAAY,CAAZ,EACF,MAAM,IAAI,8BAAA,2BAAA,CAA4B,aAAhC,EAA+C,WAA/C,EAA4D,IAA5D,CAAN,CADD;AAGA,QAAI,eAAe,OAAO,MAAP,CAXK;AAYxB,QAAG,CAAC,YAAD,EACF,OAAO,WAAP,CADD;AAEA,QAAG,eAAa,YAAb,EACF,MAAM,IAAI,8BAAA,2BAAA,CAA4B,aAAhC,EAA+C,WAA/C,EAA4D,mDAA5D,CAAN,CADD;AAGA,QAAG,YAAY,MAAZ,GAAmB,CAAnB,EACF,MAAM,IAAI,8BAAA,2BAAA,CAA4B,kBAAhC,EAAoD,gBAApD,EAAsE,IAAtE,CAAN,CADD;AAGA,QAAI,YAAY,OAAO,MAAP,GAAgB,WAAhB,CApBQ;AAqBxB,QAAG,SAAS,MAAT,KAAoB,SAAO,SAAP,EACtB,MAAM,IAAI,8BAAA,2BAAA,CAA4B,aAAhC,EAA+C,WAA/C,EAA4D,qEAA5D,CAAN,CADD;AAGA,aAAS,KAAK,GAAL,CAAS,MAAT,EAAiB,SAAjB,CAAT,CAxBwB;AAyBxB,QAAI,YAAY,mBAAmB,MAAnB,CAzBQ;AA0BxB,QAAG,YAAU,YAAY,MAAZ,EAAoB,YAAY,MAAZ,GAAqB,SAArB,CAAjC;AAEA,SAAI,IAAI,IAAI,CAAJ,EAAO,IAAE,MAAF,EAAU,GAAzB,EACA;AACC,oBAAY,mBAAmB,CAAnB,CAAZ,GAAoC,OAAO,cAAc,CAAd,CAA3C,CADD;KADA;AAKA,WAAO,WAAP,CAjCwB;CALzB;AAAgB,QAAA,MAAA,GAAM,MAAN;AAkDhB,SAAA,OAAA,CACC,KADD,EACkB,IADlB,EAEkD;QAAjD,yEAAyC,UAAA,QAAA,gBAAQ;;AAGjD,QAAI,MAAM,SAAS,MAAM,MAAN,CAH8B;AAIjD,QAAG,GAAH,EACA;AAEC,YAAG,MAAM,OAAN,CAAc,KAAd,KAAwB,CAAC,QAAA,IAAA,CAAK,SAAL,CAAe,IAAf,CAAD,EAC1B,OAAO,MAAM,OAAN,CAAc,IAAd,CAAP,CADD;AAGA,aAAI,IAAI,IAAI,CAAJ,EAAO,IAAE,GAAF,EAAO,GAAtB,EACA;AAEC,gBAAG,iBAAiB,MAAM,CAAN,CAAjB,EAA2B,IAA3B,CAAH,EACC,OAAO,CAAP,CADD;SAHD;KAND;AAcA,WAAO,CAAC,CAAD,CAlB0C;CAFlD;AAAgB,QAAA,OAAA,GAAO,OAAP;AA+BhB,SAAA,QAAA,CACC,KADD,EACkB,IADlB,EAEkD;QAAjD,yEAAyC,UAAA,QAAA,gBAAQ;;AAEjD,WAAO,QAAQ,KAAR,EAAe,IAAf,EAAqB,gBAArB,KAAyC,CAAC,CAAD,CAFC;CAFlD;AAAgB,QAAA,QAAA,GAAQ,QAAR;AAehB,SAAA,OAAA,CACC,KADD,EAEC,GAFD,EAGC,QAHD,EAIC,GAJD,EAIY;AAEX,QAAG,CAAC,KAAD,IAAU,CAAC,MAAM,MAAN,IAAgB,QAAM,CAAN,EAAS,OAAO,CAAP,CAAvC;AACA,QAAG,MAAI,CAAJ,EAAO,MAAM,IAAI,8BAAA,2BAAA,CAA4B,KAAhC,EAAuC,GAAvC,EAA4C,IAA5C,CAAN,CAAV;AACA,QAAG,CAAC,GAAD,EAAM,MAAM,QAAN,CAAT;AAEA,QAAI,QAAQ,CAAR,CANO;AAQX,SAAI,IAAI,IAAI,CAAJ,EAAO,MAAM,MAAM,MAAN,EAAc,IAAE,GAAF,EAAO,GAA1C,EACA;AACC,YAAG,MAAM,CAAN,MAAW,GAAX,EACH;AACC,kBAAM,CAAN,IAAW,QAAX,CADD;AAEC,cAAE,KAAF,CAFD;AAGC,gBAAG,SAAO,GAAP,EAAY,MAAf;SAJD;KAFD;AAUA,WAAO,KAAP,CAlBW;CAJZ;AAAgB,QAAA,OAAA,GAAO,OAAP;AAiChB,SAAA,WAAA,CACC,KADD,EAEC,KAFD,EAIa;QADZ,8DAAe,iBACH;QAAZ,oBAAY;;AAEZ,QAAG,CAAC,KAAD,EAAQ,OAAX;AACA,cAAA,OAAA,CAAQ,mBAAR,CAA4B,KAA5B,EAAmC,OAAnC,EAHY;AAIZ,QAAG,CAAC,IAAD,IAAS,SAAO,CAAP,EAAU,OAAO,MAAM,MAAN,CAA7B;AACA,cAAA,OAAA,CAAQ,MAAR,CAAe,IAAf,EAAqB,MAArB,EALY;AAMZ,QAAG,OAAK,KAAL,EAAY,MAAM,IAAI,8BAAA,2BAAA,CAA4B,MAAhC,EAAwC,IAAxC,EAA8C,oBAA9C,CAAN,CAAf;AAEA,SAAI,IAAI,IAAW,KAAX,EAAkB,IAAE,IAAF,EAAQ,GAAlC,EACA;AACC,cAAM,CAAN,IAAW,KAAX,CADD;KADA;CAZD;AAAgB,QAAA,WAAA,GAAW,WAAX;AAwBhB,SAAA,KAAA,CACC,KADD,EAGa;QADZ,8DAAe,iBACH;QAAZ,oBAAY;;AAEZ,gBAAY,KAAZ,EAAmB,IAAnB,EAAyB,KAAzB,EAAgC,IAAhC,EAFY;CAHb;AAAgB,QAAA,KAAA,GAAK,KAAL;AAehB,SAAA,QAAA,CACC,KADD,EACkB,IADlB,EAEkD;QAAjD,yEAAyC,UAAA,QAAA,gBAAQ;;AAEjD,QAAG,CAAC,KAAD,EACF,MAAM,IAAI,wBAAA,qBAAA,CAAsB,OAA1B,EAAmC,GAAnC,CAAN,CADD;AAEA,QAAI,MAAM,MAAM,MAAN,CAJuC;AAKjD,QAAI,KAAK,CAAC,GAAD,IAAQ,CAAC,SAAS,KAAT,EAAgB,IAAhB,EAAsB,gBAAtB,CAAD,CALgC;AAMjD,QAAG,EAAH,EAAO,MAAM,GAAN,IAAa,IAAb,CAAP;AACA,WAAO,EAAP,CAPiD;CAFlD;AAAgB,QAAA,QAAA,GAAQ,QAAR;AAmBhB,SAAA,SAAA,CAA6B,KAA7B,EAA8C,SAA9C,EAAoE;AAEnE,QAAG,CAAC,KAAD,EACF,MAAM,IAAI,wBAAA,qBAAA,CAAsB,OAA1B,EAAmC,GAAnC,CAAN,CADD;AAEA,QAAG,CAAC,QAAA,IAAA,CAAK,UAAL,CAAgB,SAAhB,CAAD,EACF,MAAM,IAAI,oBAAA,iBAAA,CAAkB,WAAtB,EAAmC,qBAAnC,CAAN,CADD;AAGA,QAAI,MAAM,MAAM,MAAN,CAPyD;AAQnE,QAAG,MAAM,OAAN,CAAc,KAAd,CAAH,EACA;AACC,aAAI,IAAI,IAAI,CAAJ,EAAO,IAAE,GAAF,EAAO,GAAtB,EACA;AACC,gBAAG,UAAU,MAAM,CAAN,CAAV,CAAH,EACC,OAAO,CAAP,CADD;SAFD;KAFD,MASA;AACC,aAAI,IAAI,KAAI,CAAJ,EAAO,KAAE,GAAF,EAAO,IAAtB,EACA;AACC,gBAAG,MAAQ,KAAR,IAAkB,UAAU,MAAM,EAAN,CAAV,CAAlB,EACF,OAAO,EAAP,CADD;SAFD;KAVD;AAkBA,WAAO,CAAC,CAAD,CA1B4D;CAApE;AAAgB,QAAA,SAAA,GAAS,SAAT;AAoChB,SAAA,OAAA,CACC,MADD,EAEC,MAFD,EAEgC;AAE/B,QAAG,UAAU,MAAV,EACH;AAEC,aAAI,IAAI,IAAI,CAAJ,EAAO,IAAE,OAAO,MAAP,EAAe,GAAhC,EACA;AACC,gBAAG,OAAO,OAAO,CAAP,CAAP,EAAkB,CAAlB,MAAuB,KAAvB,EACF,MADD;SAFD;KAHD;CAJD;AAAgB,QAAA,OAAA,GAAO,OAAP;AAsBhB,SAAA,OAAA,CAA2B,MAA3B,EAA6C,EAA7C,EAA0D;AAEzD,QAAG,UAAU,EAAV,EACH;AACC,aAAI,IAAI,IAAI,CAAJ,EAAO,IAAE,OAAO,MAAP,EAAe,GAAhC,EACA;AACC,mBAAO,CAAP,IAAY,GAAG,OAAO,CAAP,CAAH,CAAZ,CADD;SADA;KAFD;CAFD;AAAgB,QAAA,OAAA,GAAO,OAAP;AAiBhB,SAAA,WAAA,CAA+B,KAA/B,EAA0C,KAA1C,EAAsD;AAErD,QAAG,CAAC,KAAD,EACF,MAAM,IAAI,wBAAA,qBAAA,CAAsB,OAA1B,EAAmC,GAAnC,CAAN,CADD;AAGA,cAAA,OAAA,CAAQ,MAAR,CAAe,KAAf,EAAsB,OAAtB,EALqD;AAMrD,QAAG,QAAM,CAAN,EAAS,MAAM,IAAI,8BAAA,2BAAA,CAA4B,OAAhC,EAAyC,KAAzC,EAAgD,IAAhD,CAAN,CAAZ;AAGA,QAAI,SAAS,QAAM,MAAM,MAAN,CATkC;AAUrD,QAAG,MAAH,EACC,MAAM,MAAN,CAAa,KAAb,EAAoB,CAApB,EADD;AAEA,WAAO,MAAP,CAZqD;CAAtD;AAAgB,QAAA,WAAA,GAAW,WAAX;AAuBhB,SAAA,MAAA,CACC,KADD,EACY,KADZ,EACqB,GADrB,EAEkD;QAAjD,yEAAyC,UAAA,QAAA,gBAAQ;;AAEjD,QAAG,CAAC,KAAD,IAAU,CAAC,MAAM,MAAN,IAAgB,QAAM,CAAN,EAAS,OAAO,CAAP,CAAvC;AACA,QAAG,MAAI,CAAJ,EAAO,MAAM,IAAI,8BAAA,2BAAA,CAA4B,KAAhC,EAAuC,GAAvC,EAA4C,IAA5C,CAAN,CAAV;AAEA,QAAI,QAAQ,CAAR,CAL6C;AAMjD,QAAG,CAAC,GAAD,IAAQ,CAAC,SAAS,GAAT,CAAD,EACX;AAEC,aAAI,IAAI,IAAK,MAAM,MAAN,GAAe,CAAf,EAAmB,KAAG,CAAH,EAAM,GAAtC,EACA;AACC,gBAAG,iBAAiB,MAAM,CAAN,CAAjB,EAA2B,KAA3B,CAAH,EACA;AACC,sBAAM,MAAN,CAAa,CAAb,EAAgB,CAAhB,EADD;AAEC,kBAAE,KAAF,CAFD;aADA;SAFD;KAHD,MAaA;AAEC,YAAI,QAAiB,EAAjB,CAFL;AAGC,aAAI,IAAI,MAAI,CAAJ,EAAO,MAAM,MAAM,MAAN,EAAc,MAAE,GAAF,EAAO,KAA1C,EACA;AACC,gBAAG,iBAAiB,MAAM,GAAN,CAAjB,EAA2B,KAA3B,CAAH,EACA;AACC,sBAAM,IAAN,CAAW,GAAX,EADD;AAEC,kBAAE,KAAF,CAFD;AAGC,oBAAG,SAAO,GAAP,EAAY,MAAf;aAJD;SAFD;AAUA,aAAI,IAAI,MAAI,MAAM,MAAN,GAAe,CAAf,EAAkB,OAAG,CAAH,EAAM,KAApC,EACA;AACC,kBAAM,MAAN,CAAa,MAAM,GAAN,CAAb,EAAuB,CAAvB,EADD;SADA;KA1BD;AAiCA,WAAO,KAAP,CAvCiD;CAFlD;AAAgB,QAAA,MAAA,GAAM,MAAN;AAkDhB,SAAA,MAAA,CAA0B,OAA1B,EAAqC,KAArC,EAAiD;AAEhD,cAAA,OAAA,CAAQ,MAAR,CAAe,KAAf,EAAsB,OAAtB,EAFgD;AAGhD,QAAG,QAAM,CAAN,EAAS,MAAM,IAAI,8BAAA,2BAAA,CAA4B,OAAhC,EAAyC,KAAzC,EAAgD,IAAhD,CAAN,CAAZ;AAEA,QAAI,SAAS,WAAc,KAAd,CAAT,CAL4C;AAMhD,SAAI,IAAI,IAAI,CAAJ,EAAO,IAAE,KAAF,EAAS,GAAxB,EACA;AACC,eAAO,CAAP,IAAY,OAAZ,CADD;KADA;AAKA,WAAO,MAAP,CAXgD;CAAjD;AAAgB,QAAA,MAAA,GAAM,MAAN;AAsBhB,SAAA,KAAA,CACC,KADD,EAEC,KAFD,EAGgB;QAAf,6DAAc,iBAAC;;AAEf,QAAG,MAAM,KAAN,KAAgB,CAAC,SAAS,KAAT,CAAD,EAAkB,MAAM,IAAI,8BAAA,2BAAA,CAA4B,OAAhC,EAAyC,KAAzC,EAAgD,GAAhD,CAAN,CAArC;AACA,QAAG,MAAM,KAAN,KAAgB,CAAC,SAAS,KAAT,CAAD,EAAkB,MAAM,IAAI,8BAAA,2BAAA,CAA4B,OAAhC,EAAyC,KAAzC,EAAgD,GAAhD,CAAN,CAArC;AACA,QAAG,QAAM,CAAN,EAAS,MAAM,IAAI,8BAAA,2BAAA,CAA4B,OAAhC,EAAyC,KAAzC,EAAgD,IAAhD,CAAN,CAAZ;AAEA,QAAI,SAAS,WAAmB,KAAnB,CAAT,CANW;AAOf,SAAI,IAAI,IAAI,CAAJ,EAAO,IAAE,KAAF,EAAS,GAAxB,EACA;AACC,eAAO,CAAP,IAAY,KAAZ,CADD;AAEC,iBAAS,IAAT,CAFD;KADA;AAMA,WAAO,MAAP,CAbe;CAHhB;AAAgB,QAAA,KAAA,GAAK,KAAL;AA0BhB,SAAA,UAAA,CACC,KADD,EAEC,KAFD,EAGgB;QAAf,6DAAc,iBAAC;;AAEf,QAAG,QAAM,CAAN,EAAS,MAAM,IAAI,8BAAA,2BAAA,CAA4B,MAAhC,EAAwC,IAAxC,EAA8C,GAA9C,CAAN,CAAZ;AACA,WAAO,MAAM,KAAN,EAAa,CAAC,QAAQ,KAAR,CAAD,GAAgB,IAAhB,EAAsB,IAAnC,CAAP,CAHe;CAHhB;AAAgB,QAAA,UAAA,GAAU,UAAV;AAehB,SAAA,QAAA,CAAyB,MAAzB,EAAqC;AAEpC,QAAI,OAAW,EAAX,CAFgC;AAGpC,WAAO,OAAO,MAAP,CAAc;eAAI,EAAE,KAAK,IAAL,CAAF,KAAiB,KAAK,CAAL,IAAU,IAAV,CAAjB;KAAJ,CAArB,CAHoC;CAArC;AAAgB,QAAA,QAAA,GAAQ,QAAR;AAahB,SAAA,OAAA,CAAwB,CAAxB,EAAwD;QAAvB,qEAAsB,iBAAC;;AAEvD,QAAI,SAAe,EAAf,CAFmD;AAGvD,SAAI,IAAI,IAAI,CAAJ,EAAO,IAAE,EAAE,MAAF,EAAU,GAA3B,EACA;AACC,YAAI,IAAI,EAAE,CAAF,CAAJ,CADL;AAEC,YAAG,MAAM,OAAN,CAAc,CAAd,CAAH,EACA;AACC,gBAAG,eAAa,CAAb,EAAgB,IAAI,QAAQ,CAAR,EAAW,eAAe,CAAf,CAAf,CAAnB;AACA,iBAAI,IAAI,IAAI,CAAJ,EAAO,IAAE,EAAE,MAAF,EAAU,GAA3B;AAAgC,uBAAO,IAAP,CAAY,EAAE,CAAF,CAAZ;aAAhC;SAHD,MAKK,OAAO,IAAP,CAAY,CAAZ,EALL;KAHD;AAUA,WAAO,MAAP,CAbuD;CAAxD;AAAgB,QAAA,OAAA,GAAO,OAAP","file":"System/Collections/Array/Utility.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst Types_1 = require(\"../../Types\");\nconst Integer_1 = require(\"../../Integer\");\nconst Compare_1 = require(\"../../Compare\");\nconst ArgumentException_1 = require(\"../../Exceptions/ArgumentException\");\nconst ArgumentNullException_1 = require(\"../../Exceptions/ArgumentNullException\");\nconst ArgumentOutOfRangeException_1 = require(\"../../Exceptions/ArgumentOutOfRangeException\");\nfunction initialize(length) {\n    Integer_1.Integer.assert(length, 'length');\n    var array;\n    if (length > 65536)\n        array = new Array(length);\n    else {\n        array = [];\n        array.length = length;\n    }\n    return array;\n}\nexports.initialize = initialize;\nfunction copy(source, sourceIndex = 0, length = Infinity) {\n    if (!source)\n        return source;\n    return copyTo(source, initialize(Math.min(length, Math.max(source.length - sourceIndex, 0))), sourceIndex, 0, length);\n}\nexports.copy = copy;\nconst CBN = 'Cannot be null.', CB0 = 'Cannot be zero.', CBL0 = 'Cannot be less than zero.', VFN = 'Must be a valid finite number';\nfunction copyTo(source, destination, sourceIndex = 0, destinationIndex = 0, length = Infinity) {\n    if (!source)\n        throw new ArgumentNullException_1.ArgumentNullException('source', CBN);\n    if (!destination)\n        throw new ArgumentNullException_1.ArgumentNullException('destination', CBN);\n    if (sourceIndex < 0)\n        throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('sourceIndex', sourceIndex, CBL0);\n    var sourceLength = source.length;\n    if (!sourceLength)\n        return destination;\n    if (sourceIndex >= sourceLength)\n        throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Must be less than the length of the source array.');\n    if (destination.length < 0)\n        throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('destinationIndex', destinationIndex, CBL0);\n    var maxLength = source.length - sourceIndex;\n    if (isFinite(length) && length > maxLength)\n        throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Source index + length cannot exceed the length of the source array.');\n    length = Math.min(length, maxLength);\n    var newLength = destinationIndex + length;\n    if (newLength > destination.length)\n        destination.length = newLength;\n    for (let i = 0; i < length; i++) {\n        destination[destinationIndex + i] = source[sourceIndex + i];\n    }\n    return destination;\n}\nexports.copyTo = copyTo;\nfunction indexOf(array, item, equalityComparer = Compare_1.areEqual) {\n    var len = array && array.length;\n    if (len) {\n        if (Array.isArray(array) && !Types_1.Type.isTrueNaN(item))\n            return array.indexOf(item);\n        for (let i = 0; i < len; i++) {\n            if (equalityComparer(array[i], item))\n                return i;\n        }\n    }\n    return -1;\n}\nexports.indexOf = indexOf;\nfunction contains(array, item, equalityComparer = Compare_1.areEqual) {\n    return indexOf(array, item, equalityComparer) != -1;\n}\nexports.contains = contains;\nfunction replace(array, old, newValue, max) {\n    if (!array || !array.length || max === 0)\n        return 0;\n    if (max < 0)\n        throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('max', max, CBL0);\n    if (!max)\n        max = Infinity;\n    var count = 0;\n    for (let i = 0, len = array.length; i < len; i++) {\n        if (array[i] === old) {\n            array[i] = newValue;\n            ++count;\n            if (count == max)\n                break;\n        }\n    }\n    return count;\n}\nexports.replace = replace;\nfunction updateRange(array, value, start = 0, stop) {\n    if (!array)\n        return;\n    Integer_1.Integer.assertZeroOrGreater(start, 'start');\n    if (!stop && stop !== 0)\n        stop = array.length;\n    Integer_1.Integer.assert(stop, 'stop');\n    if (stop < start)\n        throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"stop\", stop, \"is less than start\");\n    for (let i = start; i < stop; i++) {\n        array[i] = value;\n    }\n}\nexports.updateRange = updateRange;\nfunction clear(array, start = 0, stop) {\n    updateRange(array, null, start, stop);\n}\nexports.clear = clear;\nfunction register(array, item, equalityComparer = Compare_1.areEqual) {\n    if (!array)\n        throw new ArgumentNullException_1.ArgumentNullException('array', CBN);\n    var len = array.length;\n    var ok = !len || !contains(array, item, equalityComparer);\n    if (ok)\n        array[len] = item;\n    return ok;\n}\nexports.register = register;\nfunction findIndex(array, predicate) {\n    if (!array)\n        throw new ArgumentNullException_1.ArgumentNullException('array', CBN);\n    if (!Types_1.Type.isFunction(predicate))\n        throw new ArgumentException_1.ArgumentException('predicate', 'Must be a function.');\n    var len = array.length;\n    if (Array.isArray(array)) {\n        for (let i = 0; i < len; i++) {\n            if (predicate(array[i]))\n                return i;\n        }\n    }\n    else {\n        for (let i = 0; i < len; i++) {\n            if ((i) in (array) && predicate(array[i]))\n                return i;\n        }\n    }\n    return -1;\n}\nexports.findIndex = findIndex;\nfunction forEach(source, action) {\n    if (source && action) {\n        for (let i = 0; i < source.length; i++) {\n            if (action(source[i], i) === false)\n                break;\n        }\n    }\n}\nexports.forEach = forEach;\nfunction applyTo(target, fn) {\n    if (target && fn) {\n        for (let i = 0; i < target.length; i++) {\n            target[i] = fn(target[i]);\n        }\n    }\n}\nexports.applyTo = applyTo;\nfunction removeIndex(array, index) {\n    if (!array)\n        throw new ArgumentNullException_1.ArgumentNullException('array', CBN);\n    Integer_1.Integer.assert(index, 'index');\n    if (index < 0)\n        throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('index', index, CBL0);\n    var exists = index < array.length;\n    if (exists)\n        array.splice(index, 1);\n    return exists;\n}\nexports.removeIndex = removeIndex;\nfunction remove(array, value, max, equalityComparer = Compare_1.areEqual) {\n    if (!array || !array.length || max === 0)\n        return 0;\n    if (max < 0)\n        throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('max', max, CBL0);\n    var count = 0;\n    if (!max || !isFinite(max)) {\n        for (let i = (array.length - 1); i >= 0; i--) {\n            if (equalityComparer(array[i], value)) {\n                array.splice(i, 1);\n                ++count;\n            }\n        }\n    }\n    else {\n        var found = [];\n        for (let i = 0, len = array.length; i < len; i++) {\n            if (equalityComparer(array[i], value)) {\n                found.push(i);\n                ++count;\n                if (count == max)\n                    break;\n            }\n        }\n        for (let i = found.length - 1; i >= 0; i--) {\n            array.splice(found[i], 1);\n        }\n    }\n    return count;\n}\nexports.remove = remove;\nfunction repeat(element, count) {\n    Integer_1.Integer.assert(count, 'count');\n    if (count < 0)\n        throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('count', count, CBL0);\n    var result = initialize(count);\n    for (let i = 0; i < count; i++) {\n        result[i] = element;\n    }\n    return result;\n}\nexports.repeat = repeat;\nfunction range(first, count, step = 1) {\n    if (isNaN(first) || !isFinite(first))\n        throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('first', first, VFN);\n    if (isNaN(count) || !isFinite(count))\n        throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('count', count, VFN);\n    if (count < 0)\n        throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('count', count, CBL0);\n    var result = initialize(count);\n    for (let i = 0; i < count; i++) {\n        result[i] = first;\n        first += step;\n    }\n    return result;\n}\nexports.range = range;\nfunction rangeUntil(first, until, step = 1) {\n    if (step == 0)\n        throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('step', step, CB0);\n    return range(first, (until - first) / step, step);\n}\nexports.rangeUntil = rangeUntil;\nfunction distinct(source) {\n    var seen = {};\n    return source.filter(e => !(e in seen) && (seen[e] = true));\n}\nexports.distinct = distinct;\nfunction flatten(a, recurseDepth = 0) {\n    var result = [];\n    for (var i = 0; i < a.length; i++) {\n        var x = a[i];\n        if (Array.isArray(x)) {\n            if (recurseDepth > 0)\n                x = flatten(x, recurseDepth - 1);\n            for (var n = 0; n < x.length; n++)\n                result.push(x[n]);\n        }\n        else\n            result.push(x);\n    }\n    return result;\n}\nexports.flatten = flatten;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../../Types\";\r\nimport {Integer} from \"../../Integer\";\r\nimport {areEqual} from \"../../Compare\";\r\nimport {ArgumentException} from \"../../Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {ArgumentOutOfRangeException} from \"../../Exceptions/ArgumentOutOfRangeException\";\r\nimport {EqualityComparison, Predicate, Action} from \"../../FunctionTypes\";\r\nimport {IArray} from \"./IArray\";\r\n\r\n/**\r\n * Initializes an array depending on the requested capacity.\r\n * The returned array will have a .length equal to the value provided.\r\n * @param length\r\n * @returns {T[]}\r\n */\r\nexport function initialize<T>(length:number):T[]\r\n{\r\n\tInteger.assert(length, 'length');\r\n\t// This logic is based upon JS performance tests that show a significant difference at the level of 65536.\r\n\tvar array:T[];\r\n\tif(length>65536)\r\n\t\tarray = new Array(length);\r\n\telse\r\n\t{\r\n\t\tarray = [];\r\n\t\tarray.length = length;\r\n\t}\r\n\treturn array;\r\n}\r\n\r\n/**\r\n *\r\n * @param source\r\n * @param sourceIndex\r\n * @param length\r\n * @returns {any}\r\n */\r\nexport function copy<T>(\r\n\tsource:IArray<T>,\r\n\tsourceIndex:number = 0,\r\n\tlength:number = Infinity):T[]\r\n{\r\n\tif(!source) return <any>source; // may have passed zero? undefined? or null?\r\n\treturn copyTo(\r\n\t\tsource,\r\n\t\tinitialize<T>(Math.min(length, Math.max(source.length - sourceIndex, 0))),\r\n\t\tsourceIndex, 0, length);\r\n}\r\n\r\nconst\r\n\tCBN  = 'Cannot be null.',\r\n\tCB0  = 'Cannot be zero.',\r\n\tCBL0 = 'Cannot be less than zero.',\r\n\tVFN  = 'Must be a valid finite number';\r\n\r\n/**\r\n * Copies one array to another.\r\n * @param source\r\n * @param destination\r\n * @param sourceIndex\r\n * @param destinationIndex\r\n * @param length An optional limit to stop copying.\r\n * @returns The destination array.\r\n */\r\nexport function copyTo<T,TDestination extends IArray<any>>(\r\n\tsource:IArray<T>,\r\n\tdestination:TDestination,\r\n\tsourceIndex:number = 0,\r\n\tdestinationIndex:number = 0,\r\n\tlength:number = Infinity):TDestination\r\n{\r\n\tif(!source)\r\n\t\tthrow new ArgumentNullException('source', CBN);\r\n\r\n\tif(!destination)\r\n\t\tthrow new ArgumentNullException('destination', CBN);\r\n\r\n\tif(sourceIndex<0)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, CBL0);\r\n\r\n\tvar sourceLength = source.length;\r\n\tif(!sourceLength)\r\n\t\treturn destination;\r\n\tif(sourceIndex>=sourceLength)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Must be less than the length of the source array.');\r\n\r\n\tif(destination.length<0)\r\n\t\tthrow new ArgumentOutOfRangeException('destinationIndex', destinationIndex, CBL0);\r\n\r\n\tvar maxLength = source.length - sourceIndex;\r\n\tif(isFinite(length) && length>maxLength)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Source index + length cannot exceed the length of the source array.');\r\n\r\n\tlength = Math.min(length, maxLength);\r\n\tvar newLength = destinationIndex + length;\r\n\tif(newLength>destination.length) destination.length = newLength;\r\n\r\n\tfor(let i = 0; i<length; i++)\r\n\t{\r\n\t\tdestination[destinationIndex + i] = source[sourceIndex + i];\r\n\t}\r\n\r\n\treturn destination;\r\n}\r\n\r\n\r\n/**\r\n * Checks to see where the provided array contains an item/value.\r\n * If the array value is null, then -1 is returned.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {number}\r\n */\r\nexport function indexOf<T>(\r\n\tarray:IArray<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):number\r\n{\r\n\r\n\tvar len = array && array.length;\r\n\tif(len)\r\n\t{\r\n\t\t// NaN NEVER evaluates its equality so be careful.\r\n\t\tif(Array.isArray(array) && !Type.isTrueNaN(item))\r\n\t\t\treturn array.indexOf(item);\r\n\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\t// 'areEqual' includes NaN==NaN evaluation.\r\n\t\t\tif(equalityComparer(array[i], item))\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * Checks to see if the provided array contains an item.\r\n * If the array value is null, then false is returned.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {boolean}\r\n */\r\nexport function contains<T>(\r\n\tarray:IArray<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):boolean\r\n{\r\n\treturn indexOf(array, item, equalityComparer)!= -1;\r\n}\r\n\r\n/**\r\n * Finds and replaces a value from an array.  Will replaces all instances unless a maximum is specified.\r\n * @param array\r\n * @param old\r\n * @param newValue\r\n * @param max\r\n * @returns {number}\r\n */\r\nexport function replace<T>(\r\n\tarray:IArray<T>,\r\n\told:T,\r\n\tnewValue:T,\r\n\tmax?:number):number\r\n{\r\n\tif(!array || !array.length || max===0) return 0;\r\n\tif(max<0) throw new ArgumentOutOfRangeException('max', max, CBL0);\r\n\tif(!max) max = Infinity;\r\n\r\n\tvar count = 0;\r\n\r\n\tfor(let i = 0, len = array.length; i<len; i++)\r\n\t{\r\n\t\tif(array[i]===old)\r\n\t\t{\r\n\t\t\tarray[i] = newValue;\r\n\t\t\t++count;\r\n\t\t\tif(count==max) break;\r\n\t\t}\r\n\t}\r\n\r\n\treturn count;\r\n\r\n}\r\n\r\n/**\r\n * Replaces values of an array across a range of indexes.\r\n * @param array\r\n * @param value\r\n * @param start\r\n * @param stop\r\n */\r\nexport function updateRange<T>(\r\n\tarray:IArray<T>,\r\n\tvalue:T,\r\n\tstart:number = 0,\r\n\tstop?:number):void\r\n{\r\n\tif(!array) return;\r\n\tInteger.assertZeroOrGreater(start, 'start');\r\n\tif(!stop && stop!==0) stop = array.length;\r\n\tInteger.assert(stop, 'stop');\r\n\tif(stop<start) throw new ArgumentOutOfRangeException(\"stop\", stop, \"is less than start\");\r\n\r\n\tfor(let i:number = start; i<stop; i++)\r\n\t{\r\n\t\tarray[i] = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Clears (sets to null) values of an array across a range of indexes.\r\n * @param array\r\n * @param start\r\n * @param stop\r\n */\r\nexport function clear(\r\n\tarray:IArray<any>,\r\n\tstart:number = 0,\r\n\tstop?:number):void\r\n{\r\n\tupdateRange(array, null, start, stop);\r\n}\r\n\r\n/**\r\n * Ensures a value exists within an array.  If not found, adds to the end.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {boolean}\r\n */\r\nexport function register<T>(\r\n\tarray:IArray<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tvar len = array.length; // avoid querying .length more than once. *\r\n\tvar ok = !len || !contains(array, item, equalityComparer);\r\n\tif(ok) array[len] = item; // * push would query length again.\r\n\treturn ok;\r\n}\r\n\r\n/**\r\n * Returns the first index of which the provided predicate returns true.\r\n * Returns -1 if always false.\r\n * @param array\r\n * @param predicate\r\n * @returns {number}\r\n */\r\nexport function findIndex<T>(array:IArray<T>, predicate:Predicate<T>):number\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tif(!Type.isFunction(predicate))\r\n\t\tthrow new ArgumentException('predicate', 'Must be a function.');\r\n\r\n\tvar len = array.length;\r\n\tif(Array.isArray(array))\r\n\t{\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tif(predicate(array[i]))\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tif((i) in (array) && predicate(array[i]))\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\treturn -1;\r\n}\r\n\r\n\r\n/**\r\n * Allows for using \"false\" to cause forEach to break.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param source\r\n * @param action\r\n */\r\nexport function forEach<T>(\r\n\tsource:IArray<T>,\r\n\taction:Predicate<T> | Action<T>):void\r\n{\r\n\tif(source && action)\r\n\t{\r\n\t\t// Don't cache the length since it is possible that the underlying array changed.\r\n\t\tfor(let i = 0; i<source.length; i++)\r\n\t\t{\r\n\t\t\tif(action(source[i], i)===false)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Is similar to Array.map() but instead of returning a new array, it updates the existing indexes.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param target\r\n * @param fn\r\n */\r\nexport function applyTo<T>(target:IArray<T>, fn:(a:T) => T):void\r\n{\r\n\tif(target && fn)\r\n\t{\r\n\t\tfor(let i = 0; i<target.length; i++)\r\n\t\t{\r\n\t\t\ttarget[i] = fn(target[i]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Removes an entry at a specified index.\r\n * @param array\r\n * @param index\r\n * @returns {boolean} True if the value was able to be removed.\r\n */\r\nexport function removeIndex<T>(array:T[], index:number):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\r\n\tInteger.assert(index, 'index');\r\n\tif(index<0) throw new ArgumentOutOfRangeException('index', index, CBL0);\r\n\r\n\r\n\tvar exists = index<array.length;\r\n\tif(exists)\r\n\t\tarray.splice(index, 1);\r\n\treturn exists;\r\n}\r\n\r\n/**\r\n * Finds and removes a value from an array.  Will remove all instances unless a maximum is specified.\r\n * @param array\r\n * @param value\r\n * @param max\r\n * @param {function?} equalityComparer\r\n * @returns {number} The number of times the value was found and removed.\r\n */\r\nexport function remove<T>(\r\n\tarray:T[], value:T, max?:number,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):number\r\n{\r\n\tif(!array || !array.length || max===0) return 0;\r\n\tif(max<0) throw new ArgumentOutOfRangeException('max', max, CBL0);\r\n\r\n\tvar count = 0;\r\n\tif(!max || !isFinite(max))\r\n\t{\r\n\t\t// Don't track the indexes and remove in reverse.\r\n\t\tfor(let i = (array.length - 1); i>=0; i--)\r\n\t\t{\r\n\t\t\tif(equalityComparer(array[i], value))\r\n\t\t\t{\r\n\t\t\t\tarray.splice(i, 1);\r\n\t\t\t\t++count;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\t// Since the user will expect it to happen in forward order...\r\n\t\tvar found:number[] = []; // indexes;\r\n\t\tfor(let i = 0, len = array.length; i<len; i++)\r\n\t\t{\r\n\t\t\tif(equalityComparer(array[i], value))\r\n\t\t\t{\r\n\t\t\t\tfound.push(i);\r\n\t\t\t\t++count;\r\n\t\t\t\tif(count==max) break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(let i = found.length - 1; i>=0; i--)\r\n\t\t{\r\n\t\t\tarray.splice(found[i], 1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\treturn count;\r\n}\r\n\r\n/**\r\n * Simply repeats a value the number of times specified.\r\n * @param element\r\n * @param count\r\n * @returns {T[]}\r\n */\r\nexport function repeat<T>(element:T, count:number):T[]\r\n{\r\n\tInteger.assert(count, 'count');\r\n\tif(count<0) throw new ArgumentOutOfRangeException('count', count, CBL0);\r\n\r\n\tvar result = initialize<T>(count);\r\n\tfor(let i = 0; i<count; i++)\r\n\t{\r\n\t\tresult[i] = element;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Returns a range of numbers based upon the first value and the step value.\r\n * @param first\r\n * @param count\r\n * @param step\r\n * @returns {number[]}\r\n */\r\n\r\nexport function range(\r\n\tfirst:number,\r\n\tcount:number,\r\n\tstep:number = 1):number[]\r\n{\r\n\tif(isNaN(first) || !isFinite(first)) throw new ArgumentOutOfRangeException('first', first, VFN);\r\n\tif(isNaN(count) || !isFinite(count)) throw new ArgumentOutOfRangeException('count', count, VFN);\r\n\tif(count<0) throw new ArgumentOutOfRangeException('count', count, CBL0);\r\n\r\n\tvar result = initialize<number>(count);\r\n\tfor(let i = 0; i<count; i++)\r\n\t{\r\n\t\tresult[i] = first;\r\n\t\tfirst += step;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Returns a range of numbers based upon the first value and the step value excluding any numbers at or beyond the until value.\r\n * @param first\r\n * @param until\r\n * @param step\r\n * @returns {number[]}\r\n */\r\nexport function rangeUntil(\r\n\tfirst:number,\r\n\tuntil:number,\r\n\tstep:number = 1):number[]\r\n{\r\n\tif(step==0) throw new ArgumentOutOfRangeException('step', step, CB0);\r\n\treturn range(first, (until - first)/step, step);\r\n}\r\n\r\n/**\r\n * Returns a unique reduced set of values.\r\n * @param source\r\n */\r\nexport function distinct(source:string[]):string[];\r\nexport function distinct(source:number[]):number[];\r\nexport function distinct(source:any[]):any[]\r\n{\r\n\tvar seen:any = {};\r\n\treturn source.filter(e=> !(e in seen) && (seen[e] = true));\r\n}\r\n\r\n/**\r\n * Takes any arrays within an array and inserts the values contained within in place of that array.\r\n * For every count higher than 0 in recurseDepth it will attempt an additional pass.  Passing Infinity will flatten all arrays contained.\r\n * @param a\r\n * @param recurseDepth\r\n * @returns {any[]}\r\n */\r\nexport function flatten(a:any[], recurseDepth:number = 0):any[]\r\n{\r\n\tvar result:any[] = [];\r\n\tfor(var i = 0; i<a.length; i++)\r\n\t{\r\n\t\tvar x = a[i];\r\n\t\tif(Array.isArray(x))\r\n\t\t{\r\n\t\t\tif(recurseDepth>0) x = flatten(x, recurseDepth - 1);\r\n\t\t\tfor(var n = 0; n<x.length; n++) result.push(x[n]);\r\n\t\t}\r\n\t\telse result.push(x);\r\n\t}\r\n\treturn result;\r\n}\r\n"]}