{"version":3,"sources":["System/Collections/Dictionaries/StringKeyDictionary.js","System/Collections/Dictionaries/StringKeyDictionary.ts"],"names":[],"mappings":"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","file":"System/Collections/Dictionaries/StringKeyDictionary.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n\"use strict\";\nconst Compare_1 = require(\"../../Compare\");\nconst DictionaryBase_1 = require(\"./DictionaryBase\");\nconst VOID0 = void 0;\nclass StringKeyDictionary extends DictionaryBase_1.DictionaryBase {\n    constructor(...args) {\n        super(...args);\n        this._count = 0;\n        this._map = {};\n    }\n    _getEntry(key) {\n        return !this.containsKey(key)\n            ? null : {\n            key: key,\n            value: this.getValue(key)\n        };\n    }\n    containsKey(key) {\n        if (key === null || key === VOID0 || !this._count)\n            return false;\n        return (key) in (this._map);\n    }\n    containsValue(value) {\n        if (!this._count)\n            return false;\n        var map = this._map, equal = Compare_1.areEqual;\n        for (let key in map) {\n            if (map.hasOwnProperty(key) && equal(map[key], value))\n                return true;\n        }\n        return false;\n    }\n    getValue(key) {\n        if (key === null || key === VOID0 || !this._count)\n            return VOID0;\n        return this._map[key];\n    }\n    _setValueInternal(key, value) {\n        var _ = this, map = _._map, old = map[key];\n        if (old !== value) {\n            if (value === VOID0) {\n                if ((key) in (map)) {\n                    delete map[key];\n                    _._count--;\n                }\n            }\n            else {\n                if (!map.hasOwnProperty(key))\n                    _._count++;\n                map[key] = value;\n            }\n            return true;\n        }\n        return false;\n    }\n    importMap(values) {\n        var _ = this;\n        return _.handleUpdate(() => {\n            var changed = false;\n            for (let key in values) {\n                if (values.hasOwnProperty(key) && _.setValue(key, values[key]))\n                    changed = true;\n            }\n            return changed;\n        });\n    }\n    toMap(selector) {\n        var _ = this, result = {};\n        if (_._count)\n            for (let key in _._map) {\n                if (_._map.hasOwnProperty(key)) {\n                    var value = _._map[key];\n                    if (selector)\n                        value = selector(key, value);\n                    if (value !== VOID0)\n                        result[key] = value;\n                }\n            }\n        return result;\n    }\n    getKeys() {\n        return Object.keys(this._map);\n    }\n    getValues() {\n        if (!this._count)\n            return [];\n        var result = Object.keys(this._map);\n        for (let i = 0, len = result.length; i < len; i++) {\n            result[i] = this._map[result[i]];\n        }\n        return result;\n    }\n    getCount() {\n        return this._count;\n    }\n}\nexports.StringKeyDictionary = StringKeyDictionary;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = StringKeyDictionary;\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual} from \"../../Compare\";\r\nimport {IStringKeyDictionary, IMap} from \"./IDictionary\";\r\nimport {IKeyValuePair} from \"../../KeyValuePair\";\r\nimport {DictionaryBase} from \"./DictionaryBase\";\r\n\r\nconst VOID0:any = void 0;\r\n\r\nexport class StringKeyDictionary<TValue>\r\nextends DictionaryBase<string, TValue> implements IStringKeyDictionary<TValue>\r\n{\r\n\r\n\tprivate _count:number = 0;\r\n\tprivate _map:IMap<TValue> = {};\r\n\r\n\tprotected _getEntry(key:string):IKeyValuePair<string,TValue>\r\n\t{\r\n\t\treturn !this.containsKey(key)\r\n\t\t\t? null : {\r\n\t\t\tkey: key,\r\n\t\t\tvalue: this.getValue(key)\r\n\t\t}\r\n\t}\r\n\r\n\tcontainsKey(key:string):boolean\r\n\t{\r\n\t\tif(key===null || key===VOID0 || !this._count) return false;\r\n\t\treturn (key) in (this._map);\r\n\t}\r\n\r\n\tcontainsValue(value:TValue):boolean\r\n\t{\r\n\t\tif(!this._count) return false;\r\n\t\tvar map = this._map, equal:(a:any, b:any, strict?:boolean) => boolean = areEqual;\r\n\t\tfor(let key in map)\r\n\t\t{\r\n\t\t\tif(map.hasOwnProperty(key) && equal(map[key], value))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tgetValue(key:string):TValue\r\n\t{\r\n\t\tif(key===null || key===VOID0 || !this._count) return VOID0;\r\n\t\treturn this._map[key];\r\n\t}\r\n\r\n\tprotected _setValueInternal(key:string, value:TValue):boolean\r\n\t{\r\n\t\tvar _ = this, map = _._map, old = map[key];\r\n\t\tif(old!==value)\r\n\t\t{\r\n\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tif((key) in (map))\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete map[key];\r\n\t\t\t\t\t_._count--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(!map.hasOwnProperty(key))\r\n\t\t\t\t\t_._count++;\r\n\t\t\t\tmap[key] = value;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Returns true if any value is updated...\r\n\timportMap(values:IMap<TValue>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.handleUpdate(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar changed:boolean = false;\r\n\t\t\t\tfor(let key in values)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(values.hasOwnProperty(key) && _.setValue(key, values[key]))\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn changed;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttoMap(selector?:(key:string, value:TValue) => TValue):IMap<TValue>\r\n\t{\r\n\t\tvar _ = this, result:IMap<TValue> = {};\r\n\t\tif(_._count) for(let key in _._map)\r\n\t\t{\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t{\r\n\t\t\t\tvar value = _._map[key];\r\n\t\t\t\tif(selector)\r\n\t\t\t\t\tvalue = selector(key, value);\r\n\t\t\t\tif(value!==VOID0)\r\n\t\t\t\t\tresult[key] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getKeys():string[]\r\n\t{\r\n\t\treturn Object.keys(this._map);\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tif(!this._count) return [];\r\n\t\tvar result:any[] = Object.keys(this._map);\r\n\t\tfor(let i = 0, len = result.length; i<len; i++)\r\n\t\t{\r\n\t\t\tresult[i] = this._map[result[i]];\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default StringKeyDictionary;\r\n"]}