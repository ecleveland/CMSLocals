{"version":3,"sources":["System/TypeValidator.js","System/TypeValidator.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Types_1","Compare_1","areInvalid","v","areEqual","memberType","TypeInfoHelper","contains","_super","value","_this","call","_value","descriptor","Function","isFunction","isObject","Array","isArray","String","isString","Number","isNumber","Boolean","isBoolean","type","isPrimitive","max","Math","min","length","i","targetKeys","keys","dKeys","_i","dKeys_1","key","indexOf","_a","dKeys_2","TypeInfo","TypeValidator","_typeDescriptor","freeze","isSubsetOf","o","t","defineProperty"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,UAAW,aAAc,SAAUC,EAASC,EAASC,EAASC,GACxF,YC6FJ,SAAAC,GAAoBC,EAAOf,GAE1B,IAAIa,EAAAG,SAASD,EAAGf,GAChB,CACC,GAAIiB,GAAa,GAAIC,GAAeH,EACpC,KAAIE,EAAWE,SAASnB,GACvB,OAAO,EAET,OAAO,EAzFR,GAAAkB,GAAA,SAAAE,GAKC,QAAAF,GAAYG,GALb,GAAAC,GAAAvB,IAOEqB,GAAAG,KAAAxB,KAAMsB,EAAO,WAAI,MAAAC,GAAKE,OAASH,IAwEjC,MA/EoCvB,WAAAoB,EAAAE,GAWnCF,EAAAZ,UAAAa,SAAA,SAAsBM,GAGrB,GAAIJ,GAAQtB,KAAKyB,MAEjB,IAAGH,IAAQI,EACV,OAAO,CAER,QAAOA,GAEN,IAAKC,UACJ,MAAO3B,MAAK4B,UACb,KAAKpB,QACJ,MAAOR,MAAK6B,QACb,KAAKC,OACJ,MAAO9B,MAAK+B,OACb,KAAKC,QACJ,MAAOhC,MAAKiC,QACb,KAAKC,QACJ,MAAOlC,MAAKmC,QACb,KAAKC,SACJ,MAAOpC,MAAKqC,UAGd,GAAGrC,KAAKsC,YAAeZ,IAAc1B,KAAKuC,cAAgBzB,EAAAG,SAASK,EAAMI,GACxE,OAAO,CAGR,IAAG1B,KAAK+B,SAAWD,MAAMC,QAAQL,GACjC,CAGC,IAAI,GAFAc,GAAMC,KAAKC,IAAIhB,EAAWiB,OAAQrB,EAAMqB,QAEpCC,EAAI,EAAKJ,EAAFI,EAAOA,IAErB,GAAG7B,EAAWO,EAAMsB,GAAIlB,EAAWkB,IAClC,OAAO,CAGT,QAAO,EAGR,GAAG5C,KAAK6B,SACR,CACC,GAAIgB,GAAarC,OAAOsC,KAAKxB,GACzByB,EAAQvC,OAAOsC,KAAKpB,EAGxB,IAAGqB,EAAMJ,OAAOE,EAAWF,OAC1B,OAAO,CAGR,KAAe,GAAAK,GAAA,EAAAC,EAAAF,EAAAC,EAAAC,EAAAN,OAAAK,IAAM,CAAjB,GAAIE,GAAGD,EAAAD,EAEV,IAA6B,IAA1BH,EAAWM,QAAQD,GACrB,OAAO,EAIT,IAAe,GAAAE,GAAA,EAAAC,EAAAN,EAAAK,EAAAC,EAAAV,OAAAS,IAAM,CAAjB,GAAIF,GAAGG,EAAAD,EAEV,IAAGrC,EAAWO,EAAM4B,GAAMxB,EAAWwB,IACpC,OAAO,GAIV,OAAO,GAGT/B,GA/EoCN,EAAAyC,SAAvB1C,GAAAO,eAAcA,CA4F3B,IAAAoC,GAAA,WACC,QAAAA,GAAoBC,GAAAxD,KAAAwD,gBAAAA,EACnBhD,OAAOiD,OAAOzD,MAOhB,MAJCuD,GAAAhD,UAAAmD,WAAA,SAAWC,GACV,GAAIC,GAAI,GAAIzC,GAAewC,EAC3B,OAAOC,GAAExC,SAASpB,KAAKwD,kBAEzBD,IATa3C,GAAA2C,cAAaA,EAW1B/C,OAAAqD,eAAAjD,EAAA,cAAAU,OAAA,IDtCIV,EAAAA,WCsCW2C","file":"System/TypeValidator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"./Types\", \"./Compare\"], function (require, exports, Types_1, Compare_1) {\n    \"use strict\";\n    var TypeInfoHelper = (function (_super) {\n        __extends(TypeInfoHelper, _super);\n        function TypeInfoHelper(value) {\n            var _this = this;\n            _super.call(this, value, function () { return _this._value = value; });\n        }\n        TypeInfoHelper.prototype.contains = function (descriptor) {\n            var value = this._value;\n            if (value === descriptor)\n                return true;\n            switch (descriptor) {\n                case Function:\n                    return this.isFunction;\n                case Object:\n                    return this.isObject;\n                case Array:\n                    return this.isArray;\n                case String:\n                    return this.isString;\n                case Number:\n                    return this.isNumber;\n                case Boolean:\n                    return this.isBoolean;\n            }\n            if (this.type != typeof descriptor || this.isPrimitive && !Compare_1.areEqual(value, descriptor))\n                return false;\n            if (this.isArray && Array.isArray(descriptor)) {\n                var max = Math.min(descriptor.length, value.length);\n                for (var i = 0; i < max; i++) {\n                    if (areInvalid(value[i], descriptor[i]))\n                        return false;\n                }\n                return true;\n            }\n            if (this.isObject) {\n                var targetKeys = Object.keys(value);\n                var dKeys = Object.keys(descriptor);\n                if (dKeys.length > targetKeys.length)\n                    return false;\n                for (var _i = 0, dKeys_1 = dKeys; _i < dKeys_1.length; _i++) {\n                    var key = dKeys_1[_i];\n                    if (targetKeys.indexOf(key) == -1)\n                        return false;\n                }\n                for (var _a = 0, dKeys_2 = dKeys; _a < dKeys_2.length; _a++) {\n                    var key = dKeys_2[_a];\n                    if (areInvalid(value[key], descriptor[key]))\n                        return false;\n                }\n            }\n            return true;\n        };\n        return TypeInfoHelper;\n    }(Types_1.TypeInfo));\n    exports.TypeInfoHelper = TypeInfoHelper;\n    function areInvalid(v, d) {\n        if (!Compare_1.areEqual(v, d)) {\n            var memberType = new TypeInfoHelper(v);\n            if (!memberType.contains(d))\n                return true;\n        }\n        return false;\n    }\n    var TypeValidator = (function () {\n        function TypeValidator(_typeDescriptor) {\n            this._typeDescriptor = _typeDescriptor;\n            Object.freeze(this);\n        }\n        TypeValidator.prototype.isSubsetOf = function (o) {\n            var t = new TypeInfoHelper(o);\n            return t.contains(this._typeDescriptor);\n        };\n        return TypeValidator;\n    }());\n    exports.TypeValidator = TypeValidator;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TypeValidator;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n */\r\n\r\n/**\r\n * A descriptor is simply a JSON tree that either has an actual value or a type that identifies what the expect type should be at that leaf in the tree.\r\n *\r\n * var descriptor = {\r\n *      a : Object,\r\n *      b : String,\r\n *      c : {\r\n *          d : true ,\r\n *          e : Array,\r\n *          f : []\r\n *      },\r\n *      g : \"literal\"\r\n * }\r\n */\r\n\r\nimport {TypeInfo} from \"./Types\";\r\nimport {areEqual} from \"./Compare\";\r\nexport class TypeInfoHelper extends TypeInfo\r\n{\r\n\r\n\tprivate _value:any;\r\n\r\n\tconstructor(value:any)\r\n\t{\r\n\t\tsuper(value, ()=>this._value = value);\r\n\r\n\t}\r\n\r\n\tcontains<TDescriptor>(descriptor:any):this is TDescriptor\r\n\t{\r\n\r\n\t\tlet value = this._value;\r\n\r\n\t\tif(value===descriptor)\r\n\t\t\treturn true;\r\n\r\n\t\tswitch(descriptor)\r\n\t\t{\r\n\t\t\tcase Function:\r\n\t\t\t\treturn this.isFunction;\r\n\t\t\tcase Object:\r\n\t\t\t\treturn this.isObject;\r\n\t\t\tcase Array:\r\n\t\t\t\treturn this.isArray;\r\n\t\t\tcase String:\r\n\t\t\t\treturn this.isString;\r\n\t\t\tcase Number:\r\n\t\t\t\treturn this.isNumber;\r\n\t\t\tcase Boolean:\r\n\t\t\t\treturn this.isBoolean;\r\n\t\t}\r\n\r\n\t\tif(this.type != typeof descriptor || this.isPrimitive && !areEqual(value,descriptor))\r\n\t\t\treturn false;\r\n\r\n\t\t// Check array contents and confirm intersections.\r\n\t\tif(this.isArray && Array.isArray(descriptor))\r\n\t\t{\r\n\t\t\tlet max = Math.min(descriptor.length, value.length);\r\n\r\n\t\t\tfor(let i = 0; i<max; i++)\r\n\t\t\t{\r\n\t\t\t\tif(areInvalid(value[i], descriptor[i]))\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(this.isObject)\r\n\t\t{\r\n\t\t\tlet targetKeys = Object.keys(value);\r\n\t\t\tlet dKeys = Object.keys(descriptor);\r\n\r\n\t\t\t// Quick check...\r\n\t\t\tif(dKeys.length>targetKeys.length)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t// Quick check #2...\r\n\t\t\tfor(let key of dKeys)\r\n\t\t\t{\r\n\t\t\t\tif(targetKeys.indexOf(key)== -1)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Final pass with recursive...\r\n\t\t\tfor(let key of dKeys)\r\n\t\t\t{\r\n\t\t\t\tif(areInvalid(value[key], descriptor[key]))\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\nfunction areInvalid(v:any, d:any)\r\n{\r\n\tif(!areEqual(v, d))\r\n\t{\r\n\t\tlet memberType = new TypeInfoHelper(v);\r\n\t\tif(!memberType.contains(d))\r\n\t\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nexport class TypeValidator<T> {\r\n\tconstructor(private _typeDescriptor:any) {\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\tisSubsetOf(o:any):o is T {\r\n\t\tvar t = new TypeInfoHelper(o);\r\n\t\treturn t.contains(this._typeDescriptor);\r\n\t}\r\n}\r\n\r\nexport default TypeValidator;\r\n\r\n"]}