{"version":3,"sources":["System/Disposable/DisposableBase.js","System/Disposable/DisposableBase.ts"],"names":["define","require","exports","ObjectDisposedException_1","DisposableBase","__finalizer","this","__wasDisposed","Object","defineProperty","prototype","get","enumerable","configurable","throwIfDisposed","message","objectName","_disposableObjectName","ObjectDisposedException","dispose","_","_onDispose","value"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,6BAA8B,SAAUC,EAASC,EAASC,GACpF,YCGJ,IAAAC,GAAA,WAGC,QAAAA,GAAoBC,GAAAC,KAAAD,YAAAA,EAIZC,KAAAC,eAAwB,EA8CjC,MA5CCC,QAAAC,eAAIL,EAAAM,UAAA,eDLOC,ICKX,WAEC,MAAOL,MAAKC,eDJFK,YAAY,EACZC,cAAc,ICSfT,EAAAM,UAAAI,gBAAV,SACCC,EACAC,GAEA,GAFA,SAAAA,IAAAA,EAAoBV,KAAKW,uBAEtBX,KAAKC,cACP,KAAM,IAAIJ,GAAAe,wBAAwBF,EAAYD,EAC/C,QAAO,GAIRX,EAAAM,UAAAS,QAAA,WAEC,GAAIC,GAAId,IACR,KAAIc,EAAEb,cACN,CAGCa,EAAEb,eAAgB,CAClB,KAECa,EAAEC,aDdU,QCkBTD,EAAEf,cAEJe,EAAEf,cACFe,EAAEf,YAAc,WAOVD,EAAAM,UAAAW,WAAV,aAEDjB,IArDsBF,GAAAE,eAAcA,EAuDpCI,OAAAC,eAAAP,EAAA,cAAAoB,OAAA,IDnBIpB,EAAAA,WCmBWE","file":"System/Disposable/DisposableBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"./ObjectDisposedException\"], function (require, exports, ObjectDisposedException_1) {\n    \"use strict\";\n    var DisposableBase = (function () {\n        function DisposableBase(__finalizer) {\n            this.__finalizer = __finalizer;\n            this.__wasDisposed = false;\n        }\n        Object.defineProperty(DisposableBase.prototype, \"wasDisposed\", {\n            get: function () {\n                return this.__wasDisposed;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DisposableBase.prototype.throwIfDisposed = function (message, objectName) {\n            if (objectName === void 0) { objectName = this._disposableObjectName; }\n            if (this.__wasDisposed)\n                throw new ObjectDisposedException_1.ObjectDisposedException(objectName, message);\n            return true;\n        };\n        DisposableBase.prototype.dispose = function () {\n            var _ = this;\n            if (!_.__wasDisposed) {\n                _.__wasDisposed = true;\n                try {\n                    _._onDispose();\n                }\n                finally {\n                    if (_.__finalizer) {\n                        _.__finalizer();\n                        _.__finalizer = void 0;\n                    }\n                }\n            }\n        };\n        DisposableBase.prototype._onDispose = function () { };\n        return DisposableBase;\n    }());\n    exports.DisposableBase = DisposableBase;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = DisposableBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ObjectDisposedException} from \"./ObjectDisposedException\";\r\nimport {IDisposableAware} from \"./IDisposableAware\";\r\n\r\nexport abstract class DisposableBase implements IDisposableAware\r\n{\r\n\r\n\tconstructor(private __finalizer?:() => void)\r\n\t{\r\n\t}\r\n\r\n\tprivate __wasDisposed:boolean = false;\r\n\r\n\tget wasDisposed():boolean\r\n\t{\r\n\t\treturn this.__wasDisposed;\r\n\t}\r\n\r\n\t// Allow for simple override of name.\r\n\tprotected _disposableObjectName:string;\r\n\r\n\tprotected throwIfDisposed(\r\n\t\tmessage?:string,\r\n\t\tobjectName:string = this._disposableObjectName):boolean\r\n\t{\r\n\t\tif(this.__wasDisposed)\r\n\t\t\tthrow new ObjectDisposedException(objectName, message);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!_.__wasDisposed)\r\n\t\t{\r\n\t\t\t// Preemptively set wasDisposed in order to prevent repeated disposing.\r\n\t\t\t// NOTE: in true multi-threaded scenarios, this needs to be synchronized.\r\n\t\t\t_.__wasDisposed = true;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_._onDispose(); // Protected override.\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tif(_.__finalizer) // Private finalizer...\r\n\t\t\t\t{\r\n\t\t\t\t\t_.__finalizer();\r\n\t\t\t\t\t_.__finalizer = void 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Placeholder for overrides.\r\n\tprotected _onDispose():void { }\r\n\r\n}\r\n\r\nexport default DisposableBase;"]}