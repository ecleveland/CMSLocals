{"version":3,"sources":["System/Text/RegularExpressions.js","System/Text/RegularExpressions.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","RegexOptions","EMPTY","_I","_G","_M","_U","_W","_Y","IGNORE_CASE","I","GLOBAL","G","MULTI_LINE","M","UNICODE","U","STICKY","Y","IGNORE_PATTERN_WHITESPACE","W","Regex","pattern","options","extra","_i","arguments","length","Error","patternString","flags","Array","isArray","concat","join","toLowerCase","RegExp","ignoreCase","indexOf","multiline","source","ignoreWhiteSpace","replace","keys","k","match","i","len","_keys","_re","freeze","input","startIndex","r","_","exec","substring","Match","Empty","first","index","loc","groups","groupMap","text","g","EmptyGroup","Group","push","m","matches","end","success","count","Infinity","result","isEvaluator","length_1","isMatch","test","e","Capture","value","defineProperty","get","v","enumerable","configurable","_super","call","namedGroups","slice","EmptyMatch"],"mappings":"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","file":"System/Text/RegularExpressions.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Named groups based on: http://trentrichardson.com/2011/08/02/javascript-regexp-match-named-captures/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    var EMPTY = \"\";\n    var UNDEFINED = \"undefined\";\n    var _I = 'i', _G = 'g', _M = 'm', _U = 'u', _W = 'w', _Y = 'y';\n    var RegexOptions;\n    (function (RegexOptions) {\n        RegexOptions.IGNORE_CASE = _I;\n        RegexOptions.I = _I;\n        RegexOptions.GLOBAL = _G;\n        RegexOptions.G = _G;\n        RegexOptions.MULTI_LINE = _M;\n        RegexOptions.M = _M;\n        RegexOptions.UNICODE = _U;\n        RegexOptions.U = _U;\n        RegexOptions.STICKY = _Y;\n        RegexOptions.Y = _Y;\n        RegexOptions.IGNORE_PATTERN_WHITESPACE = _W;\n        RegexOptions.W = _W;\n    })(RegexOptions = exports.RegexOptions || (exports.RegexOptions = {}));\n    var Regex = (function () {\n        function Regex(pattern, options) {\n            var extra = [];\n            for (var _i = 2; _i < arguments.length; _i++) {\n                extra[_i - 2] = arguments[_i];\n            }\n            if (!pattern)\n                throw new Error(\"'pattern' cannot be null or empty.\");\n            var patternString, flags = (options && (Array.isArray(options) ? options : [options]).concat(extra) || extra)\n                .join(EMPTY).toLowerCase();\n            if (pattern instanceof RegExp) {\n                var p = pattern;\n                if (p.ignoreCase && flags.indexOf(_I) === -1)\n                    flags += _I;\n                if (p.multiline && flags.indexOf(_M) === -1)\n                    flags += _M;\n                patternString = p.source;\n            }\n            else {\n                patternString = pattern;\n            }\n            var ignoreWhiteSpace = flags.indexOf(_W) != -1;\n            flags = flags.replace(/[gw]/g, EMPTY);\n            var keys = [];\n            {\n                var k = patternString.match(/(?!\\(\\?<)(\\w+)(?=>)/g);\n                if (k) {\n                    for (var i = 0, len = k.length; i < len; i++) {\n                        keys[i + 1] = k[i];\n                    }\n                    patternString = patternString.replace(/\\?<\\w+>/g, EMPTY);\n                    this._keys = keys;\n                }\n                if (ignoreWhiteSpace)\n                    patternString = patternString.replace(/\\s+/g, \"\\\\s*\");\n                this._re = new RegExp(patternString, flags);\n            }\n            Object.freeze(this);\n        }\n        Regex.prototype.match = function (input, startIndex) {\n            if (startIndex === void 0) { startIndex = 0; }\n            var _ = this;\n            var r;\n            if (!input\n                || startIndex >= input.length\n                || !(r = this._re.exec(input.substring(startIndex))))\n                return Match.Empty;\n            if (!(startIndex > 0))\n                startIndex = 0;\n            var first = startIndex + r.index, loc = first, groups = [], groupMap = {};\n            for (var i = 0, len = r.length; i < len; ++i) {\n                var text = r[i];\n                var g = EmptyGroup;\n                if (text !== null || text !== void 0) {\n                    g = new Group(text, loc);\n                    g.freeze();\n                }\n                if (i && _._keys && i < _._keys.length)\n                    groupMap[_._keys[i]] = g;\n                groups.push(g);\n                if (i !== 0)\n                    loc += text.length;\n            }\n            var m = new Match(r[0], first, groups, groupMap);\n            m.freeze();\n            return m;\n        };\n        Regex.prototype.matches = function (input) {\n            var matches = [], m, p = 0, end = input && input.length || 0;\n            while (p < end && (m = this.match(input, p)) && m.success) {\n                matches.push(m);\n                p = m.index + m.length;\n            }\n            return Object.freeze(matches);\n        };\n        Regex.prototype.replace = function (input, r, count) {\n            if (count === void 0) { count = Infinity; }\n            if (!input || r === null || r === void 0 || !(count > 0))\n                return input;\n            var result = [];\n            var p = 0, end = input.length, isEvaluator = typeof r == \"function\";\n            var m, i = 0;\n            while (i < count && p < end && (m = this.match(input, p)) && m.success) {\n                var index = m.index, length_1 = m.length;\n                if (p !== index)\n                    result.push(input.substring(p, index));\n                result.push(isEvaluator ? r(m, i++) : r);\n                p = index + length_1;\n            }\n            if (p < end)\n                result.push(input.substring(p));\n            return result.join(EMPTY);\n        };\n        Regex.prototype.isMatch = function (input) {\n            return this._re.test(input);\n        };\n        Regex.isMatch = function (input, pattern, options) {\n            var r = new Regex(pattern, options);\n            return r.isMatch(input);\n        };\n        Regex.replace = function (input, pattern, e, options) {\n            var r = new Regex(pattern, options);\n            return r.replace(input, e);\n        };\n        return Regex;\n    }());\n    exports.Regex = Regex;\n    var Capture = (function () {\n        function Capture(value, index) {\n            if (value === void 0) { value = EMPTY; }\n            if (index === void 0) { index = -1; }\n            this.value = value;\n            this.index = index;\n        }\n        Object.defineProperty(Capture.prototype, \"length\", {\n            get: function () {\n                var v = this.value;\n                return v && v.length || 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Capture.prototype.freeze = function () {\n            Object.freeze(this);\n        };\n        return Capture;\n    }());\n    exports.Capture = Capture;\n    var Group = (function (_super) {\n        __extends(Group, _super);\n        function Group(value, index) {\n            if (value === void 0) { value = EMPTY; }\n            if (index === void 0) { index = -1; }\n            _super.call(this, value, index);\n        }\n        Object.defineProperty(Group.prototype, \"success\", {\n            get: function () {\n                return this.index != -1;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Group, \"Empty\", {\n            get: function () {\n                return EmptyGroup;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Group;\n    }(Capture));\n    exports.Group = Group;\n    var EmptyGroup = new Group();\n    EmptyGroup.freeze();\n    var Match = (function (_super) {\n        __extends(Match, _super);\n        function Match(value, index, groups, namedGroups) {\n            if (value === void 0) { value = EMPTY; }\n            if (index === void 0) { index = -1; }\n            if (groups === void 0) { groups = []; }\n            if (namedGroups === void 0) { namedGroups = {}; }\n            _super.call(this, value, index);\n            this.groups = groups;\n            this.namedGroups = namedGroups;\n        }\n        Match.prototype.freeze = function () {\n            if (!this.groups)\n                throw new Error(\"'groups' cannot be null.\");\n            if (!this.namedGroups)\n                throw new Error(\"'groupMap' cannot be null.\");\n            Object.freeze(this.groups.slice());\n            Object.freeze(this.namedGroups);\n            _super.prototype.freeze.call(this);\n        };\n        Object.defineProperty(Match, \"Empty\", {\n            get: function () {\n                return EmptyMatch;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Match;\n    }(Group));\n    exports.Match = Match;\n    var EmptyMatch = new Match();\n    EmptyMatch.freeze();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Regex;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Named groups based on: http://trentrichardson.com/2011/08/02/javascript-regexp-match-named-captures/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n// NOTE: Avoid real (types/interfaces only = ok) dependencies so this class can be used cleanly.\r\nimport {IMap} from \"../Collections/Dictionaries/IDictionary\";\r\nimport {Primitive} from \"../Primitive\";\r\nimport {Selector} from \"../FunctionTypes\";\r\n\r\nconst EMPTY:string = \"\";\r\nconst UNDEFINED:string = \"undefined\";\r\nconst _I = 'i', _G = 'g', _M = 'm', _U = 'u', _W = 'w', _Y = 'y';\r\n\r\n\r\n/**\r\n * https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regexoptions%28v=vs.110%29.aspx\r\n */\r\nexport module RegexOptions\r\n{\r\n\t/**\r\n\t * Specifies case-insensitive matching. For more information, see the \"Case-Insensitive Matching \" section in the Regular Expression Options topic.\r\n\t */\r\n\texport const IGNORE_CASE:string = _I;\r\n\texport const I:string = _I;\r\n\r\n\t/**\r\n\t * Specifies global matching instead of single.\r\n\t */\r\n\texport const GLOBAL:string = _G;\r\n\texport const G:string = _G;\r\n\r\n\t/**\r\n\t * treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of each line (delimited by \\n or \\r), not only the very beginning or end of the whole input string)\r\n\t */\r\n\texport const MULTI_LINE:string = _M;\r\n\texport const M:string = _M;\r\n\r\n\t/**\r\n\t * treat pattern as a sequence of unicode code points\r\n\t */\r\n\texport const UNICODE:string = _U;\r\n\texport const U:string = _U;\r\n\r\n\t/**\r\n\t * matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes).\r\n\t */\r\n\texport const STICKY:string = _Y;\r\n\texport const Y:string = _Y;\r\n\r\n\t/**\r\n\t * Modifies the pattern to ignore standard whitespace characters.\r\n\t */\r\n\texport const IGNORE_PATTERN_WHITESPACE:string = _W;\r\n\texport const W:string = _W;\r\n\r\n\texport type Global = 'g';\r\n\texport type IgnoreCase = 'i';\r\n\texport type MultiLine = 'm';\r\n\texport type Unicode = 'u';\r\n\texport type Sticky = 'y';\r\n\texport type IgnorePatternWhitespace = \"w\";\r\n\r\n\texport type Literal = Global | IgnoreCase | MultiLine | Unicode | Sticky | IgnorePatternWhitespace;\r\n}\r\n\r\nexport interface MatchEvaluator extends Selector<Match,Primitive>\r\n{\r\n}\r\n\r\nexport class Regex\r\n{\r\n\tprivate _re:RegExp;\r\n\tprivate _keys:string[];\r\n\r\n\tconstructor(\r\n\t\tpattern:string|RegExp,\r\n\t\toptions?:RegexOptions.Literal|RegexOptions.Literal[],\r\n\t\t...extra:RegexOptions.Literal[])\r\n\t{\r\n\t\tif(!pattern) throw new Error(\"'pattern' cannot be null or empty.\");\r\n\r\n\t\tvar patternString:string,\r\n\t\t    flags:string\r\n\t\t\t    = (options && (Array.isArray(options) ? options : [options]).concat(extra) || extra)\r\n\t\t\t    .join(EMPTY).toLowerCase();\r\n\r\n\t\tif(pattern instanceof RegExp)\r\n\t\t{\r\n\t\t\tlet p = <RegExp>pattern;\r\n\t\t\tif(p.ignoreCase && flags.indexOf(_I)=== -1)\r\n\t\t\t\tflags += _I;\r\n\t\t\tif(p.multiline && flags.indexOf(_M)=== -1)\r\n\t\t\t\tflags += _M;\r\n\t\t\tpatternString = p.source;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tpatternString = pattern;\r\n\t\t}\r\n\t\tvar ignoreWhiteSpace = flags.indexOf(_W)!= -1;\r\n\r\n\t\t// For the majority of expected behavior, we need to eliminate global and whitespace ignore.\r\n\t\tflags = flags.replace(/[gw]/g, EMPTY);\r\n\r\n\t\t// find the keys inside the pattern, and place in mapping array {0:'key1', 1:'key2', ...}\r\n\t\tvar keys:string[] = [];\r\n\t\t{\r\n\t\t\tlet k = patternString.match(/(?!\\(\\?<)(\\w+)(?=>)/g);\r\n\t\t\tif(k)\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0, len = k.length; i<len; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tkeys[i + 1] = k[i];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// remove keys from regexp leaving standard regexp\r\n\t\t\t\tpatternString = patternString.replace(/\\?<\\w+>/g, EMPTY);\r\n\t\t\t\tthis._keys = keys;\r\n\t\t\t}\r\n\r\n\t\t\tif(ignoreWhiteSpace)\r\n\t\t\t\tpatternString = patternString.replace(/\\s+/g, \"\\\\s*\");\r\n\r\n\t\t\tthis._re = new RegExp(patternString, flags);\r\n\r\n\t\t}\r\n\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\tmatch(input:string, startIndex:number = 0):Match\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar r:RegExpExecArray;\r\n\t\tif(!input\r\n\t\t\t|| startIndex>=input.length\r\n\t\t\t|| !(r = this._re.exec(input.substring(startIndex))))\r\n\t\t\treturn Match.Empty;\r\n\r\n\t\tif(!(startIndex>0)) startIndex = 0;\r\n\r\n\t\tvar first                = startIndex + r.index,\r\n\t\t    loc                  = first,\r\n\t\t    groups:Group[]       = [],\r\n\t\t    groupMap:IMap<Group> = {};\r\n\r\n\t\tfor(let i = 0, len = r.length; i<len; ++i)\r\n\t\t{\r\n\t\t\tlet text = r[i];\r\n\t\t\tlet g = EmptyGroup;\r\n\t\t\tif(text!==null || text!==void 0) {\r\n\t\t\t\t// Empty string might mean \\b match or similar.\r\n\t\t\t\tg = new Group(text, loc);\r\n\t\t\t\tg.freeze();\r\n\t\t\t}\r\n\t\t\tif(i && _._keys && i<_._keys.length) groupMap[_._keys[i]] = g;\r\n\t\t\tgroups.push(g);\r\n\t\t\tif(i!==0) loc += text.length;\r\n\t\t}\r\n\r\n\t\tvar m = new Match(r[0], first, groups, groupMap);\r\n\t\tm.freeze();\r\n\t\treturn m;\r\n\t}\r\n\r\n\tmatches(input:string):Match[]\r\n\t{\r\n\t\tvar matches:Match[] = [], m:Match, p = 0, end = input && input.length || 0;\r\n\t\twhile(p<end && (m = this.match(input, p)) && m.success)\r\n\t\t{\r\n\t\t\tmatches.push(m);\r\n\t\t\tp = m.index + m.length;\r\n\t\t}\r\n\t\treturn Object.freeze(matches);\r\n\t}\r\n\r\n\treplace(\r\n\t\tinput:string,\r\n\t\treplacement:Primitive,\r\n\t\tcount?:number):string;\r\n\r\n\treplace(\r\n\t\tinput:string,\r\n\t\tevaluator:MatchEvaluator,\r\n\t\tcount?:number):string;\r\n\r\n\treplace(\r\n\t\tinput:string,\r\n\t\tr:any,\r\n\t\tcount:number = Infinity):string\r\n\t{\r\n\t\tif(!input || r===null || r=== void 0 || !(count>0)) return input;\r\n\t\tvar result:string[] = [];\r\n\t\tvar p = 0, end = input.length, isEvaluator = typeof r==\"function\";\r\n\r\n\t\tvar m:Match, i:number = 0;\r\n\t\twhile(i<count && p<end && (m = this.match(input, p)) && m.success)\r\n\t\t{\r\n\t\t\tlet {index, length} = m;\r\n\t\t\tif(p!==index) result.push(input.substring(p, index));\r\n\t\t\tresult.push(isEvaluator ? r(m, i++) : r);\r\n\t\t\tp = index + length;\r\n\t\t}\r\n\r\n\t\tif(p<end) result.push(input.substring(p));\r\n\r\n\t\treturn result.join(EMPTY);\r\n\t}\r\n\r\n\tisMatch(input:string):boolean\r\n\t{\r\n\t\treturn this._re.test(input);\r\n\t}\r\n\r\n\tstatic isMatch(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\toptions?:RegexOptions.Literal[]):boolean\r\n\t{\r\n\t\tvar r = new Regex(pattern, options);\r\n\t\treturn r.isMatch(input);\r\n\t}\r\n\r\n\tstatic replace(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\treplacement:string,\r\n\t\toptions?:RegexOptions.Literal[]):string;\r\n\r\n\tstatic replace(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\tevaluator:MatchEvaluator,\r\n\t\toptions?:RegexOptions.Literal[]):string;\r\n\r\n\tstatic replace(\r\n\t\tinput:string,\r\n\t\tpattern:string,\r\n\t\te:any,\r\n\t\toptions?:RegexOptions.Literal[]):string\r\n\t{\r\n\t\tvar r = new Regex(pattern, options);\r\n\t\treturn r.replace(input, e);\r\n\t}\r\n}\r\n\r\nexport class Capture\r\n{\r\n\r\n\tget length():number\r\n\t{\r\n\t\tvar v = this.value;\r\n\t\treturn v && v.length || 0;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tpublic value:string = EMPTY,\r\n\t\tpublic index:number = -1)\r\n\t{\r\n\t}\r\n\r\n\tfreeze():void\r\n\t{\r\n\t\tObject.freeze(this);\r\n\t}\r\n}\r\n\r\nexport class Group extends Capture\r\n{\r\n\tget success():boolean\r\n\t{\r\n\t\treturn this.index!= -1;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tvalue:string = EMPTY,\r\n\t\tindex:number = -1)\r\n\t{\r\n\t\tsuper(value, index);\r\n\t}\r\n\r\n\tstatic get Empty():Group\r\n\t{\r\n\t\treturn EmptyGroup;\r\n\t}\r\n\r\n}\r\nconst EmptyGroup = new Group();\r\nEmptyGroup.freeze();\r\n\r\nexport class Match extends Group\r\n{\r\n\r\n\tconstructor(\r\n\t\tvalue:string = EMPTY,\r\n\t\tindex:number = -1,\r\n\t\tpublic groups:Group[] = [],\r\n\t\tpublic namedGroups:IMap<Group> = {})\r\n\t{\r\n\t\tsuper(value, index);\r\n\t}\r\n\r\n\tfreeze():void\r\n\t{\r\n\t\tif(!this.groups) throw new Error(\"'groups' cannot be null.\");\r\n\t\tif(!this.namedGroups) throw new Error(\"'groupMap' cannot be null.\");\r\n\t\tObject.freeze(this.groups.slice());\r\n\t\tObject.freeze(this.namedGroups);\r\n\t\tsuper.freeze();\r\n\t}\r\n\r\n\tstatic get Empty():Match\r\n\t{\r\n\t\treturn EmptyMatch;\r\n\t}\r\n}\r\nconst EmptyMatch = new Match();\r\nEmptyMatch.freeze();\r\n\r\n\r\nexport default Regex;"]}