{"version":3,"sources":["System/Text/Padding.js","System/Text/Padding.ts"],"names":["define","require","exports","Types_1","Utility_1","padStringLeft","source","minLength","pad","SPACE","repeat","length","padStringRight","padNumberLeft","ZERO","Type","isNumber","Error","EMPTY","padNumberRight","padLeft","isString","padRight"],"mappings":"AAAAA,QAAQ,UAAW,UAAW,WAAY,aAAc,SAAUC,EAASC,EAASC,EAASC,GACzF,YCKJ,SAAAC,GAA8BC,EAAeC,EAAkBC,GAE9D,MAF8D,UAAAA,IAAAA,EAAAC,GAEvDD,GAAOD,EAAU,EACpBH,EAAAM,OAAOF,EAAKD,EAAYD,EAAOK,QAAUL,EAC1CA,EAGJ,QAAAM,GAA+BN,EAAeC,EAAkBC,GAE/D,MAF+D,UAAAA,IAAAA,EAAAC,GAExDD,GAAOD,EAAU,EACpBD,EAASF,EAAAM,OAAOF,EAAKD,EAAYD,EAAOK,QACzCL,EAGJ,QAAAO,GAA8BP,EAAeC,EAAkBC,GAE9D,GAF8D,SAAAA,IAAAA,EAAAM,IAE1DX,EAAAY,KAAKC,SAASV,GACjB,KAAM,IAAIW,OAAM,yBAIjB,OAFIX,KAAQA,EAAS,GAEdD,EAAcC,EAASF,EAAAc,MAAOX,EAAWC,EAAMJ,EAAAc,OAIvD,QAAAC,GAA+Bb,EAAeC,EAAkBC,GAE/D,GAF+D,SAAAA,IAAAA,EAAAM,IAE3DX,EAAAY,KAAKC,SAASV,GACjB,KAAM,IAAIW,OAAM,yBAIjB,OAFIX,KAAQA,EAAS,GAEdM,EAAeN,EAASF,EAAAc,MAAOX,EAAWC,EAAMJ,EAAAc,OAKxD,QAAAE,GAAwBd,EAAsBC,EAAkBC,GAE/D,GAAGL,EAAAY,KAAKM,SAASf,GAAS,MAAOD,GAAcC,EAAQC,EAAWC,EAClE,IAAGL,EAAAY,KAAKC,SAASV,GAAS,MAAOO,GAAcP,EAAQC,EAAWC,EAClE,MAAM,IAAIS,OAAM,wBAKjB,QAAAK,GAAyBhB,EAAsBC,EAAkBC,GAEhE,GAAGL,EAAAY,KAAKM,SAASf,GAAS,MAAOM,GAAeN,EAAQC,EAAWC,EACnE,IAAGL,EAAAY,KAAKC,SAASV,GAAS,MAAOa,GAAeb,EAAQC,EAAWC,EACnE,MAAM,IAAIS,OAAM,wBArDjB,GAAMR,GAAQ,IACRK,EAAO,GAEGZ,GAAAG,cAAaA,EAObH,EAAAU,eAAcA,EAOdV,EAAAW,cAAaA,EAWbX,EAAAiB,eAAcA,EAYdjB,EAAAkB,QAAOA,EASPlB,EAAAoB,SAAQA","file":"System/Text/Padding.js","sourcesContent":["define([\"require\", \"exports\", \"../Types\", \"./Utility\"], function (require, exports, Types_1, Utility_1) {\n    \"use strict\";\n    var SPACE = ' ';\n    var ZERO = '0';\n    function padStringLeft(source, minLength, pad) {\n        if (pad === void 0) { pad = SPACE; }\n        return pad && minLength > 0\n            ? (Utility_1.repeat(pad, minLength - source.length) + source)\n            : source;\n    }\n    exports.padStringLeft = padStringLeft;\n    function padStringRight(source, minLength, pad) {\n        if (pad === void 0) { pad = SPACE; }\n        return pad && minLength > 0\n            ? (source + Utility_1.repeat(pad, minLength - source.length))\n            : source;\n    }\n    exports.padStringRight = padStringRight;\n    function padNumberLeft(source, minLength, pad) {\n        if (pad === void 0) { pad = ZERO; }\n        if (!Types_1.Type.isNumber(source))\n            throw new Error(\"Cannot pad non-number.\");\n        if (!source)\n            source = 0;\n        return padStringLeft(source + Utility_1.EMPTY, minLength, pad + Utility_1.EMPTY);\n    }\n    exports.padNumberLeft = padNumberLeft;\n    function padNumberRight(source, minLength, pad) {\n        if (pad === void 0) { pad = ZERO; }\n        if (!Types_1.Type.isNumber(source))\n            throw new Error(\"Cannot pad non-number.\");\n        if (!source)\n            source = 0;\n        return padStringRight(source + Utility_1.EMPTY, minLength, pad + Utility_1.EMPTY);\n    }\n    exports.padNumberRight = padNumberRight;\n    function padLeft(source, minLength, pad) {\n        if (Types_1.Type.isString(source))\n            return padStringLeft(source, minLength, pad);\n        if (Types_1.Type.isNumber(source))\n            return padNumberLeft(source, minLength, pad);\n        throw new Error(\"Invalid source type.\");\n    }\n    exports.padLeft = padLeft;\n    function padRight(source, minLength, pad) {\n        if (Types_1.Type.isString(source))\n            return padStringRight(source, minLength, pad);\n        if (Types_1.Type.isNumber(source))\n            return padNumberRight(source, minLength, pad);\n        throw new Error(\"Invalid source type.\");\n    }\n    exports.padRight = padRight;\n});\n","import {Type} from \"../Types\";\r\nimport {repeat, EMPTY} from \"./Utility\";\r\n\r\nconst SPACE = ' ';\r\nconst ZERO = '0';\r\n\r\nexport function padStringLeft(source:string, minLength:number, pad:string = SPACE):string\r\n{\r\n\treturn pad && minLength>0\r\n\t\t? (repeat(pad, minLength - source.length) + source)\r\n\t\t: source;\r\n}\r\n\r\nexport function padStringRight(source:string, minLength:number, pad:string = SPACE):string\r\n{\r\n\treturn pad && minLength>0\r\n\t\t? (source + repeat(pad, minLength - source.length))\r\n\t\t: source;\r\n}\r\n\r\nexport function padNumberLeft(source:number, minLength:number, pad:string|number = ZERO):string\r\n{\r\n\tif(!Type.isNumber(source))\r\n\t\tthrow new Error(\"Cannot pad non-number.\");\r\n\r\n\tif(!source) source = 0;\r\n\r\n\treturn padStringLeft(source + EMPTY, minLength, pad + EMPTY);\r\n}\r\n\r\n\r\nexport function padNumberRight(source:number, minLength:number, pad:string|number = ZERO):string\r\n{\r\n\tif(!Type.isNumber(source))\r\n\t\tthrow new Error(\"Cannot pad non-number.\");\r\n\r\n\tif(!source) source = 0;\r\n\r\n\treturn padStringRight(source + EMPTY, minLength, pad + EMPTY);\r\n}\r\n\r\nexport function padLeft(source:string, minLength:number, pad?:string):string\r\nexport function padLeft(source:number, minLength:number, pad?:string|number):string\r\nexport function padLeft(source:string|number, minLength:number, pad?:any):string\r\n{\r\n\tif(Type.isString(source)) return padStringLeft(source, minLength, pad);\r\n\tif(Type.isNumber(source)) return padNumberLeft(source, minLength, pad);\r\n\tthrow new Error(\"Invalid source type.\");\r\n}\r\n\r\nexport function padRight(source:string, minLength:number, pad?:string):string\r\nexport function padRight(source:number, minLength:number, pad?:string|number):string\r\nexport function padRight(source:string|number, minLength:number, pad?:any):string\r\n{\r\n\tif(Type.isString(source)) return padStringRight(source, minLength, pad);\r\n\tif(Type.isNumber(source)) return padNumberRight(source, minLength, pad);\r\n\tthrow new Error(\"Invalid source type.\");\r\n}"]}