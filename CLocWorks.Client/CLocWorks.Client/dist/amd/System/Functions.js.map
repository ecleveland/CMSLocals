{"version":3,"sources":["System/Functions.js","System/Functions.ts"],"names":["define","require","exports","Functions","prototype","Identity","x","True","False","Blank","rootFunctions","Object","freeze","defineProperty","value"],"mappings":";;;;AAIAA,QAAQ,UAAW,WAAY,SAAUC,EAASC,GAC9C,YCGJ,IAAAC,GAAA,WAAA,QAAAA,MA6BA,MAtBCA,GAAAC,UAAAC,SAAA,SAAYC,GACV,MAAOA,IAMTH,EAAAC,UAAAG,KAAA,WACE,OAAO,GAMTJ,EAAAC,UAAAI,MAAA,WACE,OAAO,GAKTL,EAAAC,UAAAK,MAAA,aAEDN,IA7BaD,GAAAC,UAASA,CA+BtB,IAIcA,GAJRO,EAA0B,GAAIP,IAIpC,SAAcA,GAMAA,EAAAE,SACVK,EAAcL,SAMJF,EAAAI,KACVG,EAAcH,KAMJJ,EAAAK,MACVE,EAAcF,MAKJL,EAAAM,MACVC,EAAcD,OA3BJN,EAAAD,EAAAC,YAAAD,EAAAC,eA+BdQ,OAAOC,OAAOT,GAEdQ,OAAAE,eAAAX,EAAA,cAAAY,OAAA,IDlDIZ,EAAAA,WCkDWC","file":"System/Functions.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    var Functions = (function () {\n        function Functions() {\n        }\n        Functions.prototype.Identity = function (x) { return x; };\n        Functions.prototype.True = function () { return true; };\n        Functions.prototype.False = function () { return false; };\n        Functions.prototype.Blank = function () { };\n        return Functions;\n    }());\n    exports.Functions = Functions;\n    var rootFunctions = new Functions();\n    var Functions;\n    (function (Functions) {\n        Functions.Identity = rootFunctions.Identity;\n        Functions.True = rootFunctions.True;\n        Functions.False = rootFunctions.False;\n        Functions.Blank = rootFunctions.Blank;\n    })(Functions = exports.Functions || (exports.Functions = {}));\n    Object.freeze(Functions);\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Functions;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n/**\r\n * Can be used statically or extended for varying different reusable function signatures.\r\n */\r\nexport class Functions\r\n{\r\n\r\n\t/**\r\n\t * A typed method for use with simple selection of the parameter.\r\n\t * @returns {T}\r\n\t */\r\n\tIdentity<T>(x:T):T\r\n\t{ return x; }\r\n\r\n\t/**\r\n\t * Returns true.\r\n\t * @returns {boolean}\r\n\t */\r\n\tTrue():boolean\r\n\t{ return true; }\r\n\r\n\t/**\r\n\t * Returns false.\r\n\t * @returns {boolean}\r\n\t */\r\n\tFalse():boolean\r\n\t{ return false; }\r\n\r\n\t/**\r\n\t * Does nothing.\r\n\t */\r\n\tBlank():void\r\n\t{ }\r\n}\r\n\r\nconst rootFunctions:Functions = new Functions();\r\n\r\n// Expose static versions.\r\n\r\nexport module Functions\r\n{\r\n\t/**\r\n\t * A typed method for use with simple selection of the parameter.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport const Identity:<T>(x:T) => T\r\n\t\t= rootFunctions.Identity;\r\n\r\n\t/**\r\n\t * Returns false.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport const True:() => boolean\r\n\t\t= rootFunctions.True;\r\n\r\n\t/**\r\n\t * Returns false.\r\n\t * @returns {boolean}\r\n\t */\r\n\texport const False:() => boolean\r\n\t\t= rootFunctions.False;\r\n\r\n\t/**\r\n\t * Does nothing.\r\n\t */\r\n\texport const Blank:() => void\r\n\t\t= rootFunctions.Blank;\r\n}\r\n\r\n// Make this read only.  Should still allow for sub-classing since extra methods are added to prototype.\r\nObject.freeze(Functions);\r\n\r\nexport default Functions;\r\n\r\n"]}