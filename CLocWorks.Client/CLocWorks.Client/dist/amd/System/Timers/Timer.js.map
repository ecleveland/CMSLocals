{"version":3,"sources":["System/Timers/Timer.js","System/Timers/Timer.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","ObservableBase_1","Timer","_super","_interval","_maxCount","_initialDelay","Infinity","call","_count","startNew","millisecondInterval","maxCount","initialDelay","t","start","defineProperty","get","_cancel","enumerable","configurable","_","i_1","setInterval","_onTick","clearInterval","i_2","setTimeout","clearTimeout","stop","cancel","reset","dispose","timer","reInitTimer","index","max","isComplete","_onNext","_onCompleted","ObservableBase","value"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,gCAAiC,SAAUC,EAASC,EAASC,GACvF,YCAJ,IAAAC,GAAA,SAAAC,GAMC,QAAAD,GACSE,EACAC,EACAC,GAIR,GALA,SAAAD,IAAAA,EAAAE,EAAAA,GACA,SAAAD,IAAAA,EAAAF,GAEAD,EAAAK,KAAApB,MAJQA,KAAAgB,UAAAA,EACAhB,KAAAiB,UAAAA,EACAjB,KAAAkB,cAAAA,EALDlB,KAAAqB,OAAgB,EASR,OAAZL,GAAiC,SAAbA,EACtB,KAAM,oCACP,IAAa,EAAVA,EACF,KAAM,iCAoHT,MApImCjB,WAAAe,EAAAC,GAmB3BD,EAAAQ,SAAP,SACCC,EACAC,EACAC,GADA,SAAAD,IAAAA,EAAAL,EAAAA,GACA,SAAAM,IAAAA,EAAAF,EAEA,IAAIG,GAAI,GAAIZ,GAAMS,EAAqBC,EAAUD,EAEjD,OADAG,GAAEC,QACKD,GAGRlB,OAAAoB,eAAId,EAAAP,UAAA,aDLOsB,ICKX,WAEC,QAAS7B,KAAK8B,SDJJC,YAAY,EACZC,cAAc,ICMzBxB,OAAAoB,eAAId,EAAAP,UAAA,SDHOsB,ICGX,WAEC,MAAO7B,MAAKqB,QDFFU,YAAY,EACZC,cAAc,ICIzBlB,EAAAP,UAAAoB,MAAA,WAEC,GAAIM,GAAIjC,IACR,KAAIiC,EAAEH,SAAWG,EAAEZ,OAAOY,EAAEhB,UAG3B,GAAGgB,EAAEZ,QAAUY,EAAEf,eAAee,EAAEjB,UAClC,CACC,GAAIkB,GAAIC,YACPrB,EAAMsB,QACNH,EAAEjB,UACFiB,EAEDA,GAAEH,QAAU,WAEXO,cAAcH,QAIhB,CACC,GAAII,GAAIC,WACPzB,EAAMsB,QACNH,EAAEf,cACFe,GAAG,EAEJA,GAAEH,QAAU,WAEXU,aAAaF,MAOjBxB,EAAAP,UAAAkC,KAAA,WAECzC,KAAK0C,UAGN5B,EAAAP,UAAAoC,MAAA,WAEC3C,KAAKyC,OACLzC,KAAKqB,OAAS,GAGfP,EAAAP,UAAAmC,OAAA,WAEC,MAAG1C,MAAK8B,SAEP9B,KAAK8B,UACL9B,KAAK8B,QAAU,MACR,IAED,GAGRhB,EAAAP,UAAAqC,QAAA,WAEC5C,KAAK0C,SACL3B,EAAAR,UAAMqC,QAAOxB,KAAApB,OAICc,EAAAsB,QAAf,SACCS,EACAC,GAEA,GAAIC,GAAaF,EAAMxB,SACnB2B,EAAaH,EAAM5B,UACnBgC,EAAaJ,EAAMxB,QAAQ2B,CAE5BF,KAEFD,EAAMH,SACNG,EAAMlB,SAGJsB,GAEFJ,EAAMJ,OAGEO,EAAND,GAEFF,EAAMK,QAAQH,GAGZE,GAEFJ,EAAMM,gBAITrC,GApImCD,EAAAuC,eAAnC5C,QAAAoB,eAAAhB,EAAA,cAAAyC,OAAA,ID4FIzC,EAAAA,WAAkBE","file":"System/Timers/Timer.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"../Observable/ObservableBase\"], function (require, exports, ObservableBase_1) {\n    \"use strict\";\n    var Timer = (function (_super) {\n        __extends(Timer, _super);\n        function Timer(_interval, _maxCount, _initialDelay) {\n            if (_maxCount === void 0) { _maxCount = Infinity; }\n            if (_initialDelay === void 0) { _initialDelay = _interval; }\n            _super.call(this);\n            this._interval = _interval;\n            this._maxCount = _maxCount;\n            this._initialDelay = _initialDelay;\n            this._count = 0;\n            if (_interval === null || _interval === void (0))\n                throw \"'interval' must be a valid number.\";\n            if (_interval < 0)\n                throw \"'interval' cannot be negative.\";\n        }\n        Timer.startNew = function (millisecondInterval, maxCount, initialDelay) {\n            if (maxCount === void 0) { maxCount = Infinity; }\n            if (initialDelay === void 0) { initialDelay = millisecondInterval; }\n            var t = new Timer(millisecondInterval, maxCount, millisecondInterval);\n            t.start();\n            return t;\n        };\n        Object.defineProperty(Timer.prototype, \"isRunning\", {\n            get: function () {\n                return !!this._cancel;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Timer.prototype, \"count\", {\n            get: function () {\n                return this._count;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Timer.prototype.start = function () {\n            var _ = this;\n            if (!_._cancel && _._count < _._maxCount) {\n                if (_._count || _._initialDelay == _._interval) {\n                    var i_1 = setInterval(Timer._onTick, _._interval, _);\n                    _._cancel = function () {\n                        clearInterval(i_1);\n                    };\n                }\n                else {\n                    var i_2 = setTimeout(Timer._onTick, _._initialDelay, _, true);\n                    _._cancel = function () {\n                        clearTimeout(i_2);\n                    };\n                }\n            }\n        };\n        Timer.prototype.stop = function () {\n            this.cancel();\n        };\n        Timer.prototype.reset = function () {\n            this.stop();\n            this._count = 0;\n        };\n        Timer.prototype.cancel = function () {\n            if (this._cancel) {\n                this._cancel();\n                this._cancel = null;\n                return true;\n            }\n            return false;\n        };\n        Timer.prototype.dispose = function () {\n            this.cancel();\n            _super.prototype.dispose.call(this);\n        };\n        Timer._onTick = function (timer, reInitTimer) {\n            var index = timer._count++, max = timer._maxCount, isComplete = timer._count >= max;\n            if (reInitTimer) {\n                timer.cancel();\n                timer.start();\n            }\n            if (isComplete) {\n                timer.stop();\n            }\n            if (index < max) {\n                timer._onNext(index);\n            }\n            if (isComplete) {\n                timer._onCompleted();\n            }\n        };\n        return Timer;\n    }(ObservableBase_1.ObservableBase));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Timer;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {ICancellable} from \"../Threading/ICancellable\";\r\nimport {ObservableBase} from \"../Observable/ObservableBase\";\r\nimport {ITimer} from \"./ITimer\";\r\n\r\nexport default class Timer extends ObservableBase<number> implements ITimer, ICancellable\r\n{\r\n\r\n\tprivate _cancel:()=>void;\r\n\tprivate _count:number = 0;\r\n\r\n\tconstructor(\r\n\t\tprivate _interval:number,\r\n\t\tprivate _maxCount:number = Infinity,\r\n\t\tprivate _initialDelay = _interval)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(_interval===null || _interval=== void(0))\r\n\t\t\tthrow \"'interval' must be a valid number.\";\r\n\t\tif(_interval<0)\r\n\t\t\tthrow \"'interval' cannot be negative.\";\r\n\t}\r\n\r\n\tstatic startNew(\r\n\t\tmillisecondInterval:number,\r\n\t\tmaxCount:number = Infinity,\r\n\t\tinitialDelay:number = millisecondInterval):Timer\r\n\t{\r\n\t\tvar t = new Timer(millisecondInterval, maxCount, millisecondInterval);\r\n\t\tt.start();\r\n\t\treturn t;\r\n\t}\r\n\r\n\tget isRunning():boolean\r\n\t{\r\n\t\treturn !!this._cancel;\r\n\t}\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\tstart():void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!_._cancel && _._count<_._maxCount)\r\n\t\t{\r\n\t\t\t// For now, if it's isn't the start...\r\n\t\t\tif(_._count || _._initialDelay==_._interval)\r\n\t\t\t{\r\n\t\t\t\tlet i = setInterval(\r\n\t\t\t\t\tTimer._onTick,\r\n\t\t\t\t\t_._interval,\r\n\t\t\t\t\t_);\r\n\r\n\t\t\t\t_._cancel = ()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tclearInterval(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlet i = setTimeout(\r\n\t\t\t\t\tTimer._onTick,\r\n\t\t\t\t\t_._initialDelay,\r\n\t\t\t\t\t_, true);\r\n\r\n\t\t\t\t_._cancel = ()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tclearTimeout(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstop():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tthis.stop();\r\n\t\tthis._count = 0;\r\n\t}\r\n\r\n\tcancel():boolean\r\n\t{\r\n\t\tif(this._cancel)\r\n\t\t{\r\n\t\t\tthis._cancel();\r\n\t\t\tthis._cancel = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t// We use a private static here so there's no need to create a handler every time.\r\n\tprivate static _onTick(\r\n\t\ttimer:Timer,\r\n\t\treInitTimer?:boolean):void\r\n\t{\r\n\t\tvar index      = timer._count++,\r\n\t\t    max        = timer._maxCount,\r\n\t\t    isComplete = timer._count>=max;\r\n\r\n\t\tif(reInitTimer)\r\n\t\t{\r\n\t\t\ttimer.cancel();\r\n\t\t\ttimer.start();\r\n\t\t}\r\n\r\n\t\tif(isComplete)\r\n\t\t{\r\n\t\t\ttimer.stop();\r\n\t\t}\r\n\r\n\t\tif(index<max)\r\n\t\t{\r\n\t\t\ttimer._onNext(index);\r\n\t\t}\r\n\r\n\t\tif(isComplete)\r\n\t\t{\r\n\t\t\ttimer._onCompleted();\r\n\t\t}\r\n\t}\r\n\r\n}"]}