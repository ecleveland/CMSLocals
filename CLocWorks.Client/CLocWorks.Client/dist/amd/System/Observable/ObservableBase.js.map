{"version":3,"sources":["System/Observable/ObservableBase.js","System/Observable/ObservableBase.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","SubscribableBase_1","processAction","observers","handler","observersErrors","_i","observers_1","length","s","ex","push","observer","console","error","message","OBSERVER_ERROR_MESSAGE","errors","ObservableBase","_super","apply","arguments","_onNext","value","_getSubscribers","onNext","_onError","onError","_onCompleted","_unsubscribeAll","onCompleted","SubscribableBase","defineProperty"],"mappings":";;;;;;AAMA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,sBAAuB,SAAUC,EAASC,EAASC,GAC7E,YCiCJ,SAAAC,GACCC,EACAC,GAIA,IAAa,GAFTC,GAAmD,KAE1CC,EAAA,EAAAC,EAAAJ,EAAAG,EAAAC,EAAAC,OAAAF,IAAU,CAAnB,GAAIG,GAACF,EAAAD,EAER,KAECF,EAAQK,GAET,MAAMC,GAELL,EAAkBA,MAElBA,EAAgBM,MAAMC,SAAUH,EAAGC,GAAIA,KAMzC,GAFAP,EAAUK,OAAS,EAEhBH,GAAmBA,EAAgBG,OACtC,CACC,IAAGK,UAAWA,QAAQC,MAEjB,MACJC,QAASC,EACTC,OAAQZ,EAHRQ,SAAQC,MAAME,EAAwBX,IAxDzC,GAAAa,GAAA,SAAAC,GAAA,QAAAD,KACQC,EAAAC,MAAAhC,KAAAiC,WA0BR,MA1BQlC,WAAA+B,EAAAC,GAGGD,EAAAvB,UAAA2B,QAAV,SAAkBC,GAEjBrB,EACCd,KAAKoC,kBACL,SAAAf,GAAOA,EAAEgB,QAAUhB,EAAEgB,OAAOF,MAIpBL,EAAAvB,UAAA+B,SAAV,SAAmBZ,GAElBZ,EACCd,KAAKoC,kBACL,SAAAf,GAAOA,EAAEkB,SAAWlB,EAAEkB,QAAQb,MAItBI,EAAAvB,UAAAiC,aAAV,WAEC1B,EACCd,KAAKyC,iBAAgB,GACrB,SAAApB,GAAOA,EAAEqB,aAAerB,EAAEqB,iBAG7BZ,GA1BQjB,EAAA8B,iBADc/B,GAAAkB,eAAcA,CA6BpC,IAAMF,GAAgC,uEAoCtCpB,QAAAoC,eAAAhC,EAAA,cAAAuB,OAAA,IDxBIvB,EAAAA,WCwBWkB","file":"System/Observable/ObservableBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based upon .NET source.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"./SubscribableBase\"], function (require, exports, SubscribableBase_1) {\n    \"use strict\";\n    var ObservableBase = (function (_super) {\n        __extends(ObservableBase, _super);\n        function ObservableBase() {\n            _super.apply(this, arguments);\n        }\n        ObservableBase.prototype._onNext = function (value) {\n            processAction(this._getSubscribers(), function (s) { s.onNext && s.onNext(value); });\n        };\n        ObservableBase.prototype._onError = function (error) {\n            processAction(this._getSubscribers(), function (s) { s.onError && s.onError(error); });\n        };\n        ObservableBase.prototype._onCompleted = function () {\n            processAction(this._unsubscribeAll(true), function (s) { s.onCompleted && s.onCompleted(); });\n        };\n        return ObservableBase;\n    }(SubscribableBase_1.SubscribableBase));\n    exports.ObservableBase = ObservableBase;\n    var OBSERVER_ERROR_MESSAGE = 'One or more observers had errors when attempting to pass information.';\n    function processAction(observers, handler) {\n        var observersErrors = null;\n        for (var _i = 0, observers_1 = observers; _i < observers_1.length; _i++) {\n            var s = observers_1[_i];\n            try {\n                handler(s);\n            }\n            catch (ex) {\n                observersErrors = observersErrors || [];\n                observersErrors.push({ observer: s, ex: ex });\n            }\n        }\n        observers.length = 0;\n        if (observersErrors && observersErrors.length) {\n            if (console && console.error)\n                console.error(OBSERVER_ERROR_MESSAGE, observersErrors);\n            else\n                throw {\n                    message: OBSERVER_ERROR_MESSAGE,\n                    errors: observersErrors\n                };\n        }\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ObservableBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n\r\nimport {SubscribableBase} from \"./SubscribableBase\";\r\nimport {IObservable} from \"./IObservable\";\r\nimport {IObserver} from \"./IObserver\";\r\n\r\n// Can be used as a base class, mixin, or simply reference on how to implement the pattern.\r\n\r\nexport abstract class ObservableBase<T>\r\nextends SubscribableBase<IObserver<T>> implements IObservable<T>\r\n{\r\n\r\n\tprotected _onNext(value:T):void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._getSubscribers(),\r\n\t\t\ts => { s.onNext && s.onNext(value); }\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onError(error:Error):void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._getSubscribers(),\r\n\t\t\ts => { s.onError && s.onError(error); }\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onCompleted():void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._unsubscribeAll(true),\r\n\t\t\ts => { s.onCompleted && s.onCompleted(); }\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst OBSERVER_ERROR_MESSAGE:string = 'One or more observers had errors when attempting to pass information.';\r\n\r\nfunction processAction<T>(\r\n\tobservers:IObserver<T>[],\r\n\thandler:(s:IObserver<T>)=>void)\r\n{\r\n\tvar observersErrors:{observer:IObserver<T>,ex:any}[] = null;\r\n\r\n\tfor(let s of observers)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\thandler(s);\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\tobserversErrors = observersErrors || [];\r\n\t\t\t// Don't let one error prevent others from recieving information.\r\n\t\t\tobserversErrors.push({observer: s, ex: ex});\r\n\t\t}\r\n\t}\r\n\r\n\tobservers.length = 0;\r\n\r\n\tif(observersErrors && observersErrors.length)\r\n\t{\r\n\t\tif(console && console.error)\r\n\t\t\tconsole.error(OBSERVER_ERROR_MESSAGE, observersErrors);\r\n\t\telse throw {\r\n\t\t\tmessage: OBSERVER_ERROR_MESSAGE,\r\n\t\t\terrors: observersErrors\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\nexport default ObservableBase;"]}