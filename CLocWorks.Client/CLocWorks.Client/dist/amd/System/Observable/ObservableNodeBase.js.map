{"version":3,"sources":["System/Observable/ObservableNodeBase.js","System/Observable/ObservableNodeBase.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","ObservableBase_1","ObservableNodeBase","_super","apply","arguments","onNext","value","_onNext","onError","error","_onError","onCompleted","_onCompleted","defineProperty"],"mappings":";;;;;;AAMA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,oBAAqB,SAAUC,EAASC,EAASC,GAC3E,YCDJ,IAAAC,GAAA,SAAAC,GAAA,QAAAD,KACQC,EAAAC,MAAAhB,KAAAiB,WAkBR,MAlBQlB,WAAAe,EAAAC,GAIPD,EAAAP,UAAAW,OAAA,SAAOC,GAENnB,KAAKoB,QAAQD,IAGdL,EAAAP,UAAAc,QAAA,SAAQC,GAEPtB,KAAKuB,SAASD,IAGfR,EAAAP,UAAAiB,YAAA,WAECxB,KAAKyB,gBAEPX,GAlBQD,EAAAA,WADKD,GAAAE,mBAAkBA,EAqB/BN,OAAAkB,eAAAd,EAAA,cAAAO,OAAA,IDDIP,EAAAA,WCCWE","file":"System/Observable/ObservableNodeBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based upon .NET source.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"./ObservableBase\"], function (require, exports, ObservableBase_1) {\n    \"use strict\";\n    var ObservableNodeBase = (function (_super) {\n        __extends(ObservableNodeBase, _super);\n        function ObservableNodeBase() {\n            _super.apply(this, arguments);\n        }\n        ObservableNodeBase.prototype.onNext = function (value) {\n            this._onNext(value);\n        };\n        ObservableNodeBase.prototype.onError = function (error) {\n            this._onError(error);\n        };\n        ObservableNodeBase.prototype.onCompleted = function () {\n            this._onCompleted();\n        };\n        return ObservableNodeBase;\n    }(ObservableBase_1.default));\n    exports.ObservableNodeBase = ObservableNodeBase;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ObservableNodeBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n// Can be used as a base class, mixin, or simply reference on how to implement the pattern.\r\nimport ObservableBase from \"./ObservableBase\";\r\nimport {IObserver} from \"./IObserver\";\r\n\r\nexport class ObservableNodeBase<T>\r\nextends ObservableBase<T>\r\nimplements IObserver<T>\r\n{\r\n\r\n\tonNext(value:T):void\r\n\t{\r\n\t\tthis._onNext(value);\r\n\t}\r\n\r\n\tonError(error:Error):void\r\n\t{\r\n\t\tthis._onError(error);\r\n\t}\r\n\r\n\tonCompleted():void\r\n\t{\r\n\t\tthis._onCompleted();\r\n\t}\r\n}\r\n\r\nexport default ObservableNodeBase;"]}