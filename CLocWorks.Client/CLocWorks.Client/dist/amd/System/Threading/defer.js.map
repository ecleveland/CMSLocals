{"version":3,"sources":["System/Threading/defer.js","System/Threading/defer.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","defer","task","delay","payload","Defer","interval","count","Infinity","DeferInterval","DeferBase","dispose","cancel","_super","call","_id","setTimeout","handler","id","clearTimeout","_remaining","setInterval","clearInterval","defineProperty","value"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,WAAY,SAAUC,EAASC,GAC9C,YC2FJ,SAAAC,GACCC,EACAC,EACAC,GAEA,MAAO,IAAIC,GAAMH,EAAMC,EAAOC,GAG/B,QAAAE,GACCJ,EACAI,EACAC,GAEA,MAFA,UAAAA,IAAAA,EAAAC,EAAAA,GAEO,GAAIC,GAAcP,EAAMI,EAAUC,GA1G1C,GAAAG,GAAA,WAAA,QAAAA,MAWA,MAJCA,GAAAf,UAAAgB,QAAA,WAECvB,KAAKwB,UAEPF,KAEAL,EAAA,SAAAQ,GAIC,QAAAR,GAAYH,EAAeC,EAAeC,GAEzCS,EAAAC,KAAA1B,MACKe,EAAM,IAAIA,EAAQ,GACvBf,KAAK2B,IAAMC,WAAWX,EAAMY,QAASd,EAAOD,EAAMd,KAAMgB,GAsB1D,MA9BoBjB,WAAAkB,EAAAQ,GAWnBR,EAAAV,UAAAiB,OAAA,WAEC,GAAIM,GAAK9B,KAAK2B,GACd,OAAGG,IAEFC,aAAaD,GACb9B,KAAK2B,IAAM,MACJ,IAED,GAIOV,EAAAY,QAAf,SAAuBf,EAAeb,EAASe,GAE9Cf,EAAEuB,SACFV,EAAKE,IAGPC,GA9BoBK,GAgCpBD,EAAA,SAAAI,GAIC,QAAAJ,GACCP,EACAI,EACQc,GAGR,GAHA,SAAAA,IAAAA,EAAAZ,EAAAA,GAEAK,EAAAC,KAAA1B,MAFQA,KAAAgC,WAAAA,EAGM,OAAXd,GAA+B,SAAZA,EACrB,KAAM,oCACP,IAAY,EAATA,EACF,KAAM,gCAEPlB,MAAK2B,IAAMM,YAAYZ,EAAcQ,QAASX,EAAUJ,EAAMd,MAqBhE,MApC4BD,WAAAsB,EAAAI,GAkB3BJ,EAAAd,UAAAiB,OAAA,WAEC,GAAIM,GAAK9B,KAAK2B,GACd,OAAGG,IAEFI,cAAcJ,GACd9B,KAAK2B,IAAM,MACJ,IAED,GAGON,EAAAQ,QAAf,SAAuBf,EAAeb,KAE9BA,EAAE+B,YAAa/B,EAAEuB,SACxBV,KAGFO,GApC4BC,EAgDZV,GAAAC,MAAKA,EAQLD,EAAAM,SAAQA,EAQxBV,OAAA2B,eAAAvB,EAAA,cAAAwB,OAAA,IDrCIxB,EAAAA,WCqCWC","file":"System/Threading/defer.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    var DeferBase = (function () {\n        function DeferBase() {\n        }\n        DeferBase.prototype.dispose = function () {\n            this.cancel();\n        };\n        return DeferBase;\n    }());\n    var Defer = (function (_super) {\n        __extends(Defer, _super);\n        function Defer(task, delay, payload) {\n            _super.call(this);\n            if (!(delay > 0))\n                delay = 0;\n            this._id = setTimeout(Defer.handler, delay, task, this, payload);\n        }\n        Defer.prototype.cancel = function () {\n            var id = this._id;\n            if (id) {\n                clearTimeout(id);\n                this._id = null;\n                return true;\n            }\n            return false;\n        };\n        Defer.handler = function (task, d, payload) {\n            d.cancel();\n            task(payload);\n        };\n        return Defer;\n    }(DeferBase));\n    var DeferInterval = (function (_super) {\n        __extends(DeferInterval, _super);\n        function DeferInterval(task, interval, _remaining) {\n            if (_remaining === void 0) { _remaining = Infinity; }\n            _super.call(this);\n            this._remaining = _remaining;\n            if (interval === null || interval === void (0))\n                throw \"'interval' must be a valid number.\";\n            if (interval < 0)\n                throw \"'interval' cannot be negative.\";\n            this._id = setInterval(DeferInterval.handler, interval, task, this);\n        }\n        DeferInterval.prototype.cancel = function () {\n            var id = this._id;\n            if (id) {\n                clearInterval(id);\n                this._id = null;\n                return true;\n            }\n            return false;\n        };\n        DeferInterval.handler = function (task, d) {\n            if (!(--d._remaining))\n                d.cancel();\n            task();\n        };\n        return DeferInterval;\n    }(DeferBase));\n    function defer(task, delay, payload) {\n        return new Defer(task, delay, payload);\n    }\n    exports.defer = defer;\n    function interval(task, interval, count) {\n        if (count === void 0) { count = Infinity; }\n        return new DeferInterval(task, interval, count);\n    }\n    exports.interval = interval;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = defer;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {ICancellable} from \"./ICancellable\";\r\nimport {Closure, Func} from \"../FunctionTypes\";\r\nabstract class DeferBase implements ICancellable\r\n{\r\n\t// It may be a Timer in node, should not be restricted to number.\r\n\tprotected _id:any;\r\n\r\n\tabstract cancel():boolean;\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t}\r\n}\r\n\r\nclass Defer extends DeferBase\r\n{\r\n\r\n\r\n\tconstructor(task:Function, delay?:number, payload?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!(delay>0)) delay = 0; // covers undefined and null.\r\n\t\tthis._id = setTimeout(Defer.handler, delay, task, this, payload);\r\n\t}\r\n\r\n\tcancel():boolean\r\n\t{\r\n\t\tvar id = this._id;\r\n\t\tif(id)\r\n\t\t{\r\n\t\t\tclearTimeout(id);\r\n\t\t\tthis._id = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Use a static function here to avoid recreating a new function every time.\r\n\tprivate static handler(task:Function, d:Defer, payload?:any):void\r\n\t{\r\n\t\td.cancel();\r\n\t\ttask(payload);\r\n\t}\r\n\r\n}\r\n\r\nclass DeferInterval extends DeferBase\r\n{\r\n\r\n\r\n\tconstructor(\r\n\t\ttask:Function,\r\n\t\tinterval:number,\r\n\t\tprivate _remaining:number = Infinity)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(interval===null || interval=== void(0))\r\n\t\t\tthrow \"'interval' must be a valid number.\";\r\n\t\tif(interval<0)\r\n\t\t\tthrow \"'interval' cannot be negative.\";\r\n\r\n\t\tthis._id = setInterval(DeferInterval.handler, interval, task, this);\r\n\t}\r\n\r\n\tcancel():boolean\r\n\t{\r\n\t\tvar id = this._id;\r\n\t\tif(id)\r\n\t\t{\r\n\t\t\tclearInterval(id);\r\n\t\t\tthis._id = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate static handler(task:Function, d:DeferInterval):void\r\n\t{\r\n\t\tif(!(--d._remaining)) d.cancel();\r\n\t\ttask();\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport function defer(\r\n\ttask:Closure,\r\n\tdelay?:number):ICancellable;\r\n\r\nexport function defer<T>(\r\n\ttask:Func<T>,\r\n\tdelay?:number,\r\n\tpayload?:T):ICancellable\r\n\r\nexport function defer<T>(\r\n\ttask:Function,\r\n\tdelay?:number,\r\n\tpayload?:any):ICancellable\r\n{\r\n\treturn new Defer(task, delay, payload);\r\n}\r\n\r\nexport function interval(\r\n\ttask:Function,\r\n\tinterval:number,\r\n\tcount:number = Infinity):ICancellable\r\n{\r\n\treturn new DeferInterval(task, interval, count);\r\n}\r\n\r\nexport default defer;"]}