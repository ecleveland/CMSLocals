{"version":3,"sources":["System/Collections/Dictionaries/StringKeyDictionary.js","System/Collections/Dictionaries/StringKeyDictionary.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Compare_1","DictionaryBase_1","VOID0","StringKeyDictionary","_super","apply","arguments","_count","_map","_getEntry","key","containsKey","value","getValue","containsValue","map","equal","areEqual","_setValueInternal","_","old","importMap","values","handleUpdate","changed","setValue","toMap","selector","result","getKeys","keys","getValues","i","len","length","getCount","DictionaryBase","defineProperty"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,gBAAiB,oBAAqB,SAAUC,EAASC,EAASC,EAAWC,GACvG,YCAJ,IAAMC,GAAY,OAElBC,EAAA,SAAAC,GAAA,QAAAD,KACQC,EAAAC,MAAAlB,KAAAmB,WAGCnB,KAAAoB,OAAgB,EAChBpB,KAAAqB,QAwHT,MA5HQtB,WAAAiB,EAAAC,GAMGD,EAAAT,UAAAe,UAAV,SAAoBC,GAEnB,MAAQvB,MAAKwB,YAAYD,IAExBA,IAAKA,EACLE,MAAOzB,KAAK0B,SAASH,IAFnB,MAMJP,EAAAT,UAAAiB,YAAA,SAAYD,GAEX,MAAS,QAANA,GAAcA,IAAMR,GAAUf,KAAKoB,OAC/B,IAAUpB,MAAS,MAD2B,GAItDgB,EAAAT,UAAAoB,cAAA,SAAcF,GAEb,IAAIzB,KAAKoB,OAAQ,OAAO,CACxB,IAAIQ,GAAM5B,KAAKqB,KAAMQ,EAAmDhB,EAAAiB,QACxE,KAAI,GAAIP,KAAOK,GAEd,GAAGA,EAAItB,eAAeiB,IAAQM,EAAMD,EAAIL,GAAME,GAC7C,OAAO,CAET,QAAO,GAIRT,EAAAT,UAAAmB,SAAA,SAASH,GAER,MAAS,QAANA,GAAcA,IAAMR,GAAUf,KAAKoB,OAC/BpB,KAAKqB,KAAKE,GADoCR,GAI5CC,EAAAT,UAAAwB,kBAAV,SAA4BR,EAAYE,GAEvC,GAAIO,GAAIhC,KAAM4B,EAAMI,EAAEX,KAAMY,EAAML,EAAIL,EACtC,OAAGU,KAAMR,GAGLA,IAAQV,EAEP,IAAS,WAEJa,GAAIL,GACXS,EAAEZ,WAKCQ,EAAItB,eAAeiB,IACtBS,EAAEZ,SACHQ,EAAIL,GAAOE,IAGL,IAED,GAIRT,EAAAT,UAAA2B,UAAA,SAAUC,GAET,GAAIH,GAAIhC,IACR,OAAOgC,GAAEI,aACR,WAEC,GAAIC,IAAkB,CACtB,KAAI,GAAId,KAAOY,GAEXA,EAAO7B,eAAeiB,IAAQS,EAAEM,SAASf,EAAKY,EAAOZ,MACvDc,GAAU,EAEZ,OAAOA,MAKVrB,EAAAT,UAAAgC,MAAA,SAAMC,GAEL,GAAIR,GAAIhC,KAAMyC,IACd,IAAGT,EAAEZ,OAAQ,IAAI,GAAIG,KAAOS,GAAEX,KAE7B,GAAGW,EAAEX,KAAKf,eAAeiB,GACzB,CACC,GAAIE,GAAQO,EAAEX,KAAKE,EAChBiB,KACFf,EAAQe,EAASjB,EAAKE,IACpBA,IAAQV,IACV0B,EAAOlB,GAAOE,GAGjB,MAAOgB,IAGEzB,EAAAT,UAAAmC,QAAV,WAEC,MAAOlC,QAAOmC,KAAK3C,KAAKqB,OAGfL,EAAAT,UAAAqC,UAAV,WAEC,IAAI5C,KAAKoB,OAAQ,QAEjB,KAAI,GADAqB,GAAejC,OAAOmC,KAAK3C,KAAKqB,MAC5BwB,EAAI,EAAGC,EAAML,EAAOM,OAAUD,EAAFD,EAAOA,IAE1CJ,EAAOI,GAAK7C,KAAKqB,KAAKoB,EAAOI,GAG9B,OAAOJ,IAGEzB,EAAAT,UAAAyC,SAAV,WAEC,MAAOhD,MAAKoB,QAIdJ,GA5HQF,EAAAmC,eADKrC,GAAAI,oBAAmBA,EA+HhCR,OAAA0C,eAAAtC,EAAA,cAAAa,OAAA,ID/BIb,EAAAA,WC+BWI","file":"System/Collections/Dictionaries/StringKeyDictionary.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"../../Compare\", \"./DictionaryBase\"], function (require, exports, Compare_1, DictionaryBase_1) {\n    \"use strict\";\n    var VOID0 = void 0;\n    var StringKeyDictionary = (function (_super) {\n        __extends(StringKeyDictionary, _super);\n        function StringKeyDictionary() {\n            _super.apply(this, arguments);\n            this._count = 0;\n            this._map = {};\n        }\n        StringKeyDictionary.prototype._getEntry = function (key) {\n            return !this.containsKey(key)\n                ? null : {\n                key: key,\n                value: this.getValue(key)\n            };\n        };\n        StringKeyDictionary.prototype.containsKey = function (key) {\n            if (key === null || key === VOID0 || !this._count)\n                return false;\n            return (key) in (this._map);\n        };\n        StringKeyDictionary.prototype.containsValue = function (value) {\n            if (!this._count)\n                return false;\n            var map = this._map, equal = Compare_1.areEqual;\n            for (var key in map) {\n                if (map.hasOwnProperty(key) && equal(map[key], value))\n                    return true;\n            }\n            return false;\n        };\n        StringKeyDictionary.prototype.getValue = function (key) {\n            if (key === null || key === VOID0 || !this._count)\n                return VOID0;\n            return this._map[key];\n        };\n        StringKeyDictionary.prototype._setValueInternal = function (key, value) {\n            var _ = this, map = _._map, old = map[key];\n            if (old !== value) {\n                if (value === VOID0) {\n                    if ((key) in (map)) {\n                        delete map[key];\n                        _._count--;\n                    }\n                }\n                else {\n                    if (!map.hasOwnProperty(key))\n                        _._count++;\n                    map[key] = value;\n                }\n                return true;\n            }\n            return false;\n        };\n        StringKeyDictionary.prototype.importMap = function (values) {\n            var _ = this;\n            return _.handleUpdate(function () {\n                var changed = false;\n                for (var key in values) {\n                    if (values.hasOwnProperty(key) && _.setValue(key, values[key]))\n                        changed = true;\n                }\n                return changed;\n            });\n        };\n        StringKeyDictionary.prototype.toMap = function (selector) {\n            var _ = this, result = {};\n            if (_._count)\n                for (var key in _._map) {\n                    if (_._map.hasOwnProperty(key)) {\n                        var value = _._map[key];\n                        if (selector)\n                            value = selector(key, value);\n                        if (value !== VOID0)\n                            result[key] = value;\n                    }\n                }\n            return result;\n        };\n        StringKeyDictionary.prototype.getKeys = function () {\n            return Object.keys(this._map);\n        };\n        StringKeyDictionary.prototype.getValues = function () {\n            if (!this._count)\n                return [];\n            var result = Object.keys(this._map);\n            for (var i = 0, len = result.length; i < len; i++) {\n                result[i] = this._map[result[i]];\n            }\n            return result;\n        };\n        StringKeyDictionary.prototype.getCount = function () {\n            return this._count;\n        };\n        return StringKeyDictionary;\n    }(DictionaryBase_1.DictionaryBase));\n    exports.StringKeyDictionary = StringKeyDictionary;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = StringKeyDictionary;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual} from \"../../Compare\";\r\nimport {IStringKeyDictionary, IMap} from \"./IDictionary\";\r\nimport {IKeyValuePair} from \"../../KeyValuePair\";\r\nimport {DictionaryBase} from \"./DictionaryBase\";\r\n\r\nconst VOID0:any = void 0;\r\n\r\nexport class StringKeyDictionary<TValue>\r\nextends DictionaryBase<string, TValue> implements IStringKeyDictionary<TValue>\r\n{\r\n\r\n\tprivate _count:number = 0;\r\n\tprivate _map:IMap<TValue> = {};\r\n\r\n\tprotected _getEntry(key:string):IKeyValuePair<string,TValue>\r\n\t{\r\n\t\treturn !this.containsKey(key)\r\n\t\t\t? null : {\r\n\t\t\tkey: key,\r\n\t\t\tvalue: this.getValue(key)\r\n\t\t}\r\n\t}\r\n\r\n\tcontainsKey(key:string):boolean\r\n\t{\r\n\t\tif(key===null || key===VOID0 || !this._count) return false;\r\n\t\treturn (key) in (this._map);\r\n\t}\r\n\r\n\tcontainsValue(value:TValue):boolean\r\n\t{\r\n\t\tif(!this._count) return false;\r\n\t\tvar map = this._map, equal:(a:any, b:any, strict?:boolean) => boolean = areEqual;\r\n\t\tfor(let key in map)\r\n\t\t{\r\n\t\t\tif(map.hasOwnProperty(key) && equal(map[key], value))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tgetValue(key:string):TValue\r\n\t{\r\n\t\tif(key===null || key===VOID0 || !this._count) return VOID0;\r\n\t\treturn this._map[key];\r\n\t}\r\n\r\n\tprotected _setValueInternal(key:string, value:TValue):boolean\r\n\t{\r\n\t\tvar _ = this, map = _._map, old = map[key];\r\n\t\tif(old!==value)\r\n\t\t{\r\n\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tif((key) in (map))\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete map[key];\r\n\t\t\t\t\t_._count--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(!map.hasOwnProperty(key))\r\n\t\t\t\t\t_._count++;\r\n\t\t\t\tmap[key] = value;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Returns true if any value is updated...\r\n\timportMap(values:IMap<TValue>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn _.handleUpdate(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tvar changed:boolean = false;\r\n\t\t\t\tfor(let key in values)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(values.hasOwnProperty(key) && _.setValue(key, values[key]))\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn changed;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttoMap(selector?:(key:string, value:TValue) => TValue):IMap<TValue>\r\n\t{\r\n\t\tvar _ = this, result:IMap<TValue> = {};\r\n\t\tif(_._count) for(let key in _._map)\r\n\t\t{\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t{\r\n\t\t\t\tvar value = _._map[key];\r\n\t\t\t\tif(selector)\r\n\t\t\t\t\tvalue = selector(key, value);\r\n\t\t\t\tif(value!==VOID0)\r\n\t\t\t\t\tresult[key] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getKeys():string[]\r\n\t{\r\n\t\treturn Object.keys(this._map);\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tif(!this._count) return [];\r\n\t\tvar result:any[] = Object.keys(this._map);\r\n\t\tfor(let i = 0, len = result.length; i<len; i++)\r\n\t\t{\r\n\t\t\tresult[i] = this._map[result[i]];\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default StringKeyDictionary;\r\n"]}