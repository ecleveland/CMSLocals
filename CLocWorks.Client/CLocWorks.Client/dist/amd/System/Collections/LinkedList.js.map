{"version":3,"sources":["System/Collections/LinkedList.js","System/Collections/LinkedList.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Compare_1","LinkedNodeList_1","InvalidOperationException_1","ArgumentNullException_1","CollectionBase_1","ensureExternal","node","list","ArgumentNullException","external","LinkedListNode","getInternal","InvalidOperationException","n","_nodeInternal","InternalNode","value","previous","next","assertDetached","LinkedList","_super","source","equalityComparer","areEqual","call","_","_listInternal","LinkedNodeList","_importEntries","getCount","unsafeCount","_addInternal","entry","addNode","_removeInternal","max","Infinity","equals","_equalityComparer","removedCount","forEach","removeNode","_clearInternal","clear","action","useCopy","i","getEnumerator","valueEnumeratorFrom","_findFirst","first","_findLast","prev","last","removeOnce","remove","defineProperty","get","enumerable","configurable","getValueAt","index","getNodeAt","find","findLast","addFirst","addNodeBefore","_signalModification","addLast","add","removeFirst","removeLast","addBefore","before","addAfter","after","addNodeAfter","CollectionBase","_list","set","v"],"mappings":"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","file":"System/Collections/LinkedList.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based Upon: http://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"../Compare\", \"./LinkedNodeList\", \"../Exceptions/InvalidOperationException\", \"../Exceptions/ArgumentNullException\", \"./CollectionBase\"], function (require, exports, Compare_1, LinkedNodeList_1, InvalidOperationException_1, ArgumentNullException_1, CollectionBase_1) {\n    \"use strict\";\n    var InternalNode = (function () {\n        function InternalNode(value, previous, next) {\n            this.value = value;\n            this.previous = previous;\n            this.next = next;\n        }\n        InternalNode.prototype.assertDetached = function () {\n            if (this.next || this.previous)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Adding a node that is already placed.\");\n        };\n        return InternalNode;\n    }());\n    function ensureExternal(node, list) {\n        if (!node)\n            return null;\n        if (!list)\n            throw new ArgumentNullException_1.ArgumentNullException(\"list\");\n        var external = node.external;\n        if (!external)\n            node.external = external = new LinkedListNode(list, node);\n        return external;\n    }\n    function getInternal(node, list) {\n        if (!node)\n            throw new ArgumentNullException_1.ArgumentNullException(\"node\");\n        if (!list)\n            throw new ArgumentNullException_1.ArgumentNullException(\"list\");\n        if (node.list != list)\n            throw new InvalidOperationException_1.InvalidOperationException(\"Provided node does not belong to this list.\");\n        var n = node._nodeInternal;\n        if (!n)\n            throw new InvalidOperationException_1.InvalidOperationException(\"Provided node is not valid.\");\n        return n;\n    }\n    var LinkedList = (function (_super) {\n        __extends(LinkedList, _super);\n        function LinkedList(source, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n            _super.call(this, null, equalityComparer);\n            var _ = this;\n            _._listInternal = new LinkedNodeList_1.LinkedNodeList();\n            _._importEntries(source);\n        }\n        LinkedList.prototype.getCount = function () {\n            return this._listInternal.unsafeCount;\n        };\n        LinkedList.prototype._addInternal = function (entry) {\n            this._listInternal.addNode(new InternalNode(entry));\n            return true;\n        };\n        LinkedList.prototype._removeInternal = function (entry, max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this, equals = _._equalityComparer, list = _._listInternal, removedCount = 0;\n            list.forEach(function (node) {\n                if (equals(entry, node.value) && list.removeNode(node))\n                    removedCount++;\n                return removedCount < max;\n            });\n            return removedCount;\n        };\n        LinkedList.prototype._clearInternal = function () {\n            return this._listInternal.clear();\n        };\n        LinkedList.prototype.forEach = function (action, useCopy) {\n            if (useCopy === void 0) { useCopy = false; }\n            return useCopy\n                ? _super.prototype.forEach.call(this, action, useCopy)\n                : this._listInternal.forEach(function (node, i) { return action(node.value, i); });\n        };\n        LinkedList.prototype.getEnumerator = function () {\n            return LinkedNodeList_1.LinkedNodeList.valueEnumeratorFrom(this._listInternal);\n        };\n        LinkedList.prototype._findFirst = function (entry) {\n            var _ = this, equals = _._equalityComparer, next = _._listInternal.first;\n            while (next) {\n                if (equals(entry, next.value))\n                    return next;\n                next = next.next;\n            }\n            return null;\n        };\n        LinkedList.prototype._findLast = function (entry) {\n            var _ = this, equals = _._equalityComparer, prev = _._listInternal.last;\n            while (prev) {\n                if (equals(entry, prev.value))\n                    return prev;\n                prev = prev.previous;\n            }\n            return null;\n        };\n        LinkedList.prototype.removeOnce = function (entry) {\n            return this.remove(entry, 1) !== 0;\n        };\n        Object.defineProperty(LinkedList.prototype, \"first\", {\n            get: function () {\n                return ensureExternal(this._listInternal.first, this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedList.prototype, \"last\", {\n            get: function () {\n                return ensureExternal(this._listInternal.last, this);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        LinkedList.prototype.getValueAt = function (index) {\n            var node = this._listInternal.getNodeAt(index);\n            if (!node)\n                return node && node.value || void (0);\n        };\n        LinkedList.prototype.getNodeAt = function (index) {\n            return ensureExternal(this._listInternal.getNodeAt(index), this);\n        };\n        LinkedList.prototype.find = function (entry) {\n            return ensureExternal(this._findFirst(entry), this);\n        };\n        LinkedList.prototype.findLast = function (entry) {\n            return ensureExternal(this._findLast(entry), this);\n        };\n        LinkedList.prototype.addFirst = function (entry) {\n            this._listInternal.addNodeBefore(new InternalNode(entry));\n            this._signalModification(true);\n        };\n        LinkedList.prototype.addLast = function (entry) {\n            this.add(entry);\n        };\n        LinkedList.prototype.removeFirst = function () {\n            var _ = this, first = _._listInternal.first;\n            if (first && _._listInternal.removeNode(first))\n                _._signalModification(true);\n        };\n        LinkedList.prototype.removeLast = function () {\n            var _ = this, last = _._listInternal.last;\n            if (last && _._listInternal.removeNode(last))\n                _._signalModification(true);\n        };\n        LinkedList.prototype.removeNode = function (node) {\n            var _ = this;\n            if (_._listInternal.removeNode(getInternal(node, _))) {\n                _._signalModification(true);\n                return true;\n            }\n            return false;\n        };\n        LinkedList.prototype.addBefore = function (before, entry) {\n            var _ = this;\n            _._listInternal.addNodeBefore(new InternalNode(entry), getInternal(before, _));\n            _._signalModification(true);\n        };\n        LinkedList.prototype.addAfter = function (after, entry) {\n            var _ = this;\n            _._listInternal.addNodeAfter(new InternalNode(entry), getInternal(after, _));\n            _._signalModification(true);\n        };\n        LinkedList.prototype.addNodeBefore = function (node, before) {\n            var _ = this;\n            _._listInternal.addNodeBefore(getInternal(before, _), getInternal(node, _));\n            _._signalModification(true);\n        };\n        LinkedList.prototype.addNodeAfter = function (node, after) {\n            var _ = this;\n            this._listInternal.addNodeAfter(getInternal(after, _), getInternal(node, _));\n            _._signalModification(true);\n        };\n        return LinkedList;\n    }(CollectionBase_1.CollectionBase));\n    exports.LinkedList = LinkedList;\n    var LinkedListNode = (function () {\n        function LinkedListNode(_list, _nodeInternal) {\n            this._list = _list;\n            this._nodeInternal = _nodeInternal;\n        }\n        Object.defineProperty(LinkedListNode.prototype, \"list\", {\n            get: function () {\n                return this._list;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"previous\", {\n            get: function () {\n                return ensureExternal(this._nodeInternal.previous, this._list);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"next\", {\n            get: function () {\n                return ensureExternal(this._nodeInternal.next, this._list);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(LinkedListNode.prototype, \"value\", {\n            get: function () {\n                return this._nodeInternal.value;\n            },\n            set: function (v) {\n                this._nodeInternal.value = v;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        LinkedListNode.prototype.addBefore = function (entry) {\n            this._list.addBefore(this, entry);\n        };\n        LinkedListNode.prototype.addAfter = function (entry) {\n            this._list.addAfter(this, entry);\n        };\n        LinkedListNode.prototype.addNodeBefore = function (before) {\n            this._list.addNodeBefore(this, before);\n        };\n        LinkedListNode.prototype.addNodeAfter = function (after) {\n            this._list.addNodeAfter(this, after);\n        };\n        LinkedListNode.prototype.remove = function () {\n            this._list.removeNode(this);\n        };\n        return LinkedListNode;\n    }());\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = LinkedList;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport {LinkedNodeList} from \"./LinkedNodeList\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {ILinkedListNode, ILinkedNode, INodeWithValue} from \"./ILinkedListNode\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {Predicate, Action, EqualityComparison} from \"../FunctionTypes\";\r\nimport {ILinkedList} from \"./ILinkedList\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/simulating-a-queue\r\n *\r\n * Adding to an array is very fast, but modifying is slow.\r\n * LinkedList wins when modifying contents.\r\n * http://stackoverflow.com/questions/166884/array-versus-linked-list\r\n *****************************/\r\n\r\n/*\r\n * An internal node is used to manage the order without exposing underlying link chain to the consumer.\r\n */\r\nclass InternalNode<T>\r\nimplements ILinkedNode<InternalNode<T>>, INodeWithValue<T>\r\n{\r\n\tconstructor(\r\n\t\tpublic value?:T,\r\n\t\tpublic previous?:InternalNode<T>,\r\n\t\tpublic next?:InternalNode<T>)\r\n\t{\r\n\t}\r\n\r\n\texternal:ILinkedListNode<T>;\r\n\r\n\tassertDetached():void\r\n\t{\r\n\t\tif(this.next || this.previous)\r\n\t\t\tthrow new InvalidOperationException(\r\n\t\t\t\t\"Adding a node that is already placed.\");\r\n\t}\r\n\r\n}\r\n\r\nfunction ensureExternal<T>(node:InternalNode<T>, list:LinkedList<T>):ILinkedListNode<T>\r\n{\r\n\tif(!node)\r\n\t\treturn null;\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tvar external:ILinkedListNode<T> = node.external;\r\n\tif(!external)\r\n\t\tnode.external = external = new LinkedListNode<T>(list, node);\r\n\r\n\treturn external;\r\n}\r\n\r\nfunction getInternal<T>(node:ILinkedListNode<T>, list:LinkedList<T>):InternalNode<T>\r\n{\r\n\tif(!node)\r\n\t\tthrow new ArgumentNullException(\"node\");\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tif(node.list!=list)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node does not belong to this list.\");\r\n\r\n\tvar n:InternalNode<T> = (<any>node)._nodeInternal;\r\n\tif(!n)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node is not valid.\");\r\n\r\n\treturn n;\r\n}\r\n\r\nexport class LinkedList<T>\r\nextends CollectionBase<T> implements ILinkedList<T>\r\n{\r\n\tprivate _listInternal:LinkedNodeList<InternalNode<T>>;\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(null, equalityComparer);\r\n\t\tvar _ = this;\r\n\t\t_._listInternal = new LinkedNodeList<InternalNode<T>>();\r\n\t\t_._importEntries(source);\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._listInternal.unsafeCount;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\tthis._listInternal.addNode(new InternalNode(entry));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\tvar _            = this,\r\n\t\t    equals       = _._equalityComparer,\r\n\t\t    list         = _._listInternal,\r\n\t\t    removedCount = 0;\r\n\r\n\t\tlist.forEach(node=>\r\n\t\t{\r\n\t\t\tif(equals(entry, node.value) && list.removeNode(node))\r\n\t\t\t\tremovedCount++;\r\n\r\n\t\t\treturn removedCount<max;\r\n\t\t});\r\n\r\n\t\treturn removedCount;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\treturn this._listInternal.clear();\r\n\t}\r\n\r\n\r\n\tforEach(\r\n\t\taction:Predicate<T> | Action<T>,\r\n\t\tuseCopy:boolean = false):number\r\n\t{\r\n\t\treturn useCopy\r\n\t\t\t? super.forEach(action, useCopy)\r\n\t\t\t: this._listInternal.forEach((node, i)=>action(node.value, i));\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IEnumerable<T>\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\treturn LinkedNodeList.valueEnumeratorFrom<T>(<any>this._listInternal);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tprivate _findFirst(entry:T):InternalNode<T>\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tvar _      = this,\r\n\t\t    equals = _._equalityComparer,\r\n\t\t    next   = _._listInternal.first;\r\n\t\twhile(next)\r\n\t\t{\r\n\t\t\tif(equals(entry, next.value))\r\n\t\t\t\treturn next;\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate _findLast(entry:T):InternalNode<T>\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tvar _      = this,\r\n\t\t    equals = _._equalityComparer,\r\n\t\t    prev   = _._listInternal.last;\r\n\t\twhile(prev)\r\n\t\t{\r\n\t\t\tif(equals(entry, prev.value))\r\n\t\t\t\treturn prev;\r\n\t\t\tprev = prev.previous;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tremoveOnce(entry:T):boolean\r\n\t{\r\n\t\treturn this.remove(entry, 1)!==0;\r\n\t}\r\n\r\n\tget first():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._listInternal.first, this);\r\n\t}\r\n\r\n\tget last():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._listInternal.last, this);\r\n\t}\r\n\r\n\t// get methods are available for convenience but is an n*index operation.\r\n\r\n\r\n\tgetValueAt(index:number):T\r\n\t{\r\n\t\tvar node = this._listInternal.getNodeAt(index);\r\n\t\tif(!node)\r\n\t\t\treturn node && node.value || void(0);\r\n\t}\r\n\r\n\tgetNodeAt(index:number):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._listInternal.getNodeAt(index), this);\r\n\t}\r\n\r\n\tfind(entry:T):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._findFirst(entry), this);\r\n\t}\r\n\r\n\tfindLast(entry:T):ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._findLast(entry), this);\r\n\t}\r\n\r\n\taddFirst(entry:T):void\r\n\t{\r\n\t\tthis._listInternal.addNodeBefore(new InternalNode(entry));\r\n\t\tthis._signalModification(true);\r\n\t}\r\n\r\n\taddLast(entry:T):void\r\n\t{\r\n\t\tthis.add(entry);\r\n\t}\r\n\r\n\tremoveFirst():void\r\n\t{\r\n\t\tvar _ = this, first = _._listInternal.first;\r\n\t\tif(first && _._listInternal.removeNode(first))\r\n\t\t\t_._signalModification(true);\r\n\t}\r\n\r\n\tremoveLast():void\r\n\t{\r\n\t\tvar _ = this, last = _._listInternal.last;\r\n\t\tif(last && _._listInternal.removeNode(last))\r\n\t\t\t_._signalModification(true);\r\n\t}\r\n\r\n\t// Returns true if successful and false if not found (already removed).\r\n\tremoveNode(node:ILinkedListNode<T>):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\r\n\t\tif(_._listInternal.removeNode(getInternal(node, _)))\r\n\t\t{\r\n\t\t\t_._signalModification(true);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\taddBefore(before:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._listInternal.addNodeBefore(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(before, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddAfter(after:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._listInternal.addNodeAfter(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(after, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddNodeBefore(node:ILinkedListNode<T>, before:ILinkedListNode<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._listInternal.addNodeBefore(\r\n\t\t\tgetInternal(before, _),\r\n\t\t\tgetInternal(node, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddNodeAfter(node:ILinkedListNode<T>, after:ILinkedListNode<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tthis._listInternal.addNodeAfter(\r\n\t\t\tgetInternal(after, _),\r\n\t\t\tgetInternal(node, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\r\n}\r\n\r\n// Use an internal node class to prevent mucking up the LinkedList.\r\nclass LinkedListNode<T> implements ILinkedListNode<T>\r\n{\r\n\tconstructor(\r\n\t\tprivate _list:LinkedList<T>,\r\n\t\tprivate _nodeInternal:InternalNode<T>)\r\n\t{\r\n\t}\r\n\r\n\tget list():LinkedList<T>\r\n\t{\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\tget previous():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._nodeInternal.previous, this._list);\r\n\t}\r\n\r\n\tget next():ILinkedListNode<T>\r\n\t{\r\n\t\treturn ensureExternal(this._nodeInternal.next, this._list);\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this._nodeInternal.value;\r\n\t}\r\n\r\n\tset value(v:T)\r\n\t{\r\n\t\tthis._nodeInternal.value = v;\r\n\t}\r\n\r\n\taddBefore(entry:T):void\r\n\t{\r\n\t\tthis._list.addBefore(this, entry);\r\n\t}\r\n\r\n\taddAfter(entry:T):void\r\n\t{\r\n\t\tthis._list.addAfter(this, entry);\r\n\t}\r\n\r\n\taddNodeBefore(before:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._list.addNodeBefore(this, before);\r\n\t}\r\n\r\n\taddNodeAfter(after:ILinkedListNode<T>):void\r\n\t{\r\n\t\tthis._list.addNodeAfter(this, after);\r\n\t}\r\n\r\n\tremove():void\r\n\t{\r\n\t\tthis._list.removeNode(this);\r\n\t}\r\n\r\n}\r\n\r\nexport default LinkedList;\r\n"]}