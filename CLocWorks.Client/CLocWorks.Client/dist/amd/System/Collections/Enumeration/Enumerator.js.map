{"version":3,"sources":["System/Collections/Enumeration/Enumerator.js","System/Collections/Enumeration/Enumerator.ts"],"names":["define","require","exports","dispose_1","Types_1","ArrayEnumerator_1","IndexEnumerator_1","UnsupportedEnumerableException_1","InfiniteEnumerator_1","EmptyEnumerator_1","IteratorEnumerator_1","throwIfEndless","isEndless","UnsupportedEnumerableException","ENDLESS_EXCEPTION_MESSAGE","initArrayFrom","source","max","Infinity","Array","isArray","Type","isString","len","Math","min","length","isFinite","result","from","EmptyEnumerator","ArrayEnumerator","isArrayLike","IndexEnumerator","pointer","step","isPrimitive","isEnumerable","getEnumerator","isFunction","InfiniteEnumerator","isIterator","IteratorEnumerator","instance","hasMemberOfType","FUNCTION","isEnumerableOrArrayLike","isEnumerator","forEach","e","action","STRING_EMPTY","i","moveNext","current","using","f","r","next","done","value","toArray","slice","map","selector"],"mappings":"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","file":"System/Collections/Enumeration/Enumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"../../Disposable/dispose\", \"../../Types\", \"./ArrayEnumerator\", \"./IndexEnumerator\", \"./UnsupportedEnumerableException\", \"./InfiniteEnumerator\", \"./EmptyEnumerator\", \"./IteratorEnumerator\"], function (require, exports, dispose_1, Types_1, ArrayEnumerator_1, IndexEnumerator_1, UnsupportedEnumerableException_1, InfiniteEnumerator_1, EmptyEnumerator_1, IteratorEnumerator_1) {\n    \"use strict\";\n    var VOID0 = void (0), STRING_EMPTY = \"\", ENDLESS_EXCEPTION_MESSAGE = 'Cannot call forEach on an endless enumerable. ' +\n        'Would result in an infinite loop that could hang the current process.';\n    function throwIfEndless(isEndless) {\n        if (isEndless)\n            throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException(ENDLESS_EXCEPTION_MESSAGE);\n    }\n    exports.throwIfEndless = throwIfEndless;\n    function initArrayFrom(source, max) {\n        if (max === void 0) { max = Infinity; }\n        if (Array.isArray(source) || Types_1.Type.isString(source)) {\n            var len = Math.min(source.length, max);\n            if (isFinite(len)) {\n                if (len > 65535)\n                    return new Array(len);\n                var result = [];\n                result.length = len;\n                return result;\n            }\n        }\n        return [];\n    }\n    function from(source) {\n        if (!source)\n            return EmptyEnumerator_1.EmptyEnumerator;\n        if (Array.isArray(source))\n            return new ArrayEnumerator_1.ArrayEnumerator(source);\n        if (Types_1.Type.isArrayLike(source)) {\n            return new IndexEnumerator_1.IndexEnumerator(function () {\n                return {\n                    source: source,\n                    length: source.length,\n                    pointer: 0,\n                    step: 1\n                };\n            });\n        }\n        if (!Types_1.Type.isPrimitive(source)) {\n            if (isEnumerable(source))\n                return source.getEnumerator();\n            if (Types_1.Type.isFunction(source))\n                return new InfiniteEnumerator_1.InfiniteEnumerator(source);\n            if (isIterator(source))\n                return new IteratorEnumerator_1.IteratorEnumerator(source);\n        }\n        throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException();\n    }\n    exports.from = from;\n    function isEnumerable(instance) {\n        return Types_1.Type.hasMemberOfType(instance, \"getEnumerator\", Types_1.Type.FUNCTION);\n    }\n    exports.isEnumerable = isEnumerable;\n    function isEnumerableOrArrayLike(instance) {\n        return Types_1.Type.isArrayLike(instance) || isEnumerable(instance);\n    }\n    exports.isEnumerableOrArrayLike = isEnumerableOrArrayLike;\n    function isEnumerator(instance) {\n        return Types_1.Type.hasMemberOfType(instance, \"moveNext\", Types_1.Type.FUNCTION);\n    }\n    exports.isEnumerator = isEnumerator;\n    function isIterator(instance) {\n        return Types_1.Type.hasMemberOfType(instance, \"next\", Types_1.Type.FUNCTION);\n    }\n    exports.isIterator = isIterator;\n    function forEach(e, action, max) {\n        if (max === void 0) { max = Infinity; }\n        if (e === STRING_EMPTY)\n            return 0;\n        if (e && max > 0) {\n            if (Types_1.Type.isArrayLike(e)) {\n                throwIfEndless(!isFinite(max) && !isFinite(e.length));\n                var i = 0;\n                for (; i < Math.min(e.length, max); i++) {\n                    if (action(e[i], i) === false)\n                        break;\n                }\n                return i;\n            }\n            if (isEnumerator(e)) {\n                throwIfEndless(!isFinite(max) && e.isEndless);\n                var i = 0;\n                while (max > i && e.moveNext()) {\n                    if (action(e.current, i++) === false)\n                        break;\n                }\n                return i;\n            }\n            if (isEnumerable(e)) {\n                throwIfEndless(!isFinite(max) && e.isEndless);\n                return dispose_1.using(e.getEnumerator(), function (f) { return forEach(f, action, max); });\n            }\n            if (isIterator(e)) {\n                throwIfEndless(!isFinite(max));\n                var i = 0, r = void 0;\n                while (max > i && !(r = e.next()).done) {\n                    if (action(r.value, i++) === false)\n                        break;\n                }\n                return i;\n            }\n        }\n        return -1;\n    }\n    exports.forEach = forEach;\n    function toArray(source, max) {\n        if (max === void 0) { max = Infinity; }\n        if (source === STRING_EMPTY)\n            return [];\n        if (!isFinite(max) && Array.isArray(source))\n            return source.slice();\n        var result = initArrayFrom(source, max);\n        if (-1 === forEach(source, function (e, i) { result[i] = e; }, max))\n            throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException();\n        return result;\n    }\n    exports.toArray = toArray;\n    function map(source, selector, max) {\n        if (max === void 0) { max = Infinity; }\n        if (source === STRING_EMPTY)\n            return [];\n        if (!isFinite(max) && Array.isArray(source))\n            return source.map(selector);\n        var result = initArrayFrom(source, max);\n        if (-1 === forEach(source, function (e, i) { result[i] = selector(e); }, max))\n            throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException();\n        return result;\n    }\n    exports.map = map;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {using} from \"../../Disposable/dispose\";\r\nimport {Type} from \"../../Types\";\r\nimport {ArrayEnumerator} from \"./ArrayEnumerator\";\r\nimport {IndexEnumerator} from \"./IndexEnumerator\";\r\nimport {UnsupportedEnumerableException} from \"./UnsupportedEnumerableException\";\r\nimport {Selector} from \"../../FunctionTypes\";\r\nimport {IEnumerator} from \"./IEnumerator\";\r\nimport {IEnumerable} from \"./IEnumerable\";\r\nimport {IEnumerableOrArray} from \"../IEnumerableOrArray\";\r\nimport {InfiniteValueFactory, InfiniteEnumerator} from \"./InfiniteEnumerator\";\r\nimport {EmptyEnumerator as Empty} from \"./EmptyEnumerator\";\r\nimport {IIterator, IIteratorResult} from \"./IIterator\";\r\nimport {IteratorEnumerator} from \"./IteratorEnumerator\";\r\n\r\nconst\r\n\tVOID0:any                 = void(0),\r\n\tSTRING_EMPTY:string       = \"\",\r\n\tENDLESS_EXCEPTION_MESSAGE =\r\n\t\t'Cannot call forEach on an endless enumerable. ' +\r\n\t\t'Would result in an infinite loop that could hang the current process.';\r\n\r\nexport function throwIfEndless(isEndless:boolean):void\r\n{\r\n\tif(isEndless) throw new UnsupportedEnumerableException(ENDLESS_EXCEPTION_MESSAGE);\r\n}\r\n\r\nfunction initArrayFrom(\r\n\tsource:IEnumerableOrArray<any>|IEnumerator<any>,\r\n\tmax:number = Infinity):any[]\r\n{\r\n\tif(Array.isArray(source) || Type.isString(source))\r\n\t{\r\n\t\tvar len = Math.min(source.length, max);\r\n\t\tif(isFinite(len))\r\n\t\t{\r\n\t\t\tif(len>65535) return new Array(len);\r\n\t\t\tvar result:any[] = [];\r\n\t\t\tresult.length = len;\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\treturn [];\r\n}\r\n\r\n\r\n// Could be array, or IEnumerable...\r\nexport function from<T>(source:IEnumerableOrArray<T>|InfiniteValueFactory<T>|IIterator<T>):IEnumerator<T>\r\n{\r\n\t// To simplify and prevent null reference exceptions:\r\n\tif(!source)\r\n\t\treturn Empty;\r\n\r\n\tif(Array.isArray(source))\r\n\t\treturn new ArrayEnumerator<T>(<T[]>source);\r\n\r\n\tif(Type.isArrayLike<T>(source))\r\n\t{\r\n\t\treturn new IndexEnumerator<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tsource: source,\r\n\t\t\t\t\tlength: source.length,\r\n\t\t\t\t\tpointer: 0,\r\n\t\t\t\t\tstep: 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tif(!Type.isPrimitive(source))\r\n\t{\r\n\t\tif(isEnumerable<T>(source))\r\n\t\t\treturn source.getEnumerator();\r\n\r\n\t\tif(Type.isFunction(source))\r\n\t\t\treturn new InfiniteEnumerator(source);\r\n\r\n\t\tif(isIterator(source))\r\n\t\t\treturn new IteratorEnumerator(source);\r\n\r\n\t}\r\n\r\n\tthrow new UnsupportedEnumerableException();\r\n}\r\n\r\nexport function isEnumerable<T>(instance:any):instance is IEnumerable<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerable<T>>(instance, \"getEnumerator\", Type.FUNCTION);\r\n}\r\n\r\nexport function isEnumerableOrArrayLike<T>(instance:any):instance is IEnumerableOrArray<T>\r\n{\r\n\treturn Type.isArrayLike(instance) || isEnumerable(instance);\r\n}\r\n\r\nexport function isEnumerator<T>(instance:any):instance is IEnumerator<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerator<T>>(instance, \"moveNext\", Type.FUNCTION);\r\n}\r\n\r\nexport function isIterator<T>(instance:any):instance is IIterator<T>\r\n{\r\n\treturn Type.hasMemberOfType<IIterator<T>>(instance, \"next\", Type.FUNCTION);\r\n}\r\n\r\n/**\r\n * Flexible method for iterating any enumerable, enumerable, array, or array-like object.\r\n * @param e The enumeration to loop on.\r\n * @param action The action to take on each.\r\n * @param max Stops after max is reached.  Allows for forEach to be called on infinite enumerations.\r\n * @returns the total times iterated.  If the enumerable is unrecognized then -1.\r\n */\r\nexport function forEach<T>(\r\n\te:IEnumerableOrArray<T>|IEnumerator<T>|IIterator<T>,\r\n\taction:(element:T, index?:number) => any,\r\n\tmax:number = Infinity):number\r\n{\r\n\tif(<any>e===STRING_EMPTY) return 0;\r\n\r\n\tif(e && max>0)\r\n\t{\r\n\t\tif(Type.isArrayLike<T>(e))\r\n\t\t{\r\n\t\t\t// Assume e.length is constant or at least doesn't deviate to infinite or NaN.\r\n\t\t\tthrowIfEndless(!isFinite(max) && !isFinite(e.length));\r\n\t\t\tlet i = 0;\r\n\t\t\tfor(; i<Math.min(e.length, max); i++)\r\n\t\t\t{\r\n\t\t\t\tif(action(e[i], i)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn i;\r\n\t\t}\r\n\r\n\r\n\t\tif(isEnumerator<T>(e))\r\n\t\t{\r\n\t\t\tthrowIfEndless(!isFinite(max) && e.isEndless);\r\n\r\n\t\t\tlet i = 0;\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\twhile(max>i && e.moveNext())\r\n\t\t\t{\r\n\t\t\t\tif(action(e.current, i++)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn i;\r\n\t\t}\r\n\r\n\t\tif(isEnumerable<T>(e))\r\n\t\t{\r\n\t\t\tthrowIfEndless(!isFinite(max) && e.isEndless);\r\n\r\n\t\t\t// For enumerators that aren't EnumerableBase, ensure dispose is called.\r\n\t\t\treturn using(\r\n\t\t\t\t(<IEnumerable<T>>e).getEnumerator(),\r\n\t\t\t\tf=>forEach(f, action, max)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif(isIterator<T>(e)) {\r\n\t\t\t// For our purpose iterators are endless and a max must be specified before iterating.\r\n\t\t\tthrowIfEndless(!isFinite(max));\r\n\r\n\t\t\tlet i = 0, r:IIteratorResult<T>;\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\twhile(max>i && !(r = e.next()).done)\r\n\t\t\t{\r\n\t\t\t\tif(action(r.value, i++)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n\r\n}\r\n\r\n/**\r\n * Converts any enumerable to an array.\r\n * @param source\r\n * @param max Stops after max is reached.  Allows for forEach to be called on infinite enumerations.\r\n * @returns {any}\r\n */\r\nexport function toArray<T>(\r\n\tsource:IEnumerableOrArray<T>|IEnumerator<T>,\r\n\tmax:number = Infinity):T[]\r\n{\r\n\tif(<any>source===STRING_EMPTY) return [];\r\n\r\n\tif(!isFinite(max) && Array.isArray(source))\r\n\t\treturn source.slice();\r\n\r\n\tvar result:T[] = initArrayFrom(source, max);\r\n\tif(-1===forEach(source, (e, i) => { result[i] = e; }, max))\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Converts any enumerable to an array of selected values.\r\n * @param source\r\n * @param selector\r\n * @param max Stops after max is reached.  Allows for forEach to be called on infinite enumerations.\r\n * @returns {TResult[]}\r\n */\r\nexport function map<T,TResult>(\r\n\tsource:IEnumerableOrArray<T>|IEnumerator<T>,\r\n\tselector:Selector<T,TResult>,\r\n\tmax:number = Infinity):TResult[]\r\n{\r\n\tif(<any>source===STRING_EMPTY) return [];\r\n\r\n\tif(!isFinite(max) && Array.isArray(source))\r\n\t\treturn source.map(selector);\r\n\r\n\tvar result:TResult[] = initArrayFrom(source, max);\r\n\tif(-1===forEach(source, (e, i) => { result[i] = selector(e); }, max))\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\r\n\treturn result;\r\n}"]}