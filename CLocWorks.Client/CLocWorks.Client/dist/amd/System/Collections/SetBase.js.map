{"version":3,"sources":["System/Collections/SetBase.js","System/Collections/SetBase.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","LinkedNodeList_1","ArgumentNullException_1","Enumerator_1","EmptyEnumerator_1","dispose_1","Compare_1","CollectionBase_1","OTHER","SetBase","_super","source","call","areEqual","_importEntries","_getSet","s","_set","LinkedNodeList","getCount","unsafeCount","exceptWith","other","_","ArgumentNullException","forEach","v","_removeInternal","_incrementModified","_signalModification","intersectWith","n","contains","value","using","newUsing","o","isProperSubsetOf","_this","isProperSupersetOf","count","result","isSupersetOf","add","isSubsetOf","overlaps","setEquals","symmetricExceptWith","_addInternal","unionWith","importEntries","_clearInternal","clear","_onDispose","item","_getNode","getEnumerator","valueEnumeratorFrom","EmptyEnumerator","action","useCopy","node","i","_removeNode","remove","removeFirst","first","removeLast","last","CollectionBase","defineProperty"],"mappings":"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","file":"System/Collections/SetBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"./LinkedNodeList\", \"../Exceptions/ArgumentNullException\", \"./Enumeration/Enumerator\", \"./Enumeration/EmptyEnumerator\", \"../Disposable/dispose\", \"../Compare\", \"./CollectionBase\"], function (require, exports, LinkedNodeList_1, ArgumentNullException_1, Enumerator_1, EmptyEnumerator_1, dispose_1, Compare_1, CollectionBase_1) {\n    \"use strict\";\n    var OTHER = 'other';\n    var SetBase = (function (_super) {\n        __extends(SetBase, _super);\n        function SetBase(source) {\n            _super.call(this, null, Compare_1.areEqual);\n            this._importEntries(source);\n        }\n        SetBase.prototype._getSet = function () {\n            var s = this._set;\n            if (!s)\n                this._set = s = new LinkedNodeList_1.LinkedNodeList();\n            return s;\n        };\n        SetBase.prototype.getCount = function () {\n            return this._set ? this._set.unsafeCount : 0;\n        };\n        SetBase.prototype.exceptWith = function (other) {\n            var _ = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            Enumerator_1.forEach(other, function (v) {\n                if (_._removeInternal(v))\n                    _._incrementModified();\n            });\n            _._signalModification();\n        };\n        SetBase.prototype.intersectWith = function (other) {\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var _ = this;\n            if (other instanceof SetBase) {\n                var s = _._set;\n                if (s)\n                    s.forEach(function (n) {\n                        if (!other.contains(n.value) && _._removeInternal(n.value))\n                            _._incrementModified();\n                    });\n                _._signalModification();\n            }\n            else {\n                dispose_1.using(_.newUsing(other), function (o) { return _.intersectWith(o); });\n            }\n        };\n        SetBase.prototype.isProperSubsetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            return other instanceof SetBase\n                ? other.isProperSupersetOf(this)\n                : dispose_1.using(this.newUsing(other), function (o) { return o.isProperSupersetOf(_this); });\n        };\n        SetBase.prototype.isProperSupersetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var result = true, count;\n            if (other instanceof SetBase) {\n                result = this.isSupersetOf(other);\n                count = other.getCount();\n            }\n            else {\n                count = dispose_1.using(this.newUsing(), function (o) {\n                    Enumerator_1.forEach(other, function (v) {\n                        o.add(v);\n                        return result = _this.contains(v);\n                    });\n                    return o.getCount();\n                });\n            }\n            return result && this.getCount() > count;\n        };\n        SetBase.prototype.isSubsetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            return other instanceof SetBase\n                ? other.isSupersetOf(this)\n                : dispose_1.using(this.newUsing(other), function (o) { return o.isSupersetOf(_this); });\n        };\n        SetBase.prototype.isSupersetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var result = true;\n            Enumerator_1.forEach(other, function (v) {\n                return result = _this.contains(v);\n            });\n            return result;\n        };\n        SetBase.prototype.overlaps = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var result = false;\n            Enumerator_1.forEach(other, function (v) { return !(result = _this.contains(v)); });\n            return result;\n        };\n        SetBase.prototype.setEquals = function (other) {\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            return this.getCount() == (other instanceof SetBase\n                ? other.getCount()\n                : dispose_1.using(this.newUsing(other), function (o) { return o.getCount(); }))\n                && this.isSubsetOf(other);\n        };\n        SetBase.prototype.symmetricExceptWith = function (other) {\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var _ = this;\n            if (other instanceof SetBase) {\n                Enumerator_1.forEach(other, function (v) {\n                    if (_.contains(v)) {\n                        if (_._removeInternal(v))\n                            _._incrementModified();\n                    }\n                    else {\n                        if (_._addInternal(v))\n                            _._incrementModified();\n                    }\n                });\n                _._signalModification();\n            }\n            else {\n                dispose_1.using(this.newUsing(other), function (o) { return _.symmetricExceptWith(o); });\n            }\n        };\n        SetBase.prototype.unionWith = function (other) {\n            this.importEntries(other);\n        };\n        SetBase.prototype._clearInternal = function () {\n            var s = this._set;\n            return s ? s.clear() : 0;\n        };\n        SetBase.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._set = null;\n        };\n        SetBase.prototype.contains = function (item) {\n            return !(!this.getCount() || !this._getNode(item));\n        };\n        SetBase.prototype.getEnumerator = function () {\n            var s = this._set;\n            return s && this.getCount()\n                ? LinkedNodeList_1.LinkedNodeList.valueEnumeratorFrom(s)\n                : EmptyEnumerator_1.EmptyEnumerator;\n        };\n        SetBase.prototype.forEach = function (action, useCopy) {\n            if (useCopy === void 0) { useCopy = false; }\n            return useCopy\n                ? _super.prototype.forEach.call(this, action, useCopy)\n                : this._set.forEach(function (node, i) { return action(node.value, i); });\n        };\n        SetBase.prototype._removeNode = function (node) {\n            if (!node)\n                return false;\n            return this.remove(node.value) != 0;\n        };\n        SetBase.prototype.removeFirst = function () {\n            var s = this._set;\n            return this._removeNode(s && s.first);\n        };\n        SetBase.prototype.removeLast = function () {\n            var s = this._set;\n            return this._removeNode(s && s.last);\n        };\n        return SetBase;\n    }(CollectionBase_1.CollectionBase));\n    exports.SetBase = SetBase;\n    function wipe(map, depth) {\n        if (depth === void 0) { depth = 1; }\n        if (map && depth) {\n            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {\n                var key = _a[_i];\n                var v = map[key];\n                delete map[key];\n                wipe(v, depth - 1);\n            }\n        }\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = SetBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {LinkedNodeList} from \"./LinkedNodeList\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {EmptyEnumerator} from \"./Enumeration/EmptyEnumerator\";\r\nimport {using} from \"../Disposable/dispose\";\r\nimport {areEqual} from \"../Compare\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport {ILinkedNodeWithValue} from \"./ILinkedListNode\";\r\nimport {Predicate, Action} from \"../FunctionTypes\";\r\nimport {IMap} from \"./Dictionaries/IDictionary\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {ISet} from \"./ISet\";\r\n\r\nconst OTHER = 'other';\r\n\r\nexport abstract class SetBase<T>\r\nextends CollectionBase<T> implements ISet<T>, IDisposable\r\n{\r\n\r\n\tconstructor(source?:IEnumerableOrArray<T>)\r\n\t{\r\n\t\tsuper(null, areEqual);\r\n\t\tthis._importEntries(source);\r\n\t}\r\n\r\n\tprotected abstract newUsing(source?:IEnumerableOrArray<T>):SetBase<T>;\r\n\r\n\tprotected _set:LinkedNodeList<ILinkedNodeWithValue<T>>;\r\n\r\n\tprotected _getSet():LinkedNodeList<ILinkedNodeWithValue<T>>\r\n\t{\r\n\t\tvar s = this._set;\r\n\t\tif(!s) this._set = s = new LinkedNodeList<ILinkedNodeWithValue<T>>();\r\n\t\treturn s;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._set ? this._set.unsafeCount : 0;\r\n\t}\r\n\r\n\texceptWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tforEach(other, v=>\r\n\t\t{\r\n\t\t\tif(_._removeInternal(v))\r\n\t\t\t\t_._incrementModified();\r\n\t\t});\r\n\r\n\t\t_._signalModification();\r\n\t}\r\n\r\n\tintersectWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tvar _ = this;\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tlet s = _._set;\r\n\t\t\tif(s) s.forEach(n=>\r\n\t\t\t{\r\n\t\t\t\tif(!other.contains(n.value) && _._removeInternal(n.value))\r\n\t\t\t\t\t_._incrementModified();\r\n\t\t\t});\r\n\r\n\t\t\t_._signalModification();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusing(_.newUsing(other), o=>_.intersectWith(o));\r\n\t\t}\r\n\t}\r\n\r\n\tisProperSubsetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\treturn other instanceof SetBase\r\n\t\t\t? other.isProperSupersetOf(this)\r\n\t\t\t: using(this.newUsing(other), o=> o.isProperSupersetOf(this));\r\n\t}\r\n\r\n\tisProperSupersetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tvar result = true, count:number;\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tresult = this.isSupersetOf(other);\r\n\t\t\tcount = other.getCount();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tcount = using(this.newUsing(), o=>\r\n\t\t\t{\r\n\t\t\t\tforEach(other, v=>\r\n\t\t\t\t{\r\n\t\t\t\t\to.add(v); // We have to add to another set in order to filter out duplicates.\r\n\t\t\t\t\t// contains == false will cause this to exit.\r\n\t\t\t\t\treturn result = this.contains(v);\r\n\t\t\t\t});\r\n\t\t\t\treturn o.getCount();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn result && this.getCount()>count;\r\n\t}\r\n\r\n\tisSubsetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\treturn other instanceof SetBase\r\n\t\t\t? other.isSupersetOf(this)\r\n\t\t\t: using(this.newUsing(other), o=> o.isSupersetOf(this));\r\n\t}\r\n\r\n\tisSupersetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tvar result = true;\r\n\t\tforEach(other, v=>\r\n\t\t{\r\n\t\t\treturn result = this.contains(v);\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\toverlaps(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tvar result = false;\r\n\t\tforEach(other, v => !(result = this.contains(v)));\r\n\t\treturn result;\r\n\t}\r\n\r\n\tsetEquals(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\treturn this.getCount()==(\r\n\t\t\t\tother instanceof SetBase\r\n\t\t\t\t\t? other.getCount()\r\n\t\t\t\t\t: using(this.newUsing(other), o=> o.getCount()))\r\n\t\t\t&& this.isSubsetOf(other);\r\n\t}\r\n\r\n\tsymmetricExceptWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tvar _ = this;\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tforEach(other, v=>\r\n\t\t\t{\r\n\t\t\t\tif(_.contains(v))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_._removeInternal(v))\r\n\t\t\t\t\t\t_._incrementModified();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_._addInternal(v))\r\n\t\t\t\t\t\t_._incrementModified();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t_._signalModification();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusing(this.newUsing(other), o=>_.symmetricExceptWith(o));\r\n\t\t}\r\n\t}\r\n\r\n\tunionWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tthis.importEntries(other);\r\n\t}\r\n\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar s = this._set;\r\n\t\treturn s ? s.clear() : 0;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._set = null;\r\n\t}\r\n\r\n\tprotected abstract _getNode(item:T):ILinkedNodeWithValue<T>;\r\n\r\n\tcontains(item:T):boolean\r\n\t{\r\n\t\treturn !(!this.getCount() || !this._getNode(item));\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar s = this._set;\r\n\t\treturn s && this.getCount()\r\n\t\t\t? LinkedNodeList.valueEnumeratorFrom<T>(s)\r\n\t\t\t: EmptyEnumerator;\r\n\t}\r\n\r\n\tforEach(\r\n\t\taction:Predicate<T> | Action<T>,\r\n\t\tuseCopy:boolean = false):number\r\n\t{\r\n\t\treturn useCopy\r\n\t\t\t? super.forEach(action, useCopy)\r\n\t\t\t: this._set.forEach((node, i)=>action(node.value, i));\r\n\t}\r\n\r\n\tprotected _removeNode(node:ILinkedNodeWithValue<T>):boolean\r\n\t{\r\n\t\tif(!node) return false;\r\n\t\treturn this.remove(node.value)!=0;\r\n\t}\r\n\r\n\tremoveFirst():boolean\r\n\t{\r\n\t\tvar s = this._set;\r\n\t\treturn this._removeNode(s && s.first);\r\n\t}\r\n\r\n\tremoveLast():boolean\r\n\t{\r\n\t\tvar s = this._set;\r\n\t\treturn this._removeNode(s && s.last);\r\n\t}\r\n\r\n\r\n}\r\n\r\nfunction wipe(map:IMap<any>, depth:number = 1):void\r\n{\r\n\tif(map && depth)\r\n\t{\r\n\t\tfor(var key of Object.keys(map))\r\n\t\t{\r\n\t\t\tvar v = map[key];\r\n\t\t\tdelete map[key];\r\n\t\t\twipe(v, depth - 1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default SetBase;"]}