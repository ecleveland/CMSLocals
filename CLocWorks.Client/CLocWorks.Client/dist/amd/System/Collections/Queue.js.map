{"version":3,"sources":["System/Collections/Queue.js","System/Collections/Queue.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Compare_1","AU","Types_1","Integer_1","EnumeratorBase_1","NotImplementedException_1","InvalidOperationException_1","ArgumentOutOfRangeException_1","CollectionBase_1","assertZeroOrGreater","value","property","ArgumentOutOfRangeException","assertIntegerZeroOrGreater","Integer","assert","MINIMUM_GROW","SHRINK_THRESHOLD","GROW_FACTOR_HALF","DEFAULT_CAPACITY","emptyArray","Queue","_super","source","equalityComparer","areEqual","call","_","_head","_tail","_size","Type","isNumber","capacity","_array","initialize","se","isArrayLike","length","_importEntries","_capacity","getCount","_addInternal","item","array","size","len","newCapacity","setCapacity","tail","_removeInternal","max","NotImplementedException","_clearInternal","head","clear","trimExcess","_onDispose","dump","Infinity","result","isFinite","push","_dequeueInternal","_signalModification","forEach","action","_version","newArray","copyTo","enqueue","add","throwIfEmpty","removed","_incrementModified","InvalidOperationException","dequeue","assertModifiable","modified","v","tryDequeue","out","_getElement","index","peek","threshold","Math","floor","isNaN","getEnumerator","version","EnumeratorBase","yielder","assertVersion","yieldBreak","yieldReturn","CollectionBase","defineProperty"],"mappings":";;;;;AAKA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,aAAc,kBAAmB,WAAY,aAAc,+BAAgC,wCAAyC,0CAA2C,4CAA6C,oBAAqB,SAAUC,EAASC,EAASC,EAAWC,EAAIC,EAASC,EAAWC,EAAkBC,EAA2BC,EAA6BC,EAA+BC,GACnb,YCyTJ,SAAAC,GAA6BC,EAAcC,GAE1C,GAAS,EAAND,EACF,KAAM,IAAIH,GAAAK,4BAA4BD,EAAUD,EAAO,6BAIzD,QAAAG,GAAoCH,EAAcC,GAEjDR,EAAAW,QAAQC,OAAOL,EAAOC,GACtBF,EAAoBC,EAAOC,GA3T5B,GAAMK,GAAsB,EACtBC,EAA0B,GAE1BC,EAA0B,IAC1BC,EAA0BH,EAC5BI,KAEJC,EAAA,SAAAC,GAUC,QAAAD,GACCE,EACAC,GAAA,SAAAA,IAAAA,EAAAxB,EAAAyB,UAEAH,EAAAI,KAAAvC,KAAM,KAAMqC,EACZ,IAAIG,GAAIxC,IAKR,IAJAwC,EAAEC,MAAQ,EACVD,EAAEE,MAAQ,EACVF,EAAEG,MAAQ,EAENP,EAIH,GAAGrB,EAAA6B,KAAKC,SAAST,GACjB,CACC,GAAIU,GAAmBV,CACvBV,GAA2BoB,EAAU,YAErCN,EAAEO,OAASD,EACRhC,EAAGkC,WAAcF,GACjBb,MAGJ,CACC,GAAIgB,GAA6Bb,CACjCI,GAAEO,OAASjC,EAAGkC,WACbjC,EAAA6B,KAAKM,YAAYD,GACdA,EAAGE,OACHnB,GAGJQ,EAAEY,eAAeH,OArBlBT,GAAEO,OAASd,CAyBZO,GAAEa,UAAYb,EAAEO,OAAOI,OA0PzB,MAvSQpD,WAAAmC,EAAAC,GAgDGD,EAAA3B,UAAA+C,SAAV,WAEC,MAAOtD,MAAK2C,OAGHT,EAAA3B,UAAAgD,aAAV,SAAuBC,GAEtB,GAAIhB,GAAIxC,KAAMyD,EAAQjB,EAAEO,OAAQW,EAAOlB,EAAEG,MAAOgB,EAAMnB,EAAEa,SACxD,IAAGK,GAAMC,EACT,CACC,GAAIC,GAAcD,EAAI5B,CACP4B,GAAM9B,EAAlB+B,IACFA,EAAcD,EAAM9B,GAErBW,EAAEqB,YAAYD,GACdH,EAAQjB,EAAEO,OACVY,EAAMnB,EAAEa,UAGT,GAAIS,GAAOtB,EAAEE,KAIb,OAHAe,GAAMK,GAAQN,EACdhB,EAAEE,OAASoB,EAAO,GAAGH,EACrBnB,EAAEG,MAAQe,EAAO,GACV,GAGExB,EAAA3B,UAAAwD,gBAAV,SAA0BP,EAAQQ,GAEjC,KAAM,IAAI9C,GAAA+C,wBACT,oIAKQ/B,EAAA3B,UAAA2D,eAAV,WAEC,GAAI1B,GAAIxC,KAAMyD,EAAQjB,EAAEO,OAAQoB,EAAO3B,EAAEC,MAAOqB,EAAOtB,EAAEE,MAAOgB,EAAOlB,EAAEG,KAezE,OAdQmB,GAALK,EACFrD,EAAGsD,MAAMX,EAAOU,EAAML,IAGtBhD,EAAGsD,MAAMX,EAAOU,EAAMV,EAAMN,OAASgB,GACrCrD,EAAGsD,MAAMX,EAAO,EAAGK,IAGpBtB,EAAEC,MAAQ,EACVD,EAAEE,MAAQ,EACVF,EAAEG,MAAQ,EAEVH,EAAE6B,aAEKX,GAGExB,EAAA3B,UAAA+D,WAAV,WAECnC,EAAA5B,UAAM+D,WAAU/B,KAAAvC,KAChB,IAAIwC,GAAIxC,IACLwC,GAAEO,QAAQd,IAEZO,EAAEO,OAAOI,OAASX,EAAEa,UAAY,EAChCb,EAAEO,OAASd,IAQbC,EAAA3B,UAAAgE,KAAA,SAAKP,GAAA,SAAAA,IAAAA,EAAAQ,EAAAA,EAEJ,IAAIhC,GAAIxC,KAAMyE,IAEd,IAAGC,SAASV,IAGX,GADAhD,EAAAW,QAAQL,oBAAoB0C,GACnB,IAANA,EAEF,KAAMA,KAASxB,EAAEG,OAEhB8B,EAAOE,KAAKnC,EAAEoC,wBAMhB,MAAMpC,EAAEG,OAEP8B,EAAOE,KAAKnC,EAAEoC,mBAOhB,OAHApC,GAAE6B,aACF7B,EAAEqC,sBAEKJ,GAGRvC,EAAA3B,UAAAuE,QAAA,SAAQC,GAEP,MAAO5C,GAAA5B,UAAMuE,QAAOvC,KAAAvC,KAAC+E,GAAQ,IAG9B7C,EAAA3B,UAAAsD,YAAA,SAAYf,GAGXpB,EAA2BoB,EAAU,WAErC,IAAIN,GAAIxC,KAAMyD,EAAQjB,EAAEO,OAAQY,EAAMnB,EAAEa,SAExC,IAAGP,GAAUa,EAAb,CAGA,GAAIQ,GAAO3B,EAAEC,MAAOqB,EAAOtB,EAAEE,MAAOgB,EAAOlB,EAAEG,KAG7C,IAAGc,GAAOxB,GAAca,EAASa,GAAYG,EAALK,EAIvC,MAFAV,GAAMN,OAASX,EAAEa,UAAYP,MAC7BN,GAAEwC,UAKH,IAAIC,GAAenE,EAAGkC,WAAcF,EACjCY,GAAK,IAECI,EAALK,EAEFrD,EAAGoE,OAAOzB,EAAOwB,EAAUd,EAAM,EAAGT,IAIpC5C,EAAGoE,OAAOzB,EAAOwB,EAAUd,EAAM,EAAGR,EAAMQ,GAC1CrD,EAAGoE,OAAOzB,EAAOwB,EAAU,EAAGtB,EAAMQ,EAAML,KAI5CtB,EAAEO,OAASkC,EACXzC,EAAEa,UAAYP,EACdN,EAAEC,MAAQ,EACVD,EAAEE,MAASgB,GAAMZ,EAAY,EAAIY,EAEjClB,EAAEqC,qBAAoB,KAGvB3C,EAAA3B,UAAA4E,QAAA,SAAQ3B,GAEPxD,KAAKoF,IAAI5B,IAIAtB,EAAA3B,UAAAqE,iBAAV,SAA2BS,GAAA,SAAAA,IAAAA,GAAA,EAE1B,IAAI7C,GAAIxC,IACR,EAAA,GAAY,GAATwC,EAAEG,MAAL,CAOA,GAAIc,GAAQjB,EAAEO,OAAQoB,EAAO3B,EAAEC,MAE3B6C,EAAU9C,EAAEO,OAAOoB,EAQvB,OAPAV,GAAMU,GAAQ,KACd3B,EAAEC,OAAS0B,EAAO,GAAG3B,EAAEa,UAEvBb,EAAEG,QAEFH,EAAE+C,qBAEKD,EAfN,GAAGD,EACF,KAAM,IAAIlE,GAAAqE,0BAA0B,oCAiBvCtD,EAAA3B,UAAAkF,QAAA,SAAQJ,GAAA,SAAAA,IAAAA,GAAA,EAEP,IAAI7C,GAAIxC,IACRwC,GAAEkD,kBAGF,IAAIC,KAAanD,EAAEG,MACfiD,EAAI5F,KAAK4E,iBAAiBS,EAO9B,OAJGM,IAAYnD,EAAEG,MAAMH,EAAEa,UAAU,GAClCb,EAAE6B,WAAWvC,GAEdU,EAAEqC,sBACKe,GAIR1D,EAAA3B,UAAAsF,WAAA,SAAWC,GAEV,IAAI9F,KAAK2C,MAAO,OAAO,CACvB,IAAI1C,GAAID,KAAKyF,SAEb,OADGK,IAAKA,EAAI7F,IACL,GAGAiC,EAAA3B,UAAAwF,YAAR,SAAoBC,GAEnBtE,EAA2BsE,EAAO,QAElC,IAAIxD,GAAIxC,IACR,OAAOwC,GAAEO,QAAQP,EAAEC,MAAQuD,GAAOxD,EAAEa,YAGrCnB,EAAA3B,UAAA0F,KAAA,WAEC,GAAe,GAAZjG,KAAK2C,MACP,KAAM,IAAIxB,GAAAqE,0BAA0B,sCAErC,OAAOxF,MAAK+C,OAAO/C,KAAKyC,QAGzBP,EAAA3B,UAAA8D,WAAA,SAAW6B,GAEV,GAAI1D,GAAIxC,KACJ0D,EAAOlB,EAAEG,KACVe,GAAKyC,KAAKC,MAAkB,GAAZ5D,EAAEa,aAAmBgD,MAAMH,IAAwBxC,EAAVwC,IAC3D1D,EAAEqB,YAAYH,IAGhBxB,EAAA3B,UAAA+F,cAAA,WAEC,GACIN,GACAO,EAFA/D,EAAIxC,IAGR,OAAO,IAAIiB,GAAAuF,eACV,WAECD,EAAU/D,EAAEwC,SACZgB,EAAQ,GAET,SAACS,GAIA,MAFAjE,GAAEkE,cAAcH,GAEbP,GAAOxD,EAAEG,MACJ8D,EAAQE,aAETF,EAAQG,YAAYpE,EAAEuD,YAAYC,SAI7C9D,GAvSQb,EAAAwF,eADKjG,GAAAsB,MAAKA,EAuTlB1B,OAAAsG,eAAAlG,EAAA,cAAAW,OAAA,IDpHIX,EAAAA,WCoHWsB","file":"System/Collections/Queue.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based Upon: http://referencesource.microsoft.com/#System/CompMod/system/collections/generic/queue.cs\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"../Compare\", \"./Array/Utility\", \"../Types\", \"../Integer\", \"./Enumeration/EnumeratorBase\", \"../Exceptions/NotImplementedException\", \"../Exceptions/InvalidOperationException\", \"../Exceptions/ArgumentOutOfRangeException\", \"./CollectionBase\"], function (require, exports, Compare_1, AU, Types_1, Integer_1, EnumeratorBase_1, NotImplementedException_1, InvalidOperationException_1, ArgumentOutOfRangeException_1, CollectionBase_1) {\n    \"use strict\";\n    var MINIMUM_GROW = 4;\n    var SHRINK_THRESHOLD = 32;\n    var GROW_FACTOR_HALF = 100;\n    var DEFAULT_CAPACITY = MINIMUM_GROW;\n    var emptyArray = [];\n    var Queue = (function (_super) {\n        __extends(Queue, _super);\n        function Queue(source, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n            _super.call(this, null, equalityComparer);\n            var _ = this;\n            _._head = 0;\n            _._tail = 0;\n            _._size = 0;\n            if (!source)\n                _._array = emptyArray;\n            else {\n                if (Types_1.Type.isNumber(source)) {\n                    var capacity = source;\n                    assertIntegerZeroOrGreater(capacity, \"capacity\");\n                    _._array = capacity\n                        ? AU.initialize(capacity)\n                        : emptyArray;\n                }\n                else {\n                    var se = source;\n                    _._array = AU.initialize(Types_1.Type.isArrayLike(se)\n                        ? se.length\n                        : DEFAULT_CAPACITY);\n                    _._importEntries(se);\n                }\n            }\n            _._capacity = _._array.length;\n        }\n        Queue.prototype.getCount = function () {\n            return this._size;\n        };\n        Queue.prototype._addInternal = function (item) {\n            var _ = this, array = _._array, size = _._size, len = _._capacity;\n            if (size == len) {\n                var newCapacity = len * GROW_FACTOR_HALF;\n                if (newCapacity < len + MINIMUM_GROW)\n                    newCapacity = len + MINIMUM_GROW;\n                _.setCapacity(newCapacity);\n                array = _._array;\n                len = _._capacity;\n            }\n            var tail = _._tail;\n            array[tail] = item;\n            _._tail = (tail + 1) % len;\n            _._size = size + 1;\n            return true;\n        };\n        Queue.prototype._removeInternal = function (item, max) {\n            throw new NotImplementedException_1.NotImplementedException(\"ICollection\\<T\\>.remove is not implemented in Queue\\<T\\>\" +\n                \" since it would require destroying the underlying array to remove the item.\");\n        };\n        Queue.prototype._clearInternal = function () {\n            var _ = this, array = _._array, head = _._head, tail = _._tail, size = _._size;\n            if (head < tail)\n                AU.clear(array, head, tail);\n            else {\n                AU.clear(array, head, array.length - head);\n                AU.clear(array, 0, tail);\n            }\n            _._head = 0;\n            _._tail = 0;\n            _._size = 0;\n            _.trimExcess();\n            return size;\n        };\n        Queue.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            var _ = this;\n            if (_._array != emptyArray) {\n                _._array.length = _._capacity = 0;\n                _._array = emptyArray;\n            }\n        };\n        Queue.prototype.dump = function (max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this, result = [];\n            if (isFinite(max)) {\n                Integer_1.Integer.assertZeroOrGreater(max);\n                if (max !== 0) {\n                    while (max-- && _._size) {\n                        result.push(_._dequeueInternal());\n                    }\n                }\n            }\n            else {\n                while (_._size) {\n                    result.push(_._dequeueInternal());\n                }\n            }\n            _.trimExcess();\n            _._signalModification();\n            return result;\n        };\n        Queue.prototype.forEach = function (action) {\n            return _super.prototype.forEach.call(this, action, true);\n        };\n        Queue.prototype.setCapacity = function (capacity) {\n            assertIntegerZeroOrGreater(capacity, \"capacity\");\n            var _ = this, array = _._array, len = _._capacity;\n            if (capacity == len)\n                return;\n            var head = _._head, tail = _._tail, size = _._size;\n            if (array != emptyArray && capacity > len && head < tail) {\n                array.length = _._capacity = capacity;\n                _._version++;\n                return;\n            }\n            var newArray = AU.initialize(capacity);\n            if (size > 0) {\n                if (head < tail) {\n                    AU.copyTo(array, newArray, head, 0, size);\n                }\n                else {\n                    AU.copyTo(array, newArray, head, 0, len - head);\n                    AU.copyTo(array, newArray, 0, len - head, tail);\n                }\n            }\n            _._array = newArray;\n            _._capacity = capacity;\n            _._head = 0;\n            _._tail = (size == capacity) ? 0 : size;\n            _._signalModification(true);\n        };\n        Queue.prototype.enqueue = function (item) {\n            this.add(item);\n        };\n        Queue.prototype._dequeueInternal = function (throwIfEmpty) {\n            if (throwIfEmpty === void 0) { throwIfEmpty = false; }\n            var _ = this;\n            if (_._size == 0) {\n                if (throwIfEmpty)\n                    throw new InvalidOperationException_1.InvalidOperationException(\"Cannot dequeue an empty queue.\");\n                return void 0;\n            }\n            var array = _._array, head = _._head;\n            var removed = _._array[head];\n            array[head] = null;\n            _._head = (head + 1) % _._capacity;\n            _._size--;\n            _._incrementModified();\n            return removed;\n        };\n        Queue.prototype.dequeue = function (throwIfEmpty) {\n            if (throwIfEmpty === void 0) { throwIfEmpty = false; }\n            var _ = this;\n            _.assertModifiable();\n            var modified = !!_._size;\n            var v = this._dequeueInternal(throwIfEmpty);\n            if (modified && _._size < _._capacity / 2)\n                _.trimExcess(SHRINK_THRESHOLD);\n            _._signalModification();\n            return v;\n        };\n        Queue.prototype.tryDequeue = function (out) {\n            if (!this._size)\n                return false;\n            var d = this.dequeue();\n            if (out)\n                out(d);\n            return true;\n        };\n        Queue.prototype._getElement = function (index) {\n            assertIntegerZeroOrGreater(index, \"index\");\n            var _ = this;\n            return _._array[(_._head + index) % _._capacity];\n        };\n        Queue.prototype.peek = function () {\n            if (this._size == 0)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Cannot call peek on an empty queue.\");\n            return this._array[this._head];\n        };\n        Queue.prototype.trimExcess = function (threshold) {\n            var _ = this;\n            var size = _._size;\n            if (size < Math.floor(_._capacity * 0.9) && (isNaN(threshold) || threshold < size))\n                _.setCapacity(size);\n        };\n        Queue.prototype.getEnumerator = function () {\n            var _ = this;\n            var index;\n            var version;\n            return new EnumeratorBase_1.EnumeratorBase(function () {\n                version = _._version;\n                index = 0;\n            }, function (yielder) {\n                _.assertVersion(version);\n                if (index == _._size)\n                    return yielder.yieldBreak();\n                return yielder.yieldReturn(_._getElement(index++));\n            });\n        };\n        return Queue;\n    }(CollectionBase_1.CollectionBase));\n    exports.Queue = Queue;\n    function assertZeroOrGreater(value, property) {\n        if (value < 0)\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(property, value, \"Must be greater than zero\");\n    }\n    function assertIntegerZeroOrGreater(value, property) {\n        Integer_1.Integer.assert(value, property);\n        assertZeroOrGreater(value, property);\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Queue;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://referencesource.microsoft.com/#System/CompMod/system/collections/generic/queue.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport * as AU from \"./Array/Utility\";\r\nimport {Type} from \"../Types\";\r\nimport {Integer} from \"../Integer\";\r\nimport {EnumeratorBase} from \"./Enumeration/EnumeratorBase\";\r\nimport {NotImplementedException} from \"../Exceptions/NotImplementedException\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentOutOfRangeException} from \"../Exceptions/ArgumentOutOfRangeException\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {EqualityComparison, Predicate, Action} from \"../FunctionTypes\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\n\r\nconst MINIMUM_GROW:number = 4;\r\nconst SHRINK_THRESHOLD:number = 32; // Unused?\r\n// var GROW_FACTOR: number = 200;  // double each time\r\nconst GROW_FACTOR_HALF:number = 100;\r\nconst DEFAULT_CAPACITY:number = MINIMUM_GROW;\r\nvar emptyArray:any[] = [];\r\n\r\nexport class Queue<T>\r\nextends CollectionBase<T>\r\n{\r\n\r\n\tprivate _array:T[];\r\n\tprivate _head:number;       // First valid element in the queue\r\n\tprivate _tail:number;       // Last valid element in the queue\r\n\tprivate _size:number;       // Number of elements.\r\n\tprivate _capacity:number;   // Maps to _array.length;\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T> | number,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(null, equalityComparer);\r\n\t\tvar _ = this;\r\n\t\t_._head = 0;\r\n\t\t_._tail = 0;\r\n\t\t_._size = 0;\r\n\r\n\t\tif(!source)\r\n\t\t\t_._array = emptyArray;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(Type.isNumber(source))\r\n\t\t\t{\r\n\t\t\t\tvar capacity = <number>source;\r\n\t\t\t\tassertIntegerZeroOrGreater(capacity, \"capacity\");\r\n\r\n\t\t\t\t_._array = capacity\r\n\t\t\t\t\t? AU.initialize<T>(capacity)\r\n\t\t\t\t\t: emptyArray;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tvar se = <IEnumerableOrArray<T>> source;\r\n\t\t\t\t_._array = AU.initialize<T>(\r\n\t\t\t\t\tType.isArrayLike(se)\r\n\t\t\t\t\t\t? se.length\r\n\t\t\t\t\t\t: DEFAULT_CAPACITY\r\n\t\t\t\t);\r\n\r\n\t\t\t\t_._importEntries(se);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_._capacity = _._array.length;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._size;\r\n\t}\r\n\r\n\tprotected _addInternal(item:T):boolean\r\n\t{\r\n\t\tvar _ = this, array = _._array, size = _._size, len = _._capacity;\r\n\t\tif(size==len)\r\n\t\t{\r\n\t\t\tvar newCapacity = len*GROW_FACTOR_HALF;\r\n\t\t\tif(newCapacity<len + MINIMUM_GROW)\r\n\t\t\t\tnewCapacity = len + MINIMUM_GROW;\r\n\r\n\t\t\t_.setCapacity(newCapacity);\r\n\t\t\tarray = _._array;\r\n\t\t\tlen = _._capacity;\r\n\t\t}\r\n\r\n\t\tvar tail = _._tail;\r\n\t\tarray[tail] = item;\r\n\t\t_._tail = (tail + 1)%len;\r\n\t\t_._size = size + 1;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(item:T, max?:number):number\r\n\t{\r\n\t\tthrow new NotImplementedException(\r\n\t\t\t\"ICollection\\<T\\>.remove is not implemented in Queue\\<T\\>\" +\r\n\t\t\t\" since it would require destroying the underlying array to remove the item.\"\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar _ = this, array = _._array, head = _._head, tail = _._tail, size = _._size;\r\n\t\tif(head<tail)\r\n\t\t\tAU.clear(array, head, tail);\r\n\t\telse\r\n\t\t{\r\n\t\t\tAU.clear(array, head, array.length - head);\r\n\t\t\tAU.clear(array, 0, tail);\r\n\t\t}\r\n\r\n\t\t_._head = 0;\r\n\t\t_._tail = 0;\r\n\t\t_._size = 0;\r\n\r\n\t\t_.trimExcess();\r\n\r\n\t\treturn size;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tvar _ = this;\r\n\t\tif(_._array!=emptyArray)\r\n\t\t{\r\n\t\t\t_._array.length = _._capacity = 0;\r\n\t\t\t_._array = emptyArray;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Dequeues entries into an array.\r\n\t */\r\n\tdump(max:number = Infinity):T[]\r\n\t{\r\n\t\tvar _ = this, result:T[] = [];\r\n\r\n\t\tif(isFinite(max))\r\n\t\t{\r\n\t\t\tInteger.assertZeroOrGreater(max);\r\n\t\t\tif(max!==0)\r\n\t\t\t{\r\n\t\t\t\twhile(max-- && _._size)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.push(_._dequeueInternal());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\twhile(_._size)\r\n\t\t\t{\r\n\t\t\t\tresult.push(_._dequeueInternal());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_.trimExcess();\r\n\t\t_._signalModification();\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):number\r\n\t{\r\n\t\treturn super.forEach(action, true);\r\n\t}\r\n\r\n\tsetCapacity(capacity:number):void\r\n\t{\r\n\r\n\t\tassertIntegerZeroOrGreater(capacity, \"capacity\");\r\n\r\n\t\tvar _ = this, array = _._array, len = _._capacity;\r\n\r\n\t\tif(capacity==len)\r\n\t\t\treturn;\r\n\r\n\t\tvar head = _._head, tail = _._tail, size = _._size;\r\n\r\n\t\t// Special case where we can simply extend the length of the array. (JavaScript only)\r\n\t\tif(array!=emptyArray && capacity>len && head<tail)\r\n\t\t{\r\n\t\t\tarray.length = _._capacity = capacity;\r\n\t\t\t_._version++;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// We create a new array because modifying an existing one could be slow.\r\n\t\tvar newArray:T[] = AU.initialize<T>(capacity);\r\n\t\tif(size>0)\r\n\t\t{\r\n\t\t\tif(head<tail)\r\n\t\t\t{\r\n\t\t\t\tAU.copyTo(array, newArray, head, 0, size);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tAU.copyTo(array, newArray, head, 0, len - head);\r\n\t\t\t\tAU.copyTo(array, newArray, 0, len - head, tail);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_._array = newArray;\r\n\t\t_._capacity = capacity;\r\n\t\t_._head = 0;\r\n\t\t_._tail = (size==capacity) ? 0 : size;\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\tenqueue(item:T):void\r\n\t{\r\n\t\tthis.add(item);\r\n\t}\r\n\r\n\r\n\tprotected _dequeueInternal(throwIfEmpty:boolean = false):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._size==0)\r\n\t\t{\r\n\t\t\tif(throwIfEmpty)\r\n\t\t\t\tthrow new InvalidOperationException(\"Cannot dequeue an empty queue.\");\r\n\t\t\treturn void 0;\r\n\t\t}\r\n\r\n\t\tvar array = _._array, head = _._head;\r\n\r\n\t\tvar removed = _._array[head];\r\n\t\tarray[head] = null;\r\n\t\t_._head = (head + 1)%_._capacity;\r\n\r\n\t\t_._size--;\r\n\r\n\t\t_._incrementModified();\r\n\r\n\t\treturn removed;\r\n\t}\r\n\r\n\tdequeue(throwIfEmpty:boolean = false):T\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\r\n\t\t// A single dequeue shouldn't need update recursion tracking...\r\n\t\tvar modified = !!_._size;\r\n\t\tvar v = this._dequeueInternal(throwIfEmpty);\r\n\r\n\t\t// This may preemptively trigger the _onModified.\r\n\t\tif(modified && _._size<_._capacity/2)\r\n\t\t\t_.trimExcess(SHRINK_THRESHOLD);\r\n\r\n\t\t_._signalModification();\r\n\t\treturn v;\r\n\t}\r\n\r\n\r\n\ttryDequeue(out:(value:T)=>void):boolean\r\n\t{\r\n\t\tif(!this._size) return false;\r\n\t\tvar d = this.dequeue();\r\n\t\tif(out) out(d);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprivate _getElement(index:number):T\r\n\t{\r\n\t\tassertIntegerZeroOrGreater(index, \"index\");\r\n\r\n\t\tvar _ = this;\r\n\t\treturn _._array[(_._head + index)%_._capacity];\r\n\t}\r\n\r\n\tpeek():T\r\n\t{\r\n\t\tif(this._size==0)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot call peek on an empty queue.\");\r\n\r\n\t\treturn this._array[this._head];\r\n\t}\r\n\r\n\ttrimExcess(threshold?:number):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar size = _._size;\r\n\t\tif(size<Math.floor(_._capacity*0.9) && (isNaN(threshold) || threshold<size))\r\n\t\t\t_.setCapacity(size);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tvar index:number;\r\n\t\tvar version:number;\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tversion = _._version;\r\n\t\t\t\tindex = 0;\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\t_.assertVersion(version);\r\n\r\n\t\t\t\tif(index==_._size)\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\treturn yielder.yieldReturn(_._getElement(index++));\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction assertZeroOrGreater(value:number, property:string):void\r\n{\r\n\tif(value<0)\r\n\t\tthrow new ArgumentOutOfRangeException(property, value, \"Must be greater than zero\");\r\n\r\n}\r\n\r\nfunction assertIntegerZeroOrGreater(value:number, property:string):void\r\n{\r\n\tInteger.assert(value, property);\r\n\tassertZeroOrGreater(value, property);\r\n}\r\n\r\nexport default Queue;\r\n"]}