{"version":3,"sources":["System/Collections/CollectionBase.js","System/Collections/CollectionBase.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Enumerator_1","Compare_1","ArgumentNullException_1","InvalidOperationException_1","DisposableBase_1","Types_1","NAME","CMDC","CMRO","RESOLVE","LINQ_PATH","CollectionBase","_super","source","_equalityComparer","areEqual","call","_","_disposableObjectName","_importEntries","_updateRecursion","_modifiedCount","_version","defineProperty","get","getCount","enumerable","configurable","getIsReadOnly","assertModifiable","throwIfDisposed","InvalidOperationException","assertVersion","version","_onModified","_signalModification","increment","ex","console","error","_incrementModified","handleUpdate","closure","updated","add","entry","_addInternal","remove","max","Infinity","n","_removeInternal","clear","_clearInternal","_onDispose","l","_linq","dispose","entries","_this","added","Array","isArray","_i","entries_1","length","e","forEach","importEntries","contains","found","equals","action","useCopy","getEnumerator","a","toArray","copyTo","target","index","ArgumentNullException","count","newLength","moveNext","current","Type","hasMember","from","DisposableBase"],"mappings":"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","file":"System/Collections/CollectionBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"./Enumeration/Enumerator\", \"../Compare\", \"../Exceptions/ArgumentNullException\", \"../Exceptions/InvalidOperationException\", \"../Disposable/DisposableBase\", \"../Types\"], function (require, exports, Enumerator_1, Compare_1, ArgumentNullException_1, InvalidOperationException_1, DisposableBase_1, Types_1) {\n    \"use strict\";\n    var NAME = \"CollectionBase\", CMDC = \"Cannot modify a disposed collection.\", CMRO = \"Cannot modify a read-only collection.\", RESOLVE = \"resolve\", LINQ_PATH = \"../../System.Linq/Linq\";\n    var CollectionBase = (function (_super) {\n        __extends(CollectionBase, _super);\n        function CollectionBase(source, _equalityComparer) {\n            if (_equalityComparer === void 0) { _equalityComparer = Compare_1.areEqual; }\n            _super.call(this);\n            this._equalityComparer = _equalityComparer;\n            var _ = this;\n            _._disposableObjectName = NAME;\n            _._importEntries(source);\n            _._updateRecursion = 0;\n            _._modifiedCount = 0;\n            _._version = 0;\n        }\n        Object.defineProperty(CollectionBase.prototype, \"count\", {\n            get: function () {\n                return this.getCount();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CollectionBase.prototype.getIsReadOnly = function () {\n            return false;\n        };\n        Object.defineProperty(CollectionBase.prototype, \"isReadOnly\", {\n            get: function () {\n                return this.getIsReadOnly();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CollectionBase.prototype.assertModifiable = function () {\n            this.throwIfDisposed(CMDC);\n            if (this.getIsReadOnly())\n                throw new InvalidOperationException_1.InvalidOperationException(CMRO);\n        };\n        CollectionBase.prototype.assertVersion = function (version) {\n            if (version != this._version)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Collection was modified.\");\n        };\n        CollectionBase.prototype._onModified = function () { };\n        CollectionBase.prototype._signalModification = function (increment) {\n            var _ = this;\n            if (increment)\n                _._modifiedCount++;\n            if (_._modifiedCount && !this._updateRecursion) {\n                _._modifiedCount = 0;\n                _._version++;\n                try {\n                    _._onModified();\n                }\n                catch (ex) {\n                    console.error(ex);\n                }\n                return true;\n            }\n            return false;\n        };\n        CollectionBase.prototype._incrementModified = function () { this._modifiedCount++; };\n        Object.defineProperty(CollectionBase.prototype, \"isUpdating\", {\n            get: function () { return this._updateRecursion != 0; },\n            enumerable: true,\n            configurable: true\n        });\n        CollectionBase.prototype.handleUpdate = function (closure) {\n            if (!closure)\n                return false;\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var updated = false;\n            try {\n                if (updated = closure())\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return updated;\n        };\n        CollectionBase.prototype.add = function (entry) {\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            try {\n                if (_._addInternal(entry))\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n        };\n        CollectionBase.prototype.remove = function (entry, max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var n;\n            try {\n                if (n = _._removeInternal(entry, max))\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return n;\n        };\n        CollectionBase.prototype.clear = function () {\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var n;\n            try {\n                if (n = _._clearInternal())\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return n;\n        };\n        CollectionBase.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._clearInternal();\n            this._version = 0;\n            this._updateRecursion = 0;\n            this._modifiedCount = 0;\n            var l = this._linq;\n            this._linq = null;\n            if (l)\n                l.dispose();\n        };\n        CollectionBase.prototype._importEntries = function (entries) {\n            var _this = this;\n            var added = 0;\n            if (entries) {\n                if (Array.isArray(entries)) {\n                    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n                        var e = entries_1[_i];\n                        if (this._addInternal(e))\n                            added++;\n                    }\n                }\n                else {\n                    Enumerator_1.forEach(entries, function (e) {\n                        if (_this._addInternal(e))\n                            added++;\n                    });\n                }\n            }\n            return added;\n        };\n        CollectionBase.prototype.importEntries = function (entries) {\n            var _ = this;\n            _.assertModifiable();\n            _._updateRecursion++;\n            var n;\n            try {\n                if (n = _._importEntries(entries))\n                    _._modifiedCount++;\n            }\n            finally {\n                _._updateRecursion--;\n            }\n            _._signalModification();\n            return n;\n        };\n        CollectionBase.prototype.contains = function (entry) {\n            if (!this.getCount())\n                return false;\n            var found = false, equals = this._equalityComparer;\n            this.forEach(function (e) { return !(found = equals(entry, e)); });\n            return found;\n        };\n        CollectionBase.prototype.forEach = function (action, useCopy) {\n            if (useCopy) {\n                var a = this.toArray();\n                try {\n                    return Enumerator_1.forEach(a, action);\n                }\n                finally {\n                    a.length = 0;\n                }\n            }\n            else {\n                return Enumerator_1.forEach(this.getEnumerator(), action);\n            }\n        };\n        CollectionBase.prototype.copyTo = function (target, index) {\n            if (index === void 0) { index = 0; }\n            if (!target)\n                throw new ArgumentNullException_1.ArgumentNullException('target');\n            var count = this.getCount(), newLength = count + index;\n            if (target.length < newLength)\n                target.length = newLength;\n            var e = this.getEnumerator();\n            while (e.moveNext()) {\n                target[index++] = e.current;\n            }\n            return target;\n        };\n        CollectionBase.prototype.toArray = function () {\n            var count = this.getCount();\n            return this.copyTo(count > 65536 ? new Array(count) : []);\n        };\n        Object.defineProperty(CollectionBase.prototype, \"linq\", {\n            get: function () {\n                if (Types_1.Type.hasMember(require, RESOLVE) && require.length == 1) {\n                    var e = this._linq;\n                    if (!e)\n                        this._linq = e = require(LINQ_PATH).default.from(this);\n                    return e;\n                }\n                else {\n                    throw \".linq currently only supported within CommonJS.\\nImport System.Linq/Linq and use Enumerable.from(e) instead.\";\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return CollectionBase;\n    }(DisposableBase_1.DisposableBase));\n    exports.CollectionBase = CollectionBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {areEqual} from \"../Compare\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {ICollection} from \"./ICollection\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerateEach} from \"./Enumeration/IEnumerateEach\";\r\nimport {EqualityComparison, Predicate, Action} from \"../FunctionTypes\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {IArray} from \"./Array/IArray\";\r\nimport {Type} from \"../Types\";\r\nimport {ILinqEnumerable} from \"../../System.Linq/Enumerable\";\r\n\r\n//noinspection SpellCheckingInspection\r\nconst NAME      = \"CollectionBase\",\r\n      CMDC      = \"Cannot modify a disposed collection.\",\r\n      CMRO      = \"Cannot modify a read-only collection.\",\r\n      RESOLVE   = \"resolve\",\r\n      LINQ_PATH = \"../../System.Linq/Linq\";\r\n\r\nexport abstract class CollectionBase<T>\r\nextends DisposableBase implements ICollection<T>, IEnumerateEach<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tprotected _equalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper();\r\n\t\tvar _ = this;\r\n\t\t_._disposableObjectName = NAME;\r\n\t\t_._importEntries(source);\r\n\t\t_._updateRecursion = 0;\r\n\t\t_._modifiedCount = 0;\r\n\t\t_._version = 0;\r\n\t}\r\n\r\n\r\n\tprotected abstract getCount():number;\r\n\r\n\tget count():number\r\n\t{\r\n\t\treturn this.getCount();\r\n\t}\r\n\r\n\tprotected getIsReadOnly():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\tget isReadOnly():boolean\r\n\t{\r\n\t\treturn this.getIsReadOnly();\r\n\t}\r\n\r\n\tprotected assertModifiable():void\r\n\t{\r\n\t\tthis.throwIfDisposed(CMDC);\r\n\t\tif(this.getIsReadOnly())\r\n\t\t\tthrow new InvalidOperationException(CMRO);\r\n\t}\r\n\r\n\tprotected _version:number; // Provides an easy means of tracking changes and invalidating enumerables.\r\n\tassertVersion(version:number):void\r\n\t{\r\n\t\tif(version!=this._version)\r\n\t\t\tthrow new InvalidOperationException(\"Collection was modified.\");\r\n\t}\r\n\r\n\t/*\r\n\t * Note: Avoid changing modified count by any means but ++;\r\n\t * If setting modified count by the result of a closure it may be a negative number or NaN and ruin the pattern.\r\n\t */\r\n\tprivate _modifiedCount:number;\r\n\tprivate _updateRecursion:number;\r\n\r\n\tprotected _onModified():void {}\r\n\r\n\tprotected _signalModification(increment?:boolean):boolean\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(increment) _._modifiedCount++;\r\n\t\tif(_._modifiedCount && !this._updateRecursion)\r\n\t\t{\r\n\t\t\t_._modifiedCount = 0;\r\n\t\t\t_._version++;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_._onModified();\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\t// Avoid fatal errors which may have been caused by consumer.\r\n\t\t\t\tconsole.error(ex);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _incrementModified():void { this._modifiedCount++; }\r\n\r\n\tget isUpdating():boolean { return this._updateRecursion!=0; }\r\n\r\n\t/**\r\n\t * Takes a closure that if returning true will propagate an update signal.\r\n\t * Multiple update operations can be occurring at once or recursively and the onModified signal will only occur once they're done.\r\n\t * @param closure\r\n\t * @returns {boolean}\r\n\t */\r\n\thandleUpdate(closure?:() => boolean):boolean\r\n\t{\r\n\t\tif(!closure) return false;\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\t\tvar updated:boolean = false;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(updated = closure())\r\n\t\t\t\t_._modifiedCount++;\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\t_._updateRecursion--;\r\n\t\t}\r\n\r\n\t\t_._signalModification();\r\n\r\n\t\treturn updated;\r\n\t}\r\n\r\n\tprotected abstract _addInternal(entry:T):boolean;\r\n\r\n\t/*\r\n\t * Note: for a slight amount more code, we avoid creating functions/closures.\r\n\t * Calling handleUpdate is the correct pattern, but if possible avoid creating another function scope.\r\n\t */\r\n\r\n\tadd(entry:T):void\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\ttry\r\n\t\t{ if(_._addInternal(entry)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t}\r\n\r\n\tprotected abstract _removeInternal(entry:T, max?:number):number;\r\n\r\n\tremove(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tvar n:number;\r\n\t\ttry\r\n\t\t{ if(n = _._removeInternal(entry, max)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t\treturn n;\r\n\t}\r\n\r\n\tprotected abstract _clearInternal():number;\r\n\r\n\tclear():number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tvar n:number;\r\n\t\ttry\r\n\t\t{ if(n = _._clearInternal()) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\r\n\t\treturn n;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._clearInternal();\r\n\t\tthis._version = 0;\r\n\t\tthis._updateRecursion = 0;\r\n\t\tthis._modifiedCount = 0;\r\n\t\tvar l = this._linq;\r\n\t\tthis._linq = null;\r\n\t\tif(l) l.dispose();\r\n\t}\r\n\r\n\tprotected _importEntries(entries:IEnumerableOrArray<T>):number\r\n\t{\r\n\t\tvar added = 0;\r\n\t\tif(entries)\r\n\t\t{\r\n\t\t\tif(Array.isArray(entries))\r\n\t\t\t{\r\n\t\t\t\t// Optimize for avoiding a new closure.\r\n\t\t\t\tfor(let e of entries)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this._addInternal(e)) added++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tforEach(entries, e=>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this._addInternal(e)) added++;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn added;\r\n\t}\r\n\r\n\timportEntries(entries:IEnumerableOrArray<T>):number\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._updateRecursion++;\r\n\r\n\t\tvar n:number;\r\n\t\ttry\r\n\t\t{ if(n = _._importEntries(entries)) _._modifiedCount++; }\r\n\t\tfinally\r\n\t\t{ _._updateRecursion--; }\r\n\r\n\t\t_._signalModification();\r\n\t\treturn n;\r\n\t}\r\n\r\n\t// Fundamentally the most important part of the collection.\r\n\tabstract getEnumerator():IEnumerator<T>;\r\n\r\n\tcontains(entry:T):boolean\r\n\t{\r\n\t\tif(!this.getCount()) return false;\r\n\t\tvar found:boolean = false, equals = this._equalityComparer;\r\n\t\tthis.forEach(e => !(found = equals(entry, e)));\r\n\t\treturn found;\r\n\t}\r\n\r\n\tforEach(action:Predicate<T>|Action<T>, useCopy?:boolean):number\r\n\t{\r\n\t\tif(useCopy)\r\n\t\t{\r\n\t\t\tvar a = this.toArray();\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\treturn forEach(a, action);\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\ta.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn forEach(this.getEnumerator(), action);\r\n\t\t}\r\n\t}\r\n\r\n\tcopyTo<TTarget extends IArray<T>>(\r\n\t\ttarget:TTarget,\r\n\t\tindex:number = 0):TTarget\r\n\t{\r\n\t\tif(!target) throw new ArgumentNullException('target');\r\n\r\n\t\tvar count = this.getCount(), newLength = count + index;\r\n\t\tif(target.length<newLength) target.length = newLength;\r\n\r\n\t\tvar e = this.getEnumerator();\r\n\t\twhile(e.moveNext()) // Disposes when finished.\r\n\t\t{\r\n\t\t\ttarget[index++] = e.current;\r\n\t\t}\r\n\t\treturn target;\r\n\t}\r\n\r\n\ttoArray():T[]\r\n\t{\r\n\t\tvar count = this.getCount();\r\n\t\treturn this.copyTo(count>65536 ? new Array<T>(count) : []);\r\n\t}\r\n\r\n\tprivate _linq:ILinqEnumerable<T>;\r\n\tget linq():ILinqEnumerable<T>\r\n\t{\r\n\t\tif(Type.hasMember(require, RESOLVE) && require.length==1)\r\n\t\t{\r\n\t\t\tvar e = this._linq;\r\n\t\t\tif(!e) this._linq = e = require(LINQ_PATH).default.from(this);\r\n\t\t\treturn e;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow \".linq currently only supported within CommonJS.\\nImport System.Linq/Linq and use Enumerable.from(e) instead.\";\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\ndeclare var require:any;\r\n"]}