{"version":3,"sources":["System/Collections/Array/Compare.js","System/Collections/Array/Compare.ts"],"names":["define","require","exports","Values","Types_1","validateSize","a","b","len","length","areAllEqual","arrays","strict","equalityComparer","areEqual","Error","first","i","l","Type","isBoolean","sort","comparer","Array","areEquivalent","compare"],"mappings":";;;;AAIAA,QAAQ,UAAW,UAAW,gBAAiB,eAAgB,SAAUC,EAASC,EAASC,EAAQC,GAC/F,YCUJ,SAAAC,GAAsBC,EAAeC,GAGpC,GAAGD,GAAKC,GAAKD,IAAIC,IAAMD,IAAMC,EAC5B,OAAO,CAGR,KAAID,IAAMC,EACT,OAAO,CAER,IAAIC,GAAMF,EAAEG,MACZ,OAAGD,KAAMD,EAAEE,QACH,EAGC,IAAND,GACK,EAGDA,EAGR,QAAAE,GACCC,EACAC,EACAC,GAEA,GAFA,SAAAA,IAAAA,EAA2CV,EAAOW,WAE9CH,EACH,KAAM,IAAII,OAAM,kDACjB,IAAGJ,EAAOF,OAAO,EAChB,KAAM,IAAIM,OAAM,8CAEjB,KAAI,GADAC,GAAQL,EAAO,GACXM,EAAI,EAAGC,EAAIP,EAAOF,OAAUS,EAAFD,EAAKA,IAEtC,IAAIH,EAASE,EAAOL,EAAOM,GAAIL,EAAQC,GACtC,OAAO,CAET,QAAO,EAGR,QAAAC,GACCR,EAAaC,EACbK,EACAC,GAAA,SAAAA,IAAAA,EAAyCV,EAAOW,SAEhD,IAAIN,GAAMH,EAAaC,EAAGC,EAC1B,IAAGH,EAAAe,KAAKC,UAAUZ,GAAM,MAAgBA,EAExC,KAAI,GAAIS,GAAI,EAAKT,EAAFS,EAAOA,IAErB,IAAIJ,EAAiBP,EAAEW,GAAIV,EAAEU,GAAIL,GAChC,OAAO,CAGT,QAAO,EAIR,QAAAS,GAAiBf,EAAagB,GAE7B,IAAIhB,GAAKA,EAAEG,OAAO,EAAG,MAAOH,EAE5B,IAAoBC,GAAhBC,EAAMF,EAAEG,MACTD,GAAI,MACND,EAAI,GAAIgB,OAAMf,IAGdD,KACAA,EAAEE,OAASD,EAEZ,KAAI,GAAIS,GAAI,EAAKT,EAAFS,EAAOA,IAErBV,EAAEU,GAAKX,EAAEW,EAIV,OADAV,GAAEc,KAAKC,GACAf,EAMR,QAAAiB,GACClB,EAAaC,EACbe,GAAA,SAAAA,IAAAA,EAAyBnB,EAAOsB,QAEhC,IAAIjB,GAAMH,EAAaC,EAAGC,EAC1B,IAAGH,EAAAe,KAAKC,UAAUZ,GAAM,MAAgBA,EAIxCF,GAAIe,EAAKf,EAAGgB,GACZf,EAAIc,EAAKd,EAAGe,EAEZ,KAAI,GAAIL,GAAI,EAAKT,EAAFS,EAAOA,IAErB,GAA0B,IAAvBK,EAAShB,EAAEW,GAAIV,EAAEU,IACnB,OAAO,CAGT,QAAO,EA9EQf,EAAAQ,YAAWA,EAkBXR,EAAAY,SAAQA,EA0CRZ,EAAAsB,cAAaA","file":"System/Collections/Array/Compare.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"../../Compare\", \"../../Types\"], function (require, exports, Values, Types_1) {\n    \"use strict\";\n    function validateSize(a, b) {\n        if (a && b && a === b || !a && !b)\n            return true;\n        if (!a || !b)\n            return false;\n        var len = a.length;\n        if (len !== b.length)\n            return false;\n        if (len === 0)\n            return true;\n        return len;\n    }\n    function areAllEqual(arrays, strict, equalityComparer) {\n        if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\n        if (!arrays)\n            throw new Error(\"ArgumentNullException: 'arrays' cannot be null.\");\n        if (arrays.length < 2)\n            throw new Error(\"Cannot compare a set of arrays less than 2.\");\n        var first = arrays[0];\n        for (var i = 0, l = arrays.length; i < l; i++) {\n            if (!areEqual(first, arrays[i], strict, equalityComparer))\n                return false;\n        }\n        return true;\n    }\n    exports.areAllEqual = areAllEqual;\n    function areEqual(a, b, strict, equalityComparer) {\n        if (equalityComparer === void 0) { equalityComparer = Values.areEqual; }\n        var len = validateSize(a, b);\n        if (Types_1.Type.isBoolean(len))\n            return len;\n        for (var i = 0; i < len; i++) {\n            if (!equalityComparer(a[i], b[i], strict))\n                return false;\n        }\n        return true;\n    }\n    exports.areEqual = areEqual;\n    function sort(a, comparer) {\n        if (!a || a.length < 2)\n            return a;\n        var len = a.length, b;\n        if (len > 65536)\n            b = new Array(len);\n        else {\n            b = [];\n            b.length = len;\n        }\n        for (var i = 0; i < len; i++) {\n            b[i] = a[i];\n        }\n        b.sort(comparer);\n        return b;\n    }\n    function areEquivalent(a, b, comparer) {\n        if (comparer === void 0) { comparer = Values.compare; }\n        var len = validateSize(a, b);\n        if (Types_1.Type.isBoolean(len))\n            return len;\n        a = sort(a, comparer);\n        b = sort(b, comparer);\n        for (var i = 0; i < len; i++) {\n            if (comparer(a[i], b[i]) !== 0)\n                return false;\n        }\n        return true;\n    }\n    exports.areEquivalent = areEquivalent;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport * as Values from \"../../Compare\";\r\nimport {Type} from \"../../Types\";\r\nimport {Primitive} from \"../../Primitive\";\r\nimport {EqualityComparison, Comparison} from \"../../FunctionTypes\";\r\nimport {IArray} from \"./IArray\";\r\nimport {IComparable} from \"../../IComparable\";\r\n\r\n/*  validateSize: Utility for quick validation/invalidation of array equality.\r\n\tWhy this way?  Why not pass a closure for the last return?\r\n\tReason: Performance and avoiding the creation of new functions/closures. */\r\nfunction validateSize(a:IArray<any>, b:IArray<any>):any\r\n{\r\n\t// Both valid and are same object, or both are null/undefined.\r\n\tif(a && b && a===b || !a && !b)\r\n\t\treturn true;\r\n\r\n\t// At this point, at least one has to be non-null.\r\n\tif(!a || !b)\r\n\t\treturn false;\r\n\r\n\tvar len = a.length;\r\n\tif(len!==b.length)\r\n\t\treturn false;\r\n\r\n\t// If both are arrays and have zero length, they are equal.\r\n\tif(len===0)\r\n\t\treturn true;\r\n\r\n\t// Return the length for downstream processing.\r\n\treturn len;\r\n}\r\n\r\nexport function areAllEqual(\r\n\tarrays:any[][],\r\n\tstrict?:boolean,\r\n\tequalityComparer:EqualityComparison<any> = Values.areEqual):boolean\r\n{\r\n\tif(!arrays)\r\n\t\tthrow new Error(\"ArgumentNullException: 'arrays' cannot be null.\");\r\n\tif(arrays.length<2)\r\n\t\tthrow new Error(\"Cannot compare a set of arrays less than 2.\");\r\n\tvar first = arrays[0];\r\n\tfor(let i = 0, l = arrays.length; i<l; i++)\r\n\t{\r\n\t\tif(!areEqual(first, arrays[i], strict, equalityComparer))\r\n\t\t\treturn false;\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nexport function areEqual<T>(\r\n\ta:IArray<T>, b:IArray<T>,\r\n\tstrict?:boolean,\r\n\tequalityComparer:EqualityComparison<T> = Values.areEqual):boolean\r\n{\r\n\tvar len = validateSize(a, b);\r\n\tif(Type.isBoolean(len)) return <boolean>len;\r\n\r\n\tfor(let i = 0; i<len; i++)\r\n\t{\r\n\t\tif(!equalityComparer(a[i], b[i], strict))\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n\r\nfunction sort<T>(a:IArray<T>, comparer:Comparison<T>):IArray<T>\r\n{\r\n\tif(!a || a.length<2) return a;\r\n\r\n\tvar len = a.length, b:T[];\r\n\tif(len>65536)\r\n\t\tb = new Array(len);\r\n\telse\r\n\t{\r\n\t\tb = [];\r\n\t\tb.length = len;\r\n\t}\r\n\tfor(let i = 0; i<len; i++)\r\n\t{\r\n\t\tb[i] = a[i];\r\n\t}\r\n\r\n\tb.sort(comparer);\r\n\treturn b;\r\n}\r\n\r\nexport function areEquivalent<T extends Primitive>(a:IArray<T>, b:IArray<T>):boolean;\r\nexport function areEquivalent<T>(a:IArray<IComparable<T>>, b:IArray<IComparable<T>>):boolean;\r\nexport function areEquivalent<T>(a:IArray<T>, b:IArray<T>, comparer:Comparison<T>):boolean;\r\nexport function areEquivalent<T>(\r\n\ta:IArray<T>, b:IArray<T>,\r\n\tcomparer:Comparison<T> = Values.compare):boolean\r\n{\r\n\tvar len = validateSize(a, b);\r\n\tif(Type.isBoolean(len)) return <boolean>len;\r\n\r\n\t// There might be a better more performant way to do this, but for the moment, this\r\n\t// works quite well.\r\n\ta = sort(a, comparer);\r\n\tb = sort(b, comparer);\r\n\r\n\tfor(let i = 0; i<len; i++)\r\n\t{\r\n\t\tif(comparer(a[i], b[i])!==0)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n"]}