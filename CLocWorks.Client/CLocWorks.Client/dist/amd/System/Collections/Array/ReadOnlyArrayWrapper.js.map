{"version":3,"sources":["System/Collections/Array/ReadOnlyArrayWrapper.js","System/Collections/Array/ReadOnlyArrayWrapper.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","ArgumentNullException_1","ReadOnlyCollectionBase_1","Enumerator_1","ReadOnlyArrayWrapper","_super","array","call","ArgumentNullException","_","_getCount","length","getEnumerator","from","getValueAt","i","ReadOnlyCollectionBase","defineProperty","value"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,yCAA0C,4BAA6B,6BAA8B,SAAUC,EAASC,EAASC,EAAyBC,EAA0BC,GAC9M,YCAJ,IAAAC,GAAA,SAAAC,GAGC,QAAAD,GAAYE,GAGX,GADAD,EAAAE,KAAAnB,OACIkB,EACH,KAAM,IAAIL,GAAAO,sBAAsB,QAEjC,IAAIC,GAAIrB,IACRqB,GAAEC,UAAY,WAAM,MAAAJ,GAAMK,QAC1BF,EAAEG,cAAgB,WAAM,MAAAT,GAAAU,KAAeP,IACvCG,EAAEK,WAAa,SAAAC,GAAK,MAAAT,GAAMS,IAI5B,MAhBqD5B,WAAAiB,EAAAC,GAgBrDD,GAhBqDF,EAAAc,uBAArDpB,QAAAqB,eAAAjB,EAAA,cAAAkB,OAAA,IDeIlB,EAAAA,WAAkBI","file":"System/Collections/Array/ReadOnlyArrayWrapper.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"../../Exceptions/ArgumentNullException\", \"../ReadOnlyCollectionBase\", \"../Enumeration/Enumerator\"], function (require, exports, ArgumentNullException_1, ReadOnlyCollectionBase_1, Enumerator_1) {\n    \"use strict\";\n    var ReadOnlyArrayWrapper = (function (_super) {\n        __extends(ReadOnlyArrayWrapper, _super);\n        function ReadOnlyArrayWrapper(array) {\n            _super.call(this);\n            if (!array)\n                throw new ArgumentNullException_1.ArgumentNullException('array');\n            var _ = this;\n            _._getCount = function () { return array.length; };\n            _.getEnumerator = function () { return Enumerator_1.from(array); };\n            _.getValueAt = function (i) { return array[i]; };\n        }\n        return ReadOnlyArrayWrapper;\n    }(ReadOnlyCollectionBase_1.ReadOnlyCollectionBase));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ReadOnlyArrayWrapper;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {ReadOnlyCollectionBase} from \"../ReadOnlyCollectionBase\";\r\nimport {IArray} from \"./IArray\";\r\nimport {from as enumeratorFrom} from \"../Enumeration/Enumerator\";\r\n\r\nexport default class ReadOnlyArrayWrapper<T> extends ReadOnlyCollectionBase<T>\r\n{\r\n\r\n\tconstructor(array:IArray<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!array)\r\n\t\t\tthrow new ArgumentNullException('array');\r\n\r\n\t\tvar _ = this;\r\n\t\t_._getCount = () => array.length;\r\n\t\t_.getEnumerator = () => enumeratorFrom(array);\r\n\t\t_.getValueAt = i => array[i];\r\n\t}\r\n\r\n\tgetValueAt:(index:number)=>T;\r\n}\r\n"]}