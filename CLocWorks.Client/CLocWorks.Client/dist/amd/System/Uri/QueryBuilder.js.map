{"version":3,"sources":["System/Uri/QueryBuilder.js","System/Uri/QueryBuilder.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","Types_1","OrderedStringKeyDictionary_1","Enumerator_1","QueryParams","QueryBuilder","_super","query","decodeValues","call","importQuery","init","Type","isString","importFromString","isEnumerableOrArrayLike","importEntries","importMap","values","deserialize","_","parse","key","value","containsKey","prev","getValue","Array","isArray","push","setValue","encode","prefixIfNotEmpty","toString","OrderedStringKeyDictionary","defineProperty"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,WAAY,yDAA0D,wCAAyC,iBAAkB,SAAUC,EAASC,EAASC,EAASC,EAA8BC,EAAcC,GAC5O,YCSJ,IAAAC,GAAA,SAAAC,GAGC,QAAAD,GACCE,EACAC,GAAA,SAAAA,IAAAA,GAAA,GAEAF,EAAAG,KAAArB,MAEAA,KAAKsB,YAAYH,EAAOC,GA8E1B,MAvFkCrB,WAAAkB,EAAAC,GAa1BD,EAAAM,KAAP,SACCJ,EACAC,GAEA,MAFA,UAAAA,IAAAA,GAAA,GAEO,GAAIH,GAAaE,EAAOC,IAGhCH,EAAAV,UAAAe,YAAA,SACCH,EACAC,GAgBA,MAhBA,UAAAA,IAAAA,GAAA,GAGGP,EAAAW,KAAKC,SAASN,GAEhBnB,KAAK0B,iBAAyBP,EAAOC,GAE9BL,EAAAY,wBAAwBR,GAE/BnB,KAAK4B,cAAcT,GAInBnB,KAAK6B,UAA4BV,GAG3BnB,MAURiB,EAAAV,UAAAmB,iBAAA,SACCI,EACAC,EACAX,GADA,SAAAW,IAAAA,GAAA,GACA,SAAAX,IAAAA,GAAA,EAEA,IAAIY,GAAIhC,IAkBR,OAjBAgB,GAAYiB,MAAMH,EACjB,SAACI,EAAKC,GAEL,GAAGH,EAAEI,YAAYF,GACjB,CACC,GAAIG,GAAOL,EAAEM,SAASJ,EACnBK,OAAMC,QAAQH,GAChBA,EAAKI,KAAKN,GAEVH,EAAEU,SAASR,GAA0BG,EAAMF,QAG5CH,GAAEU,SAASR,EAAKC,IAElBJ,EACAX,GAEMpB,MAORiB,EAAAV,UAAAoC,OAAA,SAAOC,GAEN,MAAO5B,GAAY2B,OAAO3C,KAAM4C,IAGjC3B,EAAAV,UAAAsC,SAAA,WAEC,MAAO7C,MAAK2C,UAEd1B,GAvFkCH,EAAAgC,2BAArBlC,GAAAK,aAAYA,EAyFzBT,OAAAuC,eAAAnC,EAAA,cAAAuB,OAAA,ID9CIvB,EAAAA,WC8CWK","file":"System/Uri/QueryBuilder.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"../Types\", \"../Collections/Dictionaries/OrderedStringKeyDictionary\", \"../Collections/Enumeration/Enumerator\", \"./QueryParams\"], function (require, exports, Types_1, OrderedStringKeyDictionary_1, Enumerator_1, QueryParams) {\n    \"use strict\";\n    var QueryBuilder = (function (_super) {\n        __extends(QueryBuilder, _super);\n        function QueryBuilder(query, decodeValues) {\n            if (decodeValues === void 0) { decodeValues = true; }\n            _super.call(this);\n            this.importQuery(query, decodeValues);\n        }\n        QueryBuilder.init = function (query, decodeValues) {\n            if (decodeValues === void 0) { decodeValues = true; }\n            return new QueryBuilder(query, decodeValues);\n        };\n        QueryBuilder.prototype.importQuery = function (query, decodeValues) {\n            if (decodeValues === void 0) { decodeValues = true; }\n            if (Types_1.Type.isString(query)) {\n                this.importFromString(query, decodeValues);\n            }\n            else if (Enumerator_1.isEnumerableOrArrayLike(query)) {\n                this.importEntries(query);\n            }\n            else {\n                this.importMap(query);\n            }\n            return this;\n        };\n        QueryBuilder.prototype.importFromString = function (values, deserialize, decodeValues) {\n            if (deserialize === void 0) { deserialize = true; }\n            if (decodeValues === void 0) { decodeValues = true; }\n            var _ = this;\n            QueryParams.parse(values, function (key, value) {\n                if (_.containsKey(key)) {\n                    var prev = _.getValue(key);\n                    if (Array.isArray(prev))\n                        prev.push(value);\n                    else\n                        _.setValue(key, [prev, value]);\n                }\n                else\n                    _.setValue(key, value);\n            }, deserialize, decodeValues);\n            return this;\n        };\n        QueryBuilder.prototype.encode = function (prefixIfNotEmpty) {\n            return QueryParams.encode(this, prefixIfNotEmpty);\n        };\n        QueryBuilder.prototype.toString = function () {\n            return this.encode();\n        };\n        return QueryBuilder;\n    }(OrderedStringKeyDictionary_1.OrderedStringKeyDictionary));\n    exports.QueryBuilder = QueryBuilder;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = QueryBuilder;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {Type} from \"../Types\";\r\nimport {OrderedStringKeyDictionary} from \"../Collections/Dictionaries/OrderedStringKeyDictionary\";\r\nimport {isEnumerableOrArrayLike} from \"../Collections/Enumeration/Enumerator\";\r\nimport * as UriComponent from \"./UriComponent\";\r\nimport * as QueryParam from \"./QueryParam\";\r\nimport * as QueryParams from \"./QueryParams\";\r\n\r\n\r\n/**\r\n * Provides a means for parsing and building a set of parameters.\r\n *\r\n * In other languages, dictionaries are not reliable for retaining the order of stored values. So for certainty and flexibility we use an ordered dictionary as a base class.\r\n */\r\nexport class QueryBuilder extends OrderedStringKeyDictionary<UriComponent.Value|UriComponent.Value[]>\r\n{\r\n\r\n\tconstructor(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.importQuery(query, decodeValues);\r\n\t}\r\n\r\n\r\n\tstatic init(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\treturn new QueryBuilder(query, decodeValues);\r\n\t}\r\n\r\n\timportQuery(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\r\n\t\tif(Type.isString(query))\r\n\t\t{\r\n\t\t\tthis.importFromString(<string>query, decodeValues);\r\n\t\t}\r\n\t\telse if(isEnumerableOrArrayLike(query))\r\n\t\t{\r\n\t\t\tthis.importEntries(query);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.importMap(<UriComponent.Map>query);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Property parses the components of an URI into their values or array of values.\r\n\t * @param values\r\n\t * @param deserialize\r\n\t * @param decodeValues\r\n\t * @returns {QueryBuilder}\r\n\t */\r\n\timportFromString(\r\n\t\tvalues:string,\r\n\t\tdeserialize:boolean = true,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tQueryParams.parse(values,\r\n\t\t\t(key, value)=>\r\n\t\t\t{\r\n\t\t\t\tif(_.containsKey(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tvar prev = _.getValue(key);\r\n\t\t\t\t\tif(Array.isArray(prev))\r\n\t\t\t\t\t\tprev.push(value);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_.setValue(key, [<UriComponent.Value>prev, value]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\t_.setValue(key, value);\r\n\t\t\t},\r\n\t\t\tdeserialize,\r\n\t\t\tdecodeValues);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the encoded URI string\r\n\t */\r\n\tencode(prefixIfNotEmpty?:boolean):string\r\n\t{\r\n\t\treturn QueryParams.encode(this, prefixIfNotEmpty);\r\n\t}\r\n\r\n\ttoString():string\r\n\t{\r\n\t\treturn this.encode();\r\n\t}\r\n}\r\n\r\nexport default QueryBuilder;\r\n"]}