{"version":3,"sources":["System/Time/DateTime.js","System/Time/DateTime.ts"],"names":["define","require","exports","TimeSpan_1","ClockTime_1","TimeStamp_1","DateTime","value","kind","Date","_","this","_kind","_value","toJsDate","_setJsDate","prototype","getTime","_time","Object","defineProperty","get","enumerable","configurable","getFullYear","getMonth","getDate","getDay","addMilliseconds","ms","addSeconds","seconds","addMinutes","minutes","addHours","hours","addDays","days","addMonths","months","d","setMonth","addYears","years","setFullYear","add","time","getTotalMilliseconds","subtract","timePassedSince","previous","between","year","month","day","t","ClockTime","getHours","getMinutes","getSeconds","getMilliseconds","toTimeStamp","TimeStamp","from","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","now","date","today","first","last","f","l","TimeSpan","isLeapYear","daysInMonth","freeze"],"mappings":"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","file":"System/Time/DateTime.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based on .NET DateTime's interface.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\ndefine([\"require\", \"exports\", \"./TimeSpan\", \"./ClockTime\", \"./TimeStamp\"], function (require, exports, TimeSpan_1, ClockTime_1, TimeStamp_1) {\n    \"use strict\";\n    var DateTime = (function () {\n        function DateTime(value, kind) {\n            if (value === void 0) { value = new Date(); }\n            if (kind === void 0) { kind = 1; }\n            var _ = this;\n            _._kind = kind;\n            if (value instanceof DateTime)\n                _._value = value.toJsDate();\n            else if (value instanceof Date)\n                _._setJsDate(value);\n            else\n                _._value = value === void (0)\n                    ? new Date()\n                    : new Date(value);\n        }\n        DateTime.prototype.toJsDate = function () {\n            return new Date(this._value.getTime());\n        };\n        DateTime.prototype._setJsDate = function (value) {\n            this._time = null;\n            this._value = new Date(value.getTime());\n        };\n        Object.defineProperty(DateTime.prototype, \"kind\", {\n            get: function () {\n                return this._kind;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"year\", {\n            get: function () {\n                return this._value.getFullYear();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"month\", {\n            get: function () {\n                return this._value.getMonth();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"day\", {\n            get: function () {\n                return this._value.getDate();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"dayOfWeek\", {\n            get: function () {\n                return this._value.getDay();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DateTime.prototype.addMilliseconds = function (ms) {\n            ms = ms || 0;\n            return new DateTime(this._value.getTime() + ms, this._kind);\n        };\n        DateTime.prototype.addSeconds = function (seconds) {\n            seconds = seconds || 0;\n            return this.addMilliseconds(seconds * 1000);\n        };\n        DateTime.prototype.addMinutes = function (minutes) {\n            minutes = minutes || 0;\n            return this.addMilliseconds(minutes * 60000);\n        };\n        DateTime.prototype.addHours = function (hours) {\n            hours = hours || 0;\n            return this.addMilliseconds(hours * 3600000);\n        };\n        DateTime.prototype.addDays = function (days) {\n            days = days || 0;\n            return this.addMilliseconds(days * 86400000);\n        };\n        DateTime.prototype.addMonths = function (months) {\n            months = months || 0;\n            var d = this.toJsDate();\n            d.setMonth(d.getMonth() + months);\n            return new DateTime(d, this._kind);\n        };\n        DateTime.prototype.addYears = function (years) {\n            years = years || 0;\n            var d = this.toJsDate();\n            d.setFullYear(d.getFullYear() + years);\n            return new DateTime(d, this._kind);\n        };\n        DateTime.prototype.add = function (time) {\n            return this.addMilliseconds(time.getTotalMilliseconds());\n        };\n        DateTime.prototype.subtract = function (time) {\n            return this.addMilliseconds(-time.getTotalMilliseconds());\n        };\n        DateTime.prototype.timePassedSince = function (previous) {\n            return DateTime.between(previous, this);\n        };\n        Object.defineProperty(DateTime.prototype, \"date\", {\n            get: function () {\n                var _ = this;\n                return new DateTime(new Date(_.year, _.month, _.day), _._kind);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"timeOfDay\", {\n            get: function () {\n                var _ = this, t = _._time;\n                if (!t) {\n                    var d = this._value;\n                    _._time = t = new ClockTime_1.ClockTime(d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n                }\n                return t;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DateTime.prototype.toTimeStamp = function () {\n            return TimeStamp_1.TimeStamp.from(this);\n        };\n        Object.defineProperty(DateTime, \"now\", {\n            get: function () {\n                return new DateTime();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"toUniversalTime\", {\n            get: function () {\n                var _ = this;\n                if (_._kind != 1)\n                    return new DateTime(_, _._kind);\n                var d = _._value;\n                return new DateTime(new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()), 2);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime, \"today\", {\n            get: function () {\n                return DateTime.now.date;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime, \"tomorrow\", {\n            get: function () {\n                var today = DateTime.today;\n                return today.addDays(1);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DateTime.between = function (first, last) {\n            var f = first instanceof DateTime ? first._value : first, l = last instanceof DateTime ? last._value : last;\n            return new TimeSpan_1.TimeSpan(f.getTime() - l.getTime());\n        };\n        DateTime.isLeapYear = function (year) {\n            return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n        };\n        DateTime.daysInMonth = function (year, month) {\n            return (new Date(year, month + 1, 0)).getDate();\n        };\n        return DateTime;\n    }());\n    exports.DateTime = DateTime;\n    Object.freeze(DateTime);\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = DateTime;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based on .NET DateTime's interface.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {ICalendarDate, ITimeStamp} from \"./ITimeStamp\";\r\nimport {TimeSpan} from \"./TimeSpan\";\r\nimport {ClockTime} from \"./ClockTime\";\r\nimport {Milliseconds} from \"./HowMany\";\r\nimport {TimeStamp} from \"./TimeStamp\";\r\nimport {IDateTime} from \"./IDateTime\";\r\nimport {Gregorian} from \"./Calendars\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\n\r\nexport class DateTime implements ICalendarDate, IDateTime\r\n{\r\n\tprivate _value:Date;\r\n\r\n\ttoJsDate():Date\r\n\t{\r\n\t\treturn new Date(this._value.getTime()); // return a clone.\r\n\t}\r\n\r\n\tprivate _setJsDate(value:Date)\r\n\t{\r\n\t\tthis._time = null;\r\n\t\tthis._value = new Date(value.getTime());\r\n\t}\r\n\r\n\tconstructor();\r\n\tconstructor(dateString:string, kind?:DateTime.Kind);\r\n\tconstructor(milliseconds:number, kind?:DateTime.Kind);\r\n\tconstructor(source:Date, kind?:DateTime.Kind);\r\n\tconstructor(source:DateTime, kind?:DateTime.Kind);\r\n\tconstructor(value:any = new Date(), kind:DateTime.Kind = DateTime.Kind.Local)\r\n\t{\r\n\t\tvar _ = this;\r\n\t\t_._kind = kind;\r\n\t\tif(value instanceof DateTime)\r\n\t\t\t_._value = value.toJsDate();\r\n\t\telse if(value instanceof Date)\r\n\t\t\t_._setJsDate(value);\r\n\t\telse\r\n\t\t\t_._value = value=== void(0)\r\n\t\t\t\t? new Date()\r\n\t\t\t\t: new Date(value);\r\n\t}\r\n\r\n\tprivate _kind:DateTime.Kind;\r\n\tget kind():DateTime.Kind\r\n\t{\r\n\t\treturn this._kind;\r\n\t}\r\n\r\n\tget year():number\r\n\t{\r\n\t\treturn this._value.getFullYear();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Gregorian Month (zero indexed).\r\n\t * @returns {number}\r\n\t */\r\n\tget month():Gregorian.Month\r\n\t{\r\n\t\treturn this._value.getMonth();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the day of the month.  An integer between 1 and 31.\r\n\t * @returns {number}\r\n\t */\r\n\tget day():number\r\n\t{\r\n\t\treturn this._value.getDate();\r\n\t}\r\n\r\n\tget dayOfWeek():Gregorian.DayOfWeek\r\n\t{\r\n\t\treturn this._value.getDay();\r\n\t}\r\n\r\n\r\n\taddMilliseconds(ms:number):DateTime\r\n\t{\r\n\t\tms = ms || 0;\r\n\t\treturn new DateTime(this._value.getTime() + ms, this._kind);\r\n\t}\r\n\r\n\taddSeconds(seconds:number):DateTime\r\n\t{\r\n\t\tseconds = seconds || 0;\r\n\t\treturn this.addMilliseconds(seconds*Milliseconds.Per.Second);\r\n\t}\r\n\r\n\taddMinutes(minutes:number):DateTime\r\n\t{\r\n\t\tminutes = minutes || 0;\r\n\t\treturn this.addMilliseconds(minutes*Milliseconds.Per.Minute);\r\n\t}\r\n\r\n\taddHours(hours:number):DateTime\r\n\t{\r\n\t\thours = hours || 0;\r\n\t\treturn this.addMilliseconds(hours*Milliseconds.Per.Hour);\r\n\t}\r\n\r\n\taddDays(days:number):DateTime\r\n\t{\r\n\t\tdays = days || 0;\r\n\t\treturn this.addMilliseconds(days*Milliseconds.Per.Day);\r\n\t}\r\n\r\n\taddMonths(months:number):DateTime\r\n\t{\r\n\t\tmonths = months || 0;\r\n\t\tvar d = this.toJsDate();\r\n\t\td.setMonth(d.getMonth() + months);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\taddYears(years:number):DateTime\r\n\t{\r\n\t\tyears = years || 0;\r\n\t\tvar d = this.toJsDate();\r\n\t\td.setFullYear(d.getFullYear() + years);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and adds based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tadd(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and subtracts based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tsubtract(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(-time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a TimeSpan representing the amount of time between two dates.\r\n\t * @param previous\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\ttimePassedSince(previous:Date|DateTime):TimeSpan\r\n\t{\r\n\t\treturn DateTime.between(previous, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a DateTime object for 00:00 of this date.\r\n\t */\r\n\tget date():DateTime\r\n\t{\r\n\t\tvar _ = this;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\t_.year,\r\n\t\t\t\t_.month,\r\n\t\t\t\t_.day\r\n\t\t\t)\r\n\t\t\t, _._kind\r\n\t\t);\r\n\t}\r\n\r\n\tprivate _time:ClockTime;\r\n\r\n\t/**\r\n\t * Returns the time of day represented by a ClockTime object.\r\n\t * @returns {ClockTime}\r\n\t */\r\n\tget timeOfDay():ClockTime\r\n\t{\r\n\t\tvar _ = this, t = _._time;\r\n\t\tif(!t)\r\n\t\t{\r\n\t\t\tvar d = this._value;\r\n\t\t\t_._time = t = new ClockTime(\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds());\r\n\t\t}\r\n\t\treturn t;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a readonly object which contains all the date and time components.\r\n\t */\r\n\ttoTimeStamp():ITimeStamp\r\n\t{\r\n\t\treturn TimeStamp.from(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the now local time.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get now():DateTime\r\n\t{\r\n\t\treturn new DateTime();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a UTC version of this date if its kind is local.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tget toUniversalTime():DateTime\r\n\t{\r\n\t\tvar _ = this;\r\n\t\tif(_._kind!=DateTime.Kind.Local)\r\n\t\t\treturn new DateTime(_, _._kind);\r\n\r\n\t\tvar d = _._value;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\td.getUTCFullYear(),\r\n\t\t\t\td.getUTCMonth(),\r\n\t\t\t\td.getUTCDate(),\r\n\t\t\t\td.getUTCHours(),\r\n\t\t\t\td.getUTCMinutes(),\r\n\t\t\t\td.getUTCSeconds(),\r\n\t\t\t\td.getUTCMilliseconds()\r\n\t\t\t),\r\n\t\t\tDateTime.Kind.Utc\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * The date component for now.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get today():DateTime\r\n\t{\r\n\t\treturn DateTime.now.date;\r\n\t}\r\n\r\n\t/**\r\n\t * Midnight tomorrow.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get tomorrow():DateTime\r\n\t{\r\n\t\tvar today:DateTime = DateTime.today;\r\n\t\treturn today.addDays(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the difference between two dates as a TimeSpan.\r\n\t * @param first\r\n\t * @param last\r\n\t */\r\n\tstatic between(first:Date|DateTime, last:Date|DateTime):TimeSpan\r\n\t{\r\n\t\tvar f:Date = first instanceof DateTime ? first._value : <Date>first,\r\n\t\t    l:Date = last instanceof DateTime ? last._value : <Date>last;\r\n\r\n\t\treturn new TimeSpan(f.getTime() - l.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates if the given year is a leap year using the formula:\r\n\t * ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)\r\n\t * @param year\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isLeapYear(year:number):boolean\r\n\t{\r\n\t\treturn ((year%4==0) && (year%100!=0)) || (year%400==0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of days for the specific year and month.\r\n\t * @param year\r\n\t * @param month\r\n\t * @returns {any}\r\n\t */\r\n\tstatic daysInMonth(year:number, month:Gregorian.Month):number\r\n\t{\r\n\t\t// Basically, add 1 month, subtract a day... What's the date?\r\n\t\treturn (new Date(year, month + 1, 0)).getDate();\r\n\t}\r\n\r\n\r\n}\r\n\r\n// Extend DateTime's usefulness.\r\nexport module DateTime\r\n{\r\n\texport const enum Kind {\r\n\t\tUnspecified,\r\n\t\tLocal,\r\n\t\tUtc,\r\n\t}\r\n}\r\n\r\nObject.freeze(DateTime);\r\n\r\nexport default DateTime;\r\n"]}