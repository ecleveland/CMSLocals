{"version":3,"sources":["System/Time/TimeUnitValue.js","System/Time/TimeUnitValue.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","TimeUnit_1","TimeQuantity_1","getUnitQuantityFrom","q","units","TimeUnit","fromMilliseconds","getTotalMilliseconds","TimeUnitValue","_super","value","_units","call","assertValid","defineProperty","get","_quantity","set","v","_total","enumerable","configurable","toMilliseconds","to","from","Milliseconds","TimeQuantity"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,aAAc,kBAAmB,SAAUC,EAASC,EAASC,EAAYC,GACnG,YCiDJ,SAAAC,GAA6BC,EAAiBC,GAE7C,MAAOJ,GAAAK,SAASC,iBAAiBH,EAAEI,uBAAwBH,GAhD5D,GAAAI,GAAA,SAAAC,GAIC,QAAAD,GAAYE,EAAoCC,GAE/CF,EAAAG,KAAAzB,KAAqB,gBAAT,GACDuB,EACRR,EAAmCQ,EAAOC,IAJExB,KAAAwB,OAAAA,EAK/CX,EAAAK,SAASQ,YAAYF,GAmCvB,MA3C4BzB,WAAAsB,EAAAC,GAW3Bd,OAAAmB,eAAIN,EAAAd,UAAA,SDJOqB,ICIX,WAEC,MAAO5B,MAAK6B,WDHFC,ICMX,SAAUC,GAET/B,KAAKgC,OAAS,KACdhC,KAAK6B,UAAYE,GDLPE,YAAY,EACZC,cAAc,ICOzBb,EAAAd,UAAAa,qBAAA,WAEC,MAAOP,GAAAK,SAASiB,eAAenC,KAAK6B,UAAW7B,KAAKwB,SAIrDhB,OAAAmB,eAAIN,EAAAd,UAAA,SDPOqB,ICOX,WAEC,MAAO5B,MAAKwB,QDNFS,YAAY,EACZC,cAAc,ICQzBb,EAAAd,UAAA6B,GAAA,SAAGnB,GAEF,MAFE,UAAAA,IAAAA,EAAiBjB,KAAKiB,OAEjBI,EAAcgB,KAAKrC,KAAKiB,IAGzBI,EAAAgB,KAAP,SAAYd,EAA4BN,GAEvC,MAFuC,UAAAA,IAAAA,EAAiBJ,EAAAK,SAASoB,cAE1D,GAAIjB,GAAcE,EAAON,IAGlCI,GA3C4BP,EAAAyB,aAD5B/B,QAAAmB,eAAAf,EAAA,cAAAW,OAAA,IDuCIX,EAAAA,WAAkBS","file":"System/Time/TimeUnitValue.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"./TimeUnit\", \"./TimeQuantity\"], function (require, exports, TimeUnit_1, TimeQuantity_1) {\n    \"use strict\";\n    var TimeUnitValue = (function (_super) {\n        __extends(TimeUnitValue, _super);\n        function TimeUnitValue(value, _units) {\n            _super.call(this, typeof (value) == 'number'\n                ? value\n                : getUnitQuantityFrom(value, _units));\n            this._units = _units;\n            TimeUnit_1.TimeUnit.assertValid(_units);\n        }\n        Object.defineProperty(TimeUnitValue.prototype, \"value\", {\n            get: function () {\n                return this._quantity;\n            },\n            set: function (v) {\n                this._total = null;\n                this._quantity = v;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TimeUnitValue.prototype.getTotalMilliseconds = function () {\n            return TimeUnit_1.TimeUnit.toMilliseconds(this._quantity, this._units);\n        };\n        Object.defineProperty(TimeUnitValue.prototype, \"units\", {\n            get: function () {\n                return this._units;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TimeUnitValue.prototype.to = function (units) {\n            if (units === void 0) { units = this.units; }\n            return TimeUnitValue.from(this, units);\n        };\n        TimeUnitValue.from = function (value, units) {\n            if (units === void 0) { units = TimeUnit_1.TimeUnit.Milliseconds; }\n            return new TimeUnitValue(value, units);\n        };\n        return TimeUnitValue;\n    }(TimeQuantity_1.TimeQuantity));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TimeUnitValue;\n    function getUnitQuantityFrom(q, units) {\n        return TimeUnit_1.TimeUnit.fromMilliseconds(q.getTotalMilliseconds(), units);\n    }\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {TimeUnit} from \"./TimeUnit\";\r\nimport {TimeQuantity} from \"./TimeQuantity\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\n\r\n/**\r\n * TimeUnitValue allows for passing around a reference to a changeable measure of time coerced by its unit type.\r\n */\r\nexport default\r\nclass TimeUnitValue extends TimeQuantity\r\n{\r\n\r\n\tconstructor(value:number|ITimeQuantity, private _units:TimeUnit)\r\n\t{\r\n\t\tsuper(typeof(value)=='number'\r\n\t\t\t? <number>value\r\n\t\t\t: getUnitQuantityFrom(<ITimeQuantity>value, _units));\r\n\t\tTimeUnit.assertValid(_units);\r\n\t}\r\n\r\n\tget value():number\r\n\t{\r\n\t\treturn this._quantity;\r\n\t}\r\n\r\n\tset value(v:number)\r\n\t{\r\n\t\tthis._total = null;\r\n\t\tthis._quantity = v;\r\n\t}\r\n\r\n\tgetTotalMilliseconds():number\r\n\t{\r\n\t\treturn TimeUnit.toMilliseconds(this._quantity, this._units);\r\n\t}\r\n\r\n\t// To avoid confusion, the unit type can only be set once at construction.\r\n\tget units():TimeUnit\r\n\t{\r\n\t\treturn this._units;\r\n\t}\r\n\r\n\tto(units:TimeUnit = this.units):TimeUnitValue\r\n\t{\r\n\t\treturn TimeUnitValue.from(this,units);\r\n\t}\r\n\r\n\tstatic from(value:number|ITimeQuantity, units:TimeUnit = TimeUnit.Milliseconds):TimeUnitValue\r\n\t{\r\n\t\treturn new TimeUnitValue(value, units);\r\n\t}\r\n\r\n}\r\n\r\nfunction getUnitQuantityFrom(q:ITimeQuantity, units:TimeUnit)\r\n{\r\n\treturn TimeUnit.fromMilliseconds(q.getTotalMilliseconds(), units);\r\n}\r\n"]}