{"version":3,"sources":["System/Lazy.js","System/Lazy.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","ResolverBase_1","Lazy","_super","valueFactory","trapExceptions","allowReset","call","_disposableObjectName","_isValueCreated","defineProperty","get","enumerable","configurable","getValue","equals","other","valueEquals","value","ResolverBase"],"mappings":";;;;AAIA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,SAAQ,UAAW,UAAW,kBAAmB,SAAUC,EAASC,EAASC,GACzE,YCAJ,IAAAC,GAAA,SAAAC,GAGC,QAAAD,GAAYE,EAAsBC,EAAgCC,GAAhC,SAAAD,IAAAA,GAAA,GAAgC,SAAAC,IAAAA,GAAA,GAEjEH,EAAAI,KAAAnB,KAAMgB,EAAcC,EAAgBC,GACpClB,KAAKoB,sBAAwB,OAC7BpB,KAAKqB,iBAAkB,EAuBzB,MA9B6BtB,WAAAe,EAAAC,GAU5BP,OAAAc,eAAIR,EAAAP,UAAA,kBDCOgB,ICDX,WAEC,QAASvB,KAAKqB,iBDEJG,YAAY,EACZC,cAAc,ICAzBjB,OAAAc,eAAIR,EAAAP,UAAA,SDGOgB,ICHX,WAEC,MAAOvB,MAAK0B,YDIFF,YAAY,EACZC,cAAc,ICFzBX,EAAAP,UAAAoB,OAAA,SAAOC,GAEN,MAAO5B,OAAM4B,GAGdd,EAAAP,UAAAsB,YAAA,SAAYD,GAEX,MAAO5B,MAAK2B,OAAOC,IAAU5B,KAAK8B,QAAQF,EAAME,OAGlDhB,GA9B6BD,EAAAkB,aAAhBnB,GAAAE,KAAIA,EAgCjBN,OAAAc,eAAAV,EAAA,cAAAkB,OAAA,IDEIlB,EAAAA,WCFWE","file":"System/Lazy.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine([\"require\", \"exports\", \"./ResolverBase\"], function (require, exports, ResolverBase_1) {\n    \"use strict\";\n    var Lazy = (function (_super) {\n        __extends(Lazy, _super);\n        function Lazy(valueFactory, trapExceptions, allowReset) {\n            if (trapExceptions === void 0) { trapExceptions = false; }\n            if (allowReset === void 0) { allowReset = false; }\n            _super.call(this, valueFactory, trapExceptions, allowReset);\n            this._disposableObjectName = 'Lazy';\n            this._isValueCreated = false;\n        }\n        Object.defineProperty(Lazy.prototype, \"isValueCreated\", {\n            get: function () {\n                return !!this._isValueCreated;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Lazy.prototype, \"value\", {\n            get: function () {\n                return this.getValue();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Lazy.prototype.equals = function (other) {\n            return this == other;\n        };\n        Lazy.prototype.valueEquals = function (other) {\n            return this.equals(other) || this.value === other.value;\n        };\n        return Lazy;\n    }(ResolverBase_1.ResolverBase));\n    exports.Lazy = Lazy;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Lazy;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ILazy} from \"./ILazy\";\r\nimport {Func} from \"./FunctionTypes\";\r\nimport {ResolverBase} from \"./ResolverBase\";\r\n\r\n// We need a non-resettable lazy to ensure it can be passed safely around.\r\nexport class Lazy<T> extends ResolverBase<T> implements ILazy<T>\r\n{\r\n\r\n\tconstructor(valueFactory:Func<T>, trapExceptions:boolean = false, allowReset:boolean = false)\r\n\t{\r\n\t\tsuper(valueFactory, trapExceptions, allowReset);\r\n\t\tthis._disposableObjectName = 'Lazy';\r\n\t\tthis._isValueCreated = false;\r\n\t}\r\n\r\n\tget isValueCreated():boolean\r\n\t{\r\n\t\treturn !!this._isValueCreated;\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this.getValue();\r\n\t}\r\n\r\n\tequals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this==other;\r\n\t}\r\n\r\n\tvalueEquals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this.equals(other) || this.value===other.value;\r\n\t}\r\n\r\n}\r\n\r\nexport default Lazy;"]}